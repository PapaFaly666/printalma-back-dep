const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testDirectAPIContraintes() {
  console.log('üöÄ TEST DIRECT DES CONTRAINTES SANS AUTHENTIFICATION\n');

  try {
    // Testons si on peut v√©rifier directement les endpoints de suppression
    console.log('üîç √âTAPE 1: V√©rification des routes disponibles');

    // D'abord, v√©rifions s'il existe d√©j√† des donn√©es √† tester
    const categories = await prisma.category.findMany({
      include: {
        subCategories: {
          include: {
            variations: true
          }
        },
        products: true
      }
    });

    console.log(`üìä Donn√©es existantes: ${categories.length} cat√©gories trouv√©es`);

    // Cherchons une cat√©gorie avec des produits
    let categoryWithProducts = null;
    for (const cat of categories) {
      if (cat.products.length > 0) {
        categoryWithProducts = cat;
        break;
      }
    }

    if (categoryWithProducts) {
      console.log(`‚úÖ Cat√©gorie trouv√©e avec des produits: "${categoryWithProducts.name}" (${categoryWithProducts.products.length} produits)`);

      // Testons directement la suppression via Prisma pour simuler l'API
      console.log('\nüóëÔ∏è  TEST: Tentative de suppression de cat√©gorie avec produits');

      try {
        await prisma.category.delete({
          where: { id: categoryWithProducts.id }
        });
        console.log('‚ùå PROBL√àME: Cat√©gorie supprim√©e malgr√© les produits li√©s !');

        // V√©rifions l'impact sur les produits
        const productsAfter = await prisma.product.findMany({
          where: { categoryId: categoryWithProducts.id }
        });

        console.log(`üìä Produits affect√©s: ${productsAfter.length} produits avec categoryId null`);
        productsAfter.forEach(p => {
          console.log(`   - Produit: ${p.name} (categoryId: ${p.categoryId})`);
        });

      } catch (error) {
        console.log('‚úÖ BON: La cat√©gorie est prot√©g√©e contre la suppression !');
        console.log(`   Erreur: ${error.code} - ${error.message}`);
      }

    } else {
      console.log('‚ÑπÔ∏è  Aucune cat√©gorie avec des produits trouv√©e. Cr√©ons un test complet...');

      // Cr√©ons un test complet comme avant
      console.log('\nüìÅ Cr√©ation de donn√©es de test...');

      const category = await prisma.category.create({
        data: {
          name: 'Cat√©gorie Test API Simple',
          slug: 'categorie-test-api-simple',
          description: 'Test simple des contraintes API',
          displayOrder: 999,
          isActive: true
        }
      });

      const subCategory = await prisma.subCategory.create({
        data: {
          name: 'Sous-cat√©gorie Test API Simple',
          slug: 'sous-categorie-test-api-simple',
          description: 'Test simple',
          categoryId: category.id,
          displayOrder: 999,
          isActive: true
        }
      });

      const variation = await prisma.variation.create({
        data: {
          name: 'Variation Test API Simple',
          slug: 'variation-test-api-simple',
          description: 'Test simple',
          subCategoryId: subCategory.id,
          displayOrder: 999,
          isActive: true
        }
      });

      const product = await prisma.product.create({
        data: {
          name: 'Produit Test API Simple',
          description: 'Produit pour test API simple',
          price: 19.99,
          stock: 50,
          status: 'PUBLISHED',
          categoryId: category.id,
          subCategoryId: subCategory.id,
          variationId: variation.id
        }
      });

      console.log(`‚úÖ Hi√©rarchie cr√©√©e: ${category.name} ‚Üí ${subCategory.name} ‚Üí ${variation.name}`);
      console.log(`‚úÖ Produit cr√©√©: ${product.name}`);

      // Maintenant testons les suppressions
      console.log('\nüóëÔ∏è  TESTS DE SUPPRESSION:');

      // Test variation
      try {
        await prisma.variation.delete({ where: { id: variation.id } });
        console.log('‚ùå Variation supprim√©e (PROBL√àME !)');

        const updatedProduct = await prisma.product.findUnique({ where: { id: product.id } });
        console.log(`   variationId apr√®s suppression: ${updatedProduct.variationId}`);

      } catch (error) {
        console.log('‚úÖ Variation prot√©g√©e (CORRECT !)');
      }

      // Test sous-cat√©gorie
      try {
        await prisma.subCategory.delete({ where: { id: subCategory.id } });
        console.log('‚ùå Sous-cat√©gorie supprim√©e (PROBL√àME !)');

        const updatedProduct = await prisma.product.findUnique({ where: { id: product.id } });
        console.log(`   subCategoryId apr√®s suppression: ${updatedProduct.subCategoryId}`);

      } catch (error) {
        console.log('‚úÖ Sous-cat√©gorie prot√©g√©e (CORRECT !)');
      }

      // Test cat√©gorie
      try {
        await prisma.category.delete({ where: { id: category.id } });
        console.log('‚ùå Cat√©gorie supprim√©e (PROBL√àME !)');

        const updatedProduct = await prisma.product.findUnique({ where: { id: product.id } });
        console.log(`   categoryId apr√®s suppression: ${updatedProduct.categoryId}`);

      } catch (error) {
        console.log('‚úÖ Cat√©gorie prot√©g√©e (CORRECT !)');
      }

      // Nettoyage
      console.log('\nüßπ Nettoyage...');
      await prisma.product.delete({ where: { id: product.id } });

      try { await prisma.variation.delete({ where: { id: variation.id } }); } catch {}
      try { await prisma.subCategory.delete({ where: { id: subCategory.id } }); } catch {}
      try { await prisma.category.delete({ where: { id: category.id } }); } catch {}

      console.log('‚úÖ Nettoyage termin√©');
    }

    console.log('\nüéØ CONCLUSION');
    console.log('Ce test direct confirme le comportement des contraintes de suppression.');
    console.log('Si les suppressions ont r√©ussi: ‚ùå PROBL√àME DE S√âCURIT√â DES DONN√âES');
    console.log('Si les suppressions ont √©chou√©: ‚úÖ CONTRAINTES FONCTIONNELLES');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testDirectAPIContraintes().catch(console.error);