const axios = require('axios');

const API_BASE = 'http://localhost:3004';

// Configuration de test
const testConfig = {
  baseProductId: 1,
  designId: 2, // Supposons qu'un design existe
  vendorPrice: 25000,
  vendorStock: 100,
  selectedColors: [{ id: 1, name: 'Black', colorCode: '#000000' }],
  selectedSizes: [{ id: 1, sizeName: 'M' }],
  productStructure: {
    adminProduct: {
      id: 1,
      name: 'T-shirt Basic',
      description: 'T-shirt en coton',
      price: 19000,
      images: { colorVariations: [] },
      sizes: [{ id: 1, sizeName: 'M' }]
    },
    designApplication: {
      positioning: 'CENTER',
      scale: 0.6
    }
  }
};

async function testProductValidation() {
  console.log('üß™ Test de validation des produits vendeur\n');

  // Test 1: Nom auto-g√©n√©r√© (doit √©chouer)
  console.log('üìù Test 1: Nom auto-g√©n√©r√©');
  try {
    const response = await axios.post(`${API_BASE}/vendor/products`, {
      ...testConfig,
      vendorName: 'Produit auto-g√©n√©r√© pour positionnage design',
      vendorDescription: 'Description normale'
    }, {
      withCredentials: true
    });
    console.log('‚ùå √âCHEC: Devrait rejeter le nom auto-g√©n√©r√©');
  } catch (error) {
    if (error.response?.status === 400) {
      console.log('‚úÖ SUCC√àS: Nom auto-g√©n√©r√© rejet√©');
      console.log(`   Message: ${error.response.data.message}`);
    } else {
      console.log('‚ùå ERREUR inattendue:', error.response?.data || error.message);
    }
  }

  // Test 2: Nom trop court (doit √©chouer)
  console.log('\nüìù Test 2: Nom trop court');
  try {
    const response = await axios.post(`${API_BASE}/vendor/products`, {
      ...testConfig,
      vendorName: 'Ab',
      vendorDescription: 'Description normale'
    }, {
      withCredentials: true
    });
    console.log('‚ùå √âCHEC: Devrait rejeter le nom trop court');
  } catch (error) {
    if (error.response?.status === 400) {
      console.log('‚úÖ SUCC√àS: Nom trop court rejet√©');
      console.log(`   Message: ${error.response.data.message}`);
    } else {
      console.log('‚ùå ERREUR inattendue:', error.response?.data || error.message);
    }
  }

  // Test 3: Description auto-g√©n√©r√©e (doit √©chouer)
  console.log('\nüìù Test 3: Description auto-g√©n√©r√©e');
  try {
    const response = await axios.post(`${API_BASE}/vendor/products`, {
      ...testConfig,
      vendorName: 'T-shirt Dragon Mystique',
      vendorDescription: 'Produit auto-g√©n√©r√© pour positionnage design'
    }, {
      withCredentials: true
    });
    console.log('‚ùå √âCHEC: Devrait rejeter la description auto-g√©n√©r√©e');
  } catch (error) {
    if (error.response?.status === 400) {
      console.log('‚úÖ SUCC√àS: Description auto-g√©n√©r√©e rejet√©e');
      console.log(`   Message: ${error.response.data.message}`);
    } else {
      console.log('‚ùå ERREUR inattendue:', error.response?.data || error.message);
    }
  }

  // Test 4: Nom g√©n√©rique "Test" (doit √©chouer)
  console.log('\nüìù Test 4: Nom g√©n√©rique "Test"');
  try {
    const response = await axios.post(`${API_BASE}/vendor/products`, {
      ...testConfig,
      vendorName: 'Test',
      vendorDescription: 'Description normale'
    }, {
      withCredentials: true
    });
    console.log('‚ùå √âCHEC: Devrait rejeter le nom "Test"');
  } catch (error) {
    if (error.response?.status === 400) {
      console.log('‚úÖ SUCC√àS: Nom "Test" rejet√©');
      console.log(`   Message: ${error.response.data.message}`);
    } else {
      console.log('‚ùå ERREUR inattendue:', error.response?.data || error.message);
    }
  }

  // Test 5: Nom valide (doit r√©ussir)
  console.log('\nüìù Test 5: Nom valide');
  try {
    const response = await axios.post(`${API_BASE}/vendor/products`, {
      ...testConfig,
      vendorName: 'T-shirt Dragon Mystique Premium',
      vendorDescription: 'T-shirt premium avec design dragon exclusif'
    }, {
      withCredentials: true
    });
    
    if (response.data.success) {
      console.log('‚úÖ SUCC√àS: Produit cr√©√© avec nom valide');
      console.log(`   Produit ID: ${response.data.productId}`);
      console.log(`   Message: ${response.data.message}`);
    } else {
      console.log('‚ùå √âCHEC: R√©ponse inattendue:', response.data);
    }
  } catch (error) {
    if (error.response?.status === 400 && error.response.data.message.includes('d√©j√† existant')) {
      console.log('‚úÖ SUCC√àS: Validation pass√©e (produit d√©j√† existant)');
      console.log(`   Message: ${error.response.data.message}`);
    } else {
      console.log('‚ùå ERREUR:', error.response?.data || error.message);
    }
  }

  // Test 6: Description vide (doit r√©ussir)
  console.log('\nüìù Test 6: Description vide');
  try {
    const response = await axios.post(`${API_BASE}/vendor/products`, {
      ...testConfig,
      vendorName: 'T-shirt Dragon Mystique √âdition Limit√©e',
      vendorDescription: ''
    }, {
      withCredentials: true
    });
    
    if (response.data.success) {
      console.log('‚úÖ SUCC√àS: Produit cr√©√© avec description vide');
    } else {
      console.log('‚ùå √âCHEC: R√©ponse inattendue:', response.data);
    }
  } catch (error) {
    if (error.response?.status === 400 && error.response.data.message.includes('d√©j√† existant')) {
      console.log('‚úÖ SUCC√àS: Validation pass√©e (produit d√©j√† existant)');
    } else {
      console.log('‚ùå ERREUR:', error.response?.data || error.message);
    }
  }

  console.log('\nüéØ Tests termin√©s');
}

// Ex√©cuter les tests
testProductValidation().catch(console.error); 