const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function applyMigration() {
  console.log('üîÑ Application de la migration pour ajouter l\'enum ProductGenre...\n');

  try {
    // 1. Cr√©er l'enum ProductGenre
    console.log('1Ô∏è‚É£ Cr√©ation de l\'enum ProductGenre...');
    await prisma.$executeRaw`CREATE TYPE "ProductGenre" AS ENUM ('HOMME', 'FEMME', 'BEBE', 'UNISEXE')`;
    console.log('‚úÖ Enum ProductGenre cr√©√© avec succ√®s');

    // 2. Ajouter la colonne genre √† la table Product
    console.log('\n2Ô∏è‚É£ Ajout de la colonne genre √† la table Product...');
    await prisma.$executeRaw`ALTER TABLE "Product" ADD COLUMN IF NOT EXISTS "genre" "ProductGenre" NOT NULL DEFAULT 'UNISEXE'`;
    console.log('‚úÖ Colonne genre ajout√©e avec succ√®s');

    // 3. Cr√©er l'index sur la colonne genre
    console.log('\n3Ô∏è‚É£ Cr√©ation de l\'index sur la colonne genre...');
    await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS "Product_genre_idx" ON "Product"("genre")`;
    console.log('‚úÖ Index cr√©√© avec succ√®s');

    // 4. Mettre √† jour les produits existants
    console.log('\n4Ô∏è‚É£ Mise √† jour des produits existants...');
    const updateResult = await prisma.$executeRaw`UPDATE "Product" SET "genre" = 'UNISEXE' WHERE "genre" IS NULL`;
    console.log('‚úÖ Produits existants mis √† jour');

    // 5. V√©rifier que tout fonctionne
    console.log('\n5Ô∏è‚É£ V√©rification de l\'impl√©mentation...');
    const testProduct = await prisma.product.create({
      data: {
        name: 'Test Product Genre',
        description: 'Test pour v√©rifier l\'enum',
        price: 1000,
        stock: 10,
        status: 'DRAFT',
        isReadyProduct: false,
        genre: 'HOMME'
      }
    });

    console.log('‚úÖ Test de cr√©ation r√©ussi:', {
      id: testProduct.id,
      name: testProduct.name,
      genre: testProduct.genre
    });

    // Nettoyer le produit de test
    await prisma.product.delete({
      where: { id: testProduct.id }
    });

    console.log('\nüéâ Migration appliqu√©e avec succ√®s !');
    console.log('‚úÖ L\'enum ProductGenre est maintenant disponible');
    console.log('‚úÖ La colonne genre a √©t√© ajout√©e √† la table Product');
    console.log('‚úÖ L\'index a √©t√© cr√©√© pour optimiser les requ√™tes');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'application de la migration:', error);
    
    // Si l'enum existe d√©j√†, on continue
    if (error.message.includes('already exists')) {
      console.log('‚ö†Ô∏è L\'enum ProductGenre existe d√©j√†, continuation...');
      
      try {
        // V√©rifier que la colonne existe
        const testProduct = await prisma.product.create({
          data: {
            name: 'Test Product Genre',
            description: 'Test pour v√©rifier l\'enum',
            price: 1000,
            stock: 10,
            status: 'DRAFT',
            isReadyProduct: false,
            genre: 'HOMME'
          }
        });

        console.log('‚úÖ Test de cr√©ation r√©ussi:', {
          id: testProduct.id,
          name: testProduct.name,
          genre: testProduct.genre
        });

        // Nettoyer le produit de test
        await prisma.product.delete({
          where: { id: testProduct.id }
        });

        console.log('\nüéâ L\'enum ProductGenre est d√©j√† configur√© !');
      } catch (testError) {
        console.error('‚ùå Erreur lors du test:', testError);
      }
    }
  } finally {
    await prisma.$disconnect();
  }
}

applyMigration(); 

const prisma = new PrismaClient();

async function applyMigration() {
  console.log('üîÑ Application de la migration pour ajouter l\'enum ProductGenre...\n');

  try {
    // 1. Cr√©er l'enum ProductGenre
    console.log('1Ô∏è‚É£ Cr√©ation de l\'enum ProductGenre...');
    await prisma.$executeRaw`CREATE TYPE "ProductGenre" AS ENUM ('HOMME', 'FEMME', 'BEBE', 'UNISEXE')`;
    console.log('‚úÖ Enum ProductGenre cr√©√© avec succ√®s');

    // 2. Ajouter la colonne genre √† la table Product
    console.log('\n2Ô∏è‚É£ Ajout de la colonne genre √† la table Product...');
    await prisma.$executeRaw`ALTER TABLE "Product" ADD COLUMN IF NOT EXISTS "genre" "ProductGenre" NOT NULL DEFAULT 'UNISEXE'`;
    console.log('‚úÖ Colonne genre ajout√©e avec succ√®s');

    // 3. Cr√©er l'index sur la colonne genre
    console.log('\n3Ô∏è‚É£ Cr√©ation de l\'index sur la colonne genre...');
    await prisma.$executeRaw`CREATE INDEX IF NOT EXISTS "Product_genre_idx" ON "Product"("genre")`;
    console.log('‚úÖ Index cr√©√© avec succ√®s');

    // 4. Mettre √† jour les produits existants
    console.log('\n4Ô∏è‚É£ Mise √† jour des produits existants...');
    const updateResult = await prisma.$executeRaw`UPDATE "Product" SET "genre" = 'UNISEXE' WHERE "genre" IS NULL`;
    console.log('‚úÖ Produits existants mis √† jour');

    // 5. V√©rifier que tout fonctionne
    console.log('\n5Ô∏è‚É£ V√©rification de l\'impl√©mentation...');
    const testProduct = await prisma.product.create({
      data: {
        name: 'Test Product Genre',
        description: 'Test pour v√©rifier l\'enum',
        price: 1000,
        stock: 10,
        status: 'DRAFT',
        isReadyProduct: false,
        genre: 'HOMME'
      }
    });

    console.log('‚úÖ Test de cr√©ation r√©ussi:', {
      id: testProduct.id,
      name: testProduct.name,
      genre: testProduct.genre
    });

    // Nettoyer le produit de test
    await prisma.product.delete({
      where: { id: testProduct.id }
    });

    console.log('\nüéâ Migration appliqu√©e avec succ√®s !');
    console.log('‚úÖ L\'enum ProductGenre est maintenant disponible');
    console.log('‚úÖ La colonne genre a √©t√© ajout√©e √† la table Product');
    console.log('‚úÖ L\'index a √©t√© cr√©√© pour optimiser les requ√™tes');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'application de la migration:', error);
    
    // Si l'enum existe d√©j√†, on continue
    if (error.message.includes('already exists')) {
      console.log('‚ö†Ô∏è L\'enum ProductGenre existe d√©j√†, continuation...');
      
      try {
        // V√©rifier que la colonne existe
        const testProduct = await prisma.product.create({
          data: {
            name: 'Test Product Genre',
            description: 'Test pour v√©rifier l\'enum',
            price: 1000,
            stock: 10,
            status: 'DRAFT',
            isReadyProduct: false,
            genre: 'HOMME'
          }
        });

        console.log('‚úÖ Test de cr√©ation r√©ussi:', {
          id: testProduct.id,
          name: testProduct.name,
          genre: testProduct.genre
        });

        // Nettoyer le produit de test
        await prisma.product.delete({
          where: { id: testProduct.id }
        });

        console.log('\nüéâ L\'enum ProductGenre est d√©j√† configur√© !');
      } catch (testError) {
        console.error('‚ùå Erreur lors du test:', testError);
      }
    }
  } finally {
    await prisma.$disconnect();
  }
}

applyMigration(); 