const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

// Configuration pour les tests
const config = {
  headers: {
    'Authorization': 'Bearer YOUR_ADMIN_TOKEN_HERE', // Remplacez par un vrai token admin
    'Content-Type': 'application/json'
  }
};

async function testUltraSimple() {
  console.log('üß™ Test ultra-simple (sans auth)');
  console.log('==================================\n');

  try {
    const response = await axios.get(`${BASE_URL}/products/ready/ultra-test`);
    console.log('‚úÖ Endpoint ultra-simple fonctionne:', response.data);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur endpoint ultra-simple:', error.response?.data || error.message);
    return false;
  }
}

async function testSimpleWithAuth() {
  console.log('\nüîê Test simple avec authentification');
  console.log('=====================================\n');

  try {
    const response = await axios.get(`${BASE_URL}/products/ready/simple-test`, config);
    console.log('‚úÖ Endpoint simple avec auth fonctionne:', response.data);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur endpoint simple avec auth:', error.response?.data || error.message);
    return false;
  }
}

async function testReadyProductsList() {
  console.log('\nüìã Test liste des produits pr√™ts');
  console.log('==================================\n');

  try {
    const response = await axios.get(`${BASE_URL}/products/ready`, config);
    console.log('‚úÖ Endpoint liste fonctionne:', {
      total: response.data.total,
      productsCount: response.data.products?.length || 0,
      pagination: response.data.pagination
    });
    return true;
  } catch (error) {
    console.error('‚ùå Erreur endpoint liste:', error.response?.data || error.message);
    return false;
  }
}

async function testReadyProductDetail() {
  console.log('\nüîç Test d√©tail d\'un produit pr√™t');
  console.log('====================================\n');

  try {
    // D'abord r√©cup√©rer la liste pour avoir un ID
    const listResponse = await axios.get(`${BASE_URL}/products/ready`, config);
    const products = listResponse.data.products || [];
    
    if (products.length === 0) {
      console.log('‚ÑπÔ∏è Aucun produit pr√™t trouv√© pour tester le d√©tail');
      return true;
    }

    const firstProductId = products[0].id;
    const response = await axios.get(`${BASE_URL}/products/ready/${firstProductId}`, config);
    console.log('‚úÖ Endpoint d√©tail fonctionne:', {
      id: response.data.id,
      name: response.data.name,
      status: response.data.status
    });
    return true;
  } catch (error) {
    console.error('‚ùå Erreur endpoint d√©tail:', error.response?.data || error.message);
    return false;
  }
}

async function testWithCurl() {
  console.log('\nüîÑ Commandes curl pour tester manuellement');
  console.log('===========================================\n');

  console.log('1. Test ultra-simple (sans auth):');
  console.log(`   curl -X GET ${BASE_URL}/products/ready/ultra-test`);
  console.log('');
  
  console.log('2. Test simple avec auth:');
  console.log(`   curl -X GET ${BASE_URL}/products/ready/simple-test \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN" \\');
  console.log('     -H "Content-Type: application/json"');
  console.log('');
  
  console.log('3. Test liste des produits:');
  console.log(`   curl -X GET ${BASE_URL}/products/ready \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN" \\');
  console.log('     -H "Content-Type: application/json"');
  console.log('');
  
  console.log('4. Test avec filtres:');
  console.log(`   curl -X GET "${BASE_URL}/products/ready?status=published&limit=10" \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN" \\');
  console.log('     -H "Content-Type: application/json"');
}

function showFrontendInstructions() {
  console.log('\nüìã Instructions pour le frontend');
  console.log('================================\n');

  console.log('1. V√©rifiez que le serveur fonctionne:');
  console.log('   - Tous les tests ci-dessus doivent passer');
  console.log('   - Le serveur doit √™tre sur le port 3000');
  console.log('');
  
  console.log('2. Configurez l\'API helper:');
  console.log('   - BASE_URL = "http://localhost:3000" (pas 3004)');
  console.log('   - Utilisez le guide FRONTEND_READY_PRODUCTS_GUIDE.md');
  console.log('');
  
  console.log('3. Impl√©mentez les composants:');
  console.log('   - ReadyProductsPage');
  console.log('   - ReadyProductCard');
  console.log('   - ReadyProductForm');
  console.log('');
  
  console.log('4. Testez avec un token admin valide');
}

function showTroubleshooting() {
  console.log('\nüõ†Ô∏è D√©pannage');
  console.log('=============\n');

  console.log('Si le serveur ne d√©marre pas:');
  console.log('1. V√©rifiez les erreurs TypeScript: npm run build');
  console.log('2. R√©g√©n√©rez Prisma: npx prisma generate');
  console.log('3. Red√©marrez: npm run start:dev');
  console.log('');
  
  console.log('Si vous avez une erreur 400:');
  console.log('1. Le serveur d√©marre mais a des erreurs de validation');
  console.log('2. V√©rifiez les logs du serveur');
  console.log('3. Testez avec l\'endpoint ultra-simple d\'abord');
  console.log('');
  
  console.log('Si vous avez une erreur 401:');
  console.log('1. V√©rifiez que votre token est valide');
  console.log('2. V√©rifiez que vous √™tes connect√© en tant qu\'admin');
  console.log('3. Testez avec l\'endpoint ultra-simple (sans auth)');
  console.log('');
  
  console.log('Si le frontend appelle le mauvais port:');
  console.log('1. V√©rifiez que BASE_URL = "http://localhost:3000"');
  console.log('2. Pas "http://localhost:3004"');
}

// Ex√©cution de tous les tests
async function runAllTests() {
  console.log('üöÄ Test complet des endpoints produits pr√™ts');
  console.log('===========================================\n');

  const results = {
    ultraSimple: await testUltraSimple(),
    simpleWithAuth: await testSimpleWithAuth(),
    list: await testReadyProductsList(),
    detail: await testReadyProductDetail()
  };

  console.log('\nüìä R√©sultats des tests:');
  console.log('========================');
  console.log(`Ultra-simple: ${results.ultraSimple ? '‚úÖ' : '‚ùå'}`);
  console.log(`Simple avec auth: ${results.simpleWithAuth ? '‚úÖ' : '‚ùå'}`);
  console.log(`Liste: ${results.list ? '‚úÖ' : '‚ùå'}`);
  console.log(`D√©tail: ${results.detail ? '‚úÖ' : '‚ùå'}`);

  const allPassed = Object.values(results).every(result => result);
  
  if (allPassed) {
    console.log('\nüéâ Tous les tests sont pass√©s ! Le serveur est pr√™t pour le frontend.');
    console.log('Vous pouvez maintenant impl√©menter les composants frontend.');
  } else {
    console.log('\n‚ö†Ô∏è Certains tests ont √©chou√©. Corrigez les probl√®mes avant d\'impl√©menter le frontend.');
  }

  testWithCurl();
  showFrontendInstructions();
  showTroubleshooting();
}

// Instructions d'utilisation
console.log('üìã Instructions pour utiliser ce script:');
console.log('1. Assurez-vous que le serveur backend est d√©marr√© sur http://localhost:3000');
console.log('2. Remplacez YOUR_ADMIN_TOKEN_HERE par un vrai token admin');
console.log('3. Ex√©cutez: node test-frontend-ready-products.js\n');

// D√©commentez la ligne suivante pour ex√©cuter les tests
// runAllTests();

module.exports = {
  testUltraSimple,
  testSimpleWithAuth,
  testReadyProductsList,
  testReadyProductDetail,
  runAllTests
}; 