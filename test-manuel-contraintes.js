const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testManuelContraintes() {
  console.log('üß™ TEST MANUEL DES CONTRAINTES DE SUPPRESSION\n');

  try {
    // √âTAPE 1: Cr√©er la hi√©rarchie compl√®te
    console.log('üìÅ √âTAPE 1: Cr√©ation de la hi√©rarchie');

    const category = await prisma.category.create({
      data: {
        name: 'Cat√©gorie Manuel Test',
        slug: 'categorie-manuel-test',
        description: 'Cat√©gorie pour test manuel des contraintes',
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Cat√©gorie cr√©√©e: ${category.name} (ID: ${category.id})`);

    const subCategory = await prisma.subCategory.create({
      data: {
        name: 'Sous-cat√©gorie Manuel Test',
        slug: 'sous-categorie-manuel-test',
        description: 'Sous-cat√©gorie pour test manuel',
        categoryId: category.id,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Sous-cat√©gorie cr√©√©e: ${subCategory.name} (ID: ${subCategory.id})`);

    const variation = await prisma.variation.create({
      data: {
        name: 'Variation Manuel Test',
        slug: 'variation-manuel-test',
        description: 'Variation pour test manuel',
        subCategoryId: subCategory.id,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Variation cr√©√©e: ${variation.name} (ID: ${variation.id})`);

    // √âTAPE 2: Cr√©er un produit li√© √† cette hi√©rarchie
    console.log('\nüì¶ √âTAPE 2: Cr√©ation d\'un produit avec toutes les relations');

    const product = await prisma.product.create({
      data: {
        name: 'Produit Manuel Test Contraintes',
        description: 'Produit pour tester manuellement les contraintes de suppression',
        price: 19.99,
        stock: 25,
        status: 'PUBLISHED',
        categoryId: category.id,
        subCategoryId: subCategory.id,
        variationId: variation.id
      }
    });
    console.log(`‚úÖ Produit cr√©√©: ${product.name} (ID: ${product.id})`);
    console.log(`   Relations: Cat√©gorie(${product.categoryId}) ‚Üí Sous-cat√©gorie(${product.subCategoryId}) ‚Üí Variation(${product.variationId})`);

    // V√©rification visuelle des donn√©es
    console.log('\nüîç V√©rification des donn√©es cr√©√©es:');
    const productCheck = await prisma.product.findUnique({
      where: { id: product.id },
      select: {
        id: true,
        name: true,
        categoryId: true,
        subCategoryId: true,
        variationId: true,
        category: { select: { name: true } },
        subCategory: { select: { name: true } },
        variation: { select: { name: true } }
      }
    });
    console.log(`Produit: ${productCheck.name}`);
    console.log(`- Cat√©gorie: ${productCheck.category?.name || 'NULL'} (ID: ${productCheck.categoryId})`);
    console.log(`- Sous-cat√©gorie: ${productCheck.subCategory?.name || 'NULL'} (ID: ${productCheck.subCategoryId})`);
    console.log(`- Variation: ${productCheck.variation?.name || 'NULL'} (ID: ${productCheck.variationId})`);

    // √âTAPE 3: Tests de suppression avec v√©rification manuelle
    console.log('\nüóëÔ∏è  √âTAPE 3: Tests de suppression');

    // Test 1: Tenter de supprimer la variation
    console.log('\n‚û°Ô∏è  TEST 1: Suppression de la VARIATION');
    console.log(`Tentative de suppression de la variation ID: ${variation.id}`);
    console.log(`Cette variation est utilis√©e par le produit ID: ${product.id}`);

    try {
      await prisma.variation.delete({
        where: { id: variation.id }
      });
      console.log('‚ùå ERREUR CRITIQUE: La variation a √©t√© supprim√©e malgr√© les produits li√©s !');

      // V√©rifier l'√©tat du produit apr√®s suppression
      const productAfterVariationDeletion = await prisma.product.findUnique({
        where: { id: product.id },
        select: {
          id: true,
          name: true,
          categoryId: true,
          subCategoryId: true,
          variationId: true,
          variation: { select: { name: true } }
        }
      });
      console.log(`√âtat du produit apr√®s suppression de la variation:`);
      console.log(`- variationId: ${productAfterVariationDeletion.variationId}`);
      console.log(`- variation.name: ${productAfterVariationDeletion.variation?.name || 'NULL/UNDEFINED'}`);

    } catch (error) {
      console.log(`‚úÖ BON: La variation est prot√©g√©e !`);
      console.log(`   Code d'erreur: ${error.code}`);
      console.log(`   Message: ${error.message}`);
    }

    // Test 2: Tenter de supprimer la sous-cat√©gorie
    console.log('\n‚û°Ô∏è  TEST 2: Suppression de la SOUS-CAT√âGORIE');
    console.log(`Tentative de suppression de la sous-cat√©gorie ID: ${subCategory.id}`);
    console.log(`Cette sous-cat√©gorie est utilis√©e par le produit ID: ${product.id}`);

    try {
      await prisma.subCategory.delete({
        where: { id: subCategory.id }
      });
      console.log('‚ùå ERREUR CRITIQUE: La sous-cat√©gorie a √©t√© supprim√©e malgr√© les produits li√©s !');

      // V√©rifier l'√©tat du produit apr√®s suppression
      const productAfterSubCategoryDeletion = await prisma.product.findUnique({
        where: { id: product.id },
        select: {
          id: true,
          name: true,
          categoryId: true,
          subCategoryId: true,
          variationId: true,
          subCategory: { select: { name: true } }
        }
      });
      console.log(`√âtat du produit apr√®s suppression de la sous-cat√©gorie:`);
      console.log(`- subCategoryId: ${productAfterSubCategoryDeletion.subCategoryId}`);
      console.log(`- subCategory.name: ${productAfterSubCategoryDeletion.subCategory?.name || 'NULL/UNDEFINED'}`);

    } catch (error) {
      console.log(`‚úÖ BON: La sous-cat√©gorie est prot√©g√©e !`);
      console.log(`   Code d'erreur: ${error.code}`);
      console.log(`   Message: ${error.message}`);
    }

    // Test 3: Tenter de supprimer la cat√©gorie
    console.log('\n‚û°Ô∏è  TEST 3: Suppression de la CAT√âGORIE');
    console.log(`Tentative de suppression de la cat√©gorie ID: ${category.id}`);
    console.log(`Cette cat√©gorie est utilis√©e par le produit ID: ${product.id}`);

    try {
      await prisma.category.delete({
        where: { id: category.id }
      });
      console.log('‚ùå ERREUR CRITIQUE: La cat√©gorie a √©t√© supprim√©e malgr√© les produits li√©s !');

      // V√©rifier l'√©tat du produit apr√®s suppression
      const productAfterCategoryDeletion = await prisma.product.findUnique({
        where: { id: product.id },
        select: {
          id: true,
          name: true,
          categoryId: true,
          subCategoryId: true,
          variationId: true,
          category: { select: { name: true } }
        }
      });
      console.log(`√âtat du produit apr√®s suppression de la cat√©gorie:`);
      console.log(`- categoryId: ${productAfterCategoryDeletion.categoryId}`);
      console.log(`- category.name: ${productAfterCategoryDeletion.category?.name || 'NULL/UNDEFINED'}`);

    } catch (error) {
      console.log(`‚úÖ BON: La cat√©gorie est prot√©g√©e !`);
      console.log(`   Code d'erreur: ${error.code}`);
      console.log(`   Message: ${error.message}`);
    }

    // √âTAPE 4: V√©rification finale et nettoyage
    console.log('\nüßπ √âTAPE 4: Nettoyage contr√¥l√©');
    console.log('Suppression du produit en premier...');

    await prisma.product.delete({
      where: { id: product.id }
    });
    console.log('‚úÖ Produit supprim√©');

    // Maintenant tenter de supprimer les entit√©s restantes
    console.log('\nTentatives de suppression apr√®s suppression du produit:');

    try {
      await prisma.variation.delete({ where: { id: variation.id } });
      console.log('‚úÖ Variation supprim√©e apr√®s suppression du produit');
    } catch (error) {
      console.log(`‚ùå Impossible de supprimer la variation: ${error.message}`);
    }

    try {
      await prisma.subCategory.delete({ where: { id: subCategory.id } });
      console.log('‚úÖ Sous-cat√©gorie supprim√©e');
    } catch (error) {
      console.log(`‚ùå Impossible de supprimer la sous-cat√©gorie: ${error.message}`);
    }

    try {
      await prisma.category.delete({ where: { id: category.id } });
      console.log('‚úÖ Cat√©gorie supprim√©e');
    } catch (error) {
      console.log(`‚ùå Impossible de supprimer la cat√©gorie: ${error.message}`);
    }

    // R√©sum√© final
    console.log('\nüìä R√âSUM√â DU TEST MANUEL');
    console.log('================================');
    console.log('Ce test d√©montre le comportement r√©el des contraintes de suppression.');
    console.log('Si les suppressions des √©tapes 3 ont r√©ussi: ‚ùå PROBL√àME DE S√âCURIT√â');
    console.log('Si les suppressions des √©tapes 3 ont √©chou√©: ‚úÖ CONTRAINTES FONCTIONNELLES');

  } catch (error) {
    console.error('‚ùå Erreur pendant le test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Lancer le test
testManuelContraintes().catch(console.error);