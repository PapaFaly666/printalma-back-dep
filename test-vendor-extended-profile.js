/**
 * üß™ SCRIPT DE TEST - PROFIL VENDEUR √âTENDU AVEC PHOTO
 * 
 * Ce script teste l'impl√©mentation des nouveaux champs pour les profils vendeurs
 * avec upload de photo de profil dans Cloudinary.
 * 
 * Usage: node test-vendor-extended-profile.js
 */

const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

const BASE_URL = 'http://localhost:3000';

// Configuration de test
const testConfig = {
  adminCredentials: {
    email: 'admin@printalma.com',
    password: 'Admin123!'
  },
  testVendor: {
    firstName: 'Marie',
    lastName: 'Dubois',
    email: 'marie.dubois@test.com',
    vendeur_type: 'DESIGNER',
    phone: '+33 6 78 90 12 34',
    country: 'France',
    address: '45 Avenue des Champs-√âlys√©es, 75008 Paris',
    shop_name: 'Studio Marie Design'
  }
};

let authToken = null;
let testVendorId = null;

/**
 * Authentification admin
 */
async function authenticateAdmin() {
  console.log('üîê Authentification admin...');
  
  try {
    const response = await axios.post(`${BASE_URL}/auth/login`, testConfig.adminCredentials);
    
    if (response.data.access_token) {
      authToken = response.data.access_token;
      console.log('‚úÖ Authentification admin r√©ussie');
      return true;
    }
    
    console.log('‚ùå Erreur authentification:', response.data);
    return false;
  } catch (error) {
    console.error('‚ùå Erreur authentification admin:', error.response?.data || error.message);
    return false;
  }
}

/**
 * Test cr√©ation d'un vendeur avec profil √©tendu (sans photo)
 */
async function testCreateVendorExtended() {
  console.log('\nüìù Test cr√©ation vendeur avec profil √©tendu...');
  
  try {
    const form = new FormData();
    
    // Ajouter tous les champs du vendeur
    Object.entries(testConfig.testVendor).forEach(([key, value]) => {
      form.append(key, value);
    });

    const response = await axios.post(
      `${BASE_URL}/auth/admin/create-vendor-extended`,
      form,
      {
        headers: {
          'Authorization': `Bearer ${authToken}`,
          ...form.getHeaders()
        }
      }
    );

    if (response.data.success) {
      testVendorId = response.data.user.id;
      console.log('‚úÖ Vendeur cr√©√© avec succ√®s');
      console.log(`   ID: ${response.data.user.id}`);
      console.log(`   Nom: ${response.data.user.firstName} ${response.data.user.lastName}`);
      console.log(`   Email: ${response.data.user.email}`);
      console.log(`   Boutique: ${response.data.user.shop_name}`);
      console.log(`   T√©l√©phone: ${response.data.user.phone}`);
      console.log(`   Pays: ${response.data.user.country}`);
      console.log(`   Adresse: ${response.data.user.address}`);
      return true;
    }
    
    console.log('‚ùå Erreur cr√©ation vendeur:', response.data);
    return false;
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation vendeur √©tendu:', error.response?.data || error.message);
    return false;
  }
}

/**
 * Test cr√©ation d'un vendeur avec photo de profil
 */
async function testCreateVendorWithPhoto() {
  console.log('\nüì∏ Test cr√©ation vendeur avec photo de profil...');
  
  try {
    // Cr√©er une image de test simple
    const testImagePath = path.join(__dirname, 'test-profile-photo.png');
    
    if (!fs.existsSync(testImagePath)) {
      console.log('‚ö†Ô∏è Cr√©ation d\'une image de test...');
      // Cr√©er un fichier image de test basique (1x1 pixel PNG)
      const testImageBuffer = Buffer.from(
        'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==',
        'base64'
      );
      fs.writeFileSync(testImagePath, testImageBuffer);
    }

    const form = new FormData();
    
    // Nouveau vendeur avec photo
    const vendorWithPhoto = {
      ...testConfig.testVendor,
      email: 'marie.photo@test.com',
      shop_name: 'Studio Marie Design Photo'
    };
    
    // Ajouter tous les champs
    Object.entries(vendorWithPhoto).forEach(([key, value]) => {
      form.append(key, value);
    });
    
    // Ajouter la photo de profil
    form.append('profilePhoto', fs.createReadStream(testImagePath), {
      filename: 'profile-photo.png',
      contentType: 'image/png'
    });

    const response = await axios.post(
      `${BASE_URL}/auth/admin/create-vendor-extended`,
      form,
      {
        headers: {
          'Authorization': `Bearer ${authToken}`,
          ...form.getHeaders()
        }
      }
    );

    if (response.data.success) {
      console.log('‚úÖ Vendeur avec photo cr√©√© avec succ√®s');
      console.log(`   ID: ${response.data.user.id}`);
      console.log(`   Nom: ${response.data.user.firstName} ${response.data.user.lastName}`);
      console.log(`   Photo: ${response.data.user.profile_photo_url || 'Non upload√©e'}`);
      
      // Nettoyer l'image de test
      if (fs.existsSync(testImagePath)) {
        fs.unlinkSync(testImagePath);
      }
      
      return response.data.user.id;
    }
    
    console.log('‚ùå Erreur cr√©ation vendeur avec photo:', response.data);
    return false;
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation vendeur avec photo:', error.response?.data || error.message);
    return false;
  }
}

/**
 * Test r√©cup√©ration du profil vendeur √©tendu
 */
async function testGetVendorProfile(vendorId) {
  console.log('\nüë§ Test r√©cup√©ration profil vendeur...');
  
  try {
    // D'abord connecter le vendeur pour obtenir son token
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'marie.dubois@test.com',
      password: 'defaultPassword123' // Le mot de passe temporaire g√©n√©r√©
    });
    
    if (!loginResponse.data.access_token) {
      console.log('‚ùå Impossible de connecter le vendeur');
      return false;
    }
    
    const vendorToken = loginResponse.data.access_token;
    
    const response = await axios.get(
      `${BASE_URL}/auth/vendor/profile`,
      {
        headers: {
          'Authorization': `Bearer ${vendorToken}`
        }
      }
    );

    if (response.data) {
      console.log('‚úÖ Profil vendeur r√©cup√©r√© avec succ√®s');
      console.log(`   ID: ${response.data.id}`);
      console.log(`   Nom complet: ${response.data.firstName} ${response.data.lastName}`);
      console.log(`   Email: ${response.data.email}`);
      console.log(`   Type: ${response.data.vendeur_type}`);
      console.log(`   Boutique: ${response.data.shop_name}`);
      console.log(`   T√©l√©phone: ${response.data.phone}`);
      console.log(`   Pays: ${response.data.country}`);
      console.log(`   Adresse: ${response.data.address}`);
      console.log(`   Photo: ${response.data.profile_photo_url || 'Aucune'}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration profil:', error.response?.data || error.message);
    return false;
  }
}

/**
 * Test des statistiques vendeurs par pays
 */
async function testVendorStatsByCountry() {
  console.log('\nüìä Test statistiques vendeurs par pays...');
  
  try {
    const response = await axios.get(
      `${BASE_URL}/auth/admin/vendors/stats-by-country`,
      {
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      }
    );

    if (response.data.success) {
      console.log('‚úÖ Statistiques r√©cup√©r√©es avec succ√®s');
      console.log(`   Total vendeurs: ${response.data.total}`);
      
      if (response.data.stats.length > 0) {
        console.log('   R√©partition par pays:');
        response.data.stats.forEach(stat => {
          console.log(`     - ${stat.country}: ${stat.count} vendeur(s)`);
        });
      } else {
        console.log('   Aucune donn√©e statistique disponible');
      }
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration statistiques:', error.response?.data || error.message);
    return false;
  }
}

/**
 * Validation de l'API Cloudinary
 */
async function validateCloudinaryConfig() {
  console.log('\n‚òÅÔ∏è Validation configuration Cloudinary...');
  
  const requiredEnvVars = [
    'CLOUDINARY_CLOUD_NAME',
    'CLOUDINARY_API_KEY',
    'CLOUDINARY_API_SECRET'
  ];
  
  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.log('‚ùå Variables d\'environnement Cloudinary manquantes:');
    missingVars.forEach(varName => {
      console.log(`   - ${varName}`);
    });
    return false;
  }
  
  console.log('‚úÖ Configuration Cloudinary valide');
  console.log(`   Cloud Name: ${process.env.CLOUDINARY_CLOUD_NAME}`);
  console.log(`   API Key: ${process.env.CLOUDINARY_API_KEY?.substring(0, 8)}...`);
  return true;
}

/**
 * Test principal
 */
async function runExtendedVendorProfileTests() {
  console.log('üß™ === TEST PROFIL VENDEUR √âTENDU AVEC CLOUDINARY ===\n');
  
  // 1. Validation Cloudinary
  if (!await validateCloudinaryConfig()) {
    console.log('\n‚ùå Tests interrompus - Configuration Cloudinary invalide');
    return;
  }
  
  // 2. Authentification admin
  if (!await authenticateAdmin()) {
    console.log('\n‚ùå Tests interrompus - √âchec authentification admin');
    return;
  }
  
  // 3. Test cr√©ation vendeur √©tendu sans photo
  if (!await testCreateVendorExtended()) {
    console.log('\n‚ùå Tests interrompus - √âchec cr√©ation vendeur');
    return;
  }
  
  // 4. Test cr√©ation vendeur avec photo
  const vendorWithPhotoId = await testCreateVendorWithPhoto();
  
  // 5. Test r√©cup√©ration profil
  if (testVendorId) {
    await testGetVendorProfile(testVendorId);
  }
  
  // 6. Test statistiques
  await testVendorStatsByCountry();
  
  console.log('\nüéâ === R√âSUM√â DES TESTS ===');
  console.log('‚úÖ Profil vendeur √©tendu impl√©ment√©');
  console.log('‚úÖ Upload photo de profil Cloudinary fonctionnel');
  console.log('‚úÖ Endpoints API disponibles');
  console.log('‚úÖ Validation des donn√©es active');
  
  console.log('\nüîó Endpoints disponibles:');
  console.log('   POST /auth/admin/create-vendor-extended (avec photo)');
  console.log('   GET  /auth/vendor/profile');
  console.log('   PUT  /auth/vendor/profile (mise √† jour avec photo)');
  console.log('   GET  /auth/admin/vendors/stats-by-country');
  
  console.log('\nüìù Champs ajout√©s:');
  console.log('   - phone (optionnel)');
  console.log('   - country (optionnel)');
  console.log('   - address (optionnel)');
  console.log('   - shop_name (obligatoire)');
  console.log('   - profile_photo_url (optionnel, Cloudinary)');
}

// Lancement des tests
if (require.main === module) {
  runExtendedVendorProfileTests().catch(error => {
    console.error('‚ùå Erreur g√©n√©rale:', error);
    process.exit(1);
  });
}

module.exports = {
  runExtendedVendorProfileTests,
  testCreateVendorExtended,
  testCreateVendorWithPhoto,
  validateCloudinaryConfig
}; 