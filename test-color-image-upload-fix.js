const fs = require('fs');
const FormData = require('form-data');

// Configuration
const BASE_URL = 'http://localhost:3004'; // Port du frontend
const PRODUCT_ID = 4; // ID du produit test√©
const COLOR_ID = 1;   // ID de la couleur test√©e

// Test d'upload d'image de couleur
async function testColorImageUpload() {
  try {
    console.log('üß™ Test d\'upload direct d\'image de couleur...');
    console.log(`üì° URL: ${BASE_URL}/products/upload-color-image/${PRODUCT_ID}/${COLOR_ID}`);
    
    // Cr√©er FormData
    const formData = new FormData();
    
    // Cr√©er un fichier de test
    const testImagePath = './test-color-image.jpg';
    fs.writeFileSync(testImagePath, 'fake image data for testing');
    
    formData.append('image', fs.createReadStream(testImagePath));
    
    // Faire la requ√™te
    const response = await fetch(`${BASE_URL}/products/upload-color-image/${PRODUCT_ID}/${COLOR_ID}`, {
      method: 'POST',
      body: formData
    });
    
    console.log('üì° Statut de la r√©ponse:', response.status);
    console.log('üì° Headers:', Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Upload r√©ussi!');
      console.log('üìã R√©sultat:', JSON.stringify(result, null, 2));
      
      if (result.image && result.image.url) {
        console.log('üñºÔ∏è  Image disponible √†:', result.image.url);
        console.log('üÜî ID de l\'image:', result.image.id);
      }
    } else {
      const error = await response.json();
      console.log('‚ùå Erreur:', error);
    }
    
    // Nettoyer le fichier de test
    if (fs.existsSync(testImagePath)) {
      fs.unlinkSync(testImagePath);
    }
    
  } catch (error) {
    console.error('üí• Erreur lors du test:', error.message);
  }
}

// Test avec diff√©rents produits et couleurs
async function testMultipleProducts() {
  console.log('\nüîç Test avec diff√©rents produits et couleurs...');
  
  const testCases = [
    { productId: 4, colorId: 1, description: 'Produit 4, Couleur 1' },
    { productId: 1, colorId: 1, description: 'Produit 1, Couleur 1' },
    { productId: 2, colorId: 1, description: 'Produit 2, Couleur 1' }
  ];
  
  for (const testCase of testCases) {
    console.log(`\nüìù Test: ${testCase.description}`);
    console.log(`   Product ID: ${testCase.productId}, Color ID: ${testCase.colorId}`);
    
    try {
      const formData = new FormData();
      formData.append('image', Buffer.from('fake image data'), {
        filename: 'test.jpg',
        contentType: 'image/jpeg'
      });
      
      const response = await fetch(`${BASE_URL}/products/upload-color-image/${testCase.productId}/${testCase.colorId}`, {
        method: 'POST',
        body: formData
      });
      
      console.log(`   Statut: ${response.status}`);
      
      if (response.ok) {
        const result = await response.json();
        console.log('   ‚úÖ Succ√®s');
        console.log(`   üÜî Image ID: ${result.image?.id}`);
        console.log(`   üñºÔ∏è  URL: ${result.image?.url}`);
      } else {
        const error = await response.json();
        console.log(`   ‚ùå Erreur: ${error.message}`);
      }
      
    } catch (error) {
      console.log(`   üí• Exception: ${error.message}`);
    }
  }
}

// Test de v√©rification des donn√©es
async function testDataVerification() {
  console.log('\nüîç Test de v√©rification des donn√©es...');
  
  try {
    // V√©rifier que le produit existe
    const productResponse = await fetch(`${BASE_URL}/products/${PRODUCT_ID}`);
    console.log(`üìã Produit ${PRODUCT_ID} existe:`, productResponse.ok);
    
    if (productResponse.ok) {
      const product = await productResponse.json();
      console.log('üìã Produit:', {
        id: product.id,
        name: product.name,
        colorVariations: product.colorVariations?.length || 0
      });
      
      // V√©rifier les variations de couleur
      if (product.colorVariations) {
        const colorVar = product.colorVariations.find(cv => cv.id === COLOR_ID);
        if (colorVar) {
          console.log('‚úÖ Variation de couleur trouv√©e:', {
            id: colorVar.id,
            name: colorVar.name,
            images: colorVar.images?.length || 0
          });
        } else {
          console.log('‚ùå Variation de couleur non trouv√©e');
        }
      }
    }
    
  } catch (error) {
    console.log(`üí• Erreur lors de la v√©rification: ${error.message}`);
  }
}

// Fonction principale
async function runTests() {
  console.log('üöÄ D√©marrage des tests d\'upload d\'images de couleur...\n');
  
  await testDataVerification();
  await testColorImageUpload();
  await testMultipleProducts();
  
  console.log('\n‚ú® Tests termin√©s!');
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testColorImageUpload,
  testMultipleProducts,
  testDataVerification
}; 