const axios = require('axios');

const BASE_URL = 'http://localhost:3004';

// Configuration de test
const testConfig = {
  vendor: {
    email: 'pf.d@zig.univ.sn',
    password: 'test123456'
  },
  wrongProductId: 2, // baseProductId qui ne devrait pas √™tre utilis√©
  wrongDesignId: 1,  // Design qui pourrait ne pas exister
};

// Configuration axios pour g√©rer les cookies
const axiosInstance = axios.create({
  baseURL: BASE_URL,
  withCredentials: true, // Important pour les cookies
  timeout: 10000
});

// Fonction pour se connecter
async function login() {
  try {
    console.log('üîê Connexion...');
    const response = await axiosInstance.post('/auth/login', testConfig.vendor);
    
    console.log('üìÑ R√©ponse login:', Object.keys(response.data));
    
    if (response.data.user) {
      console.log('‚úÖ Connexion r√©ussie');
      console.log('üë§ Utilisateur:', response.data.user.email);
      
      // Test du profil pour v√©rifier l'authentification par cookie
      try {
        const profileResponse = await axiosInstance.get('/auth/profile');
        console.log('üë§ Profil v√©rifi√©:', profileResponse.data.email);
        return true;
      } catch (profileError) {
        console.log('‚ùå Erreur v√©rification profil:', profileError.response?.data || profileError.message);
        return false;
      }
    } else {
      console.log('‚ùå Donn√©es utilisateur manquantes dans la r√©ponse');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.response?.data || error.message);
    return false;
  }
}

// Fonction pour tester les erreurs 403 avec suggestions
async function testForbiddenWithSuggestions() {
  console.log('\nüîç Test des erreurs 403 avec suggestions...');
  
  try {
    const response = await axiosInstance.put(
      `/api/vendor-products/${testConfig.wrongProductId}/designs/${testConfig.wrongDesignId}/position/direct`,
      {
        x: 0,
        y: 0,
        scale: 0.5,
        rotation: 0,
        constraints: { adaptive: true }
      }
    );
    
    console.log('‚ö†Ô∏è Erreur: La requ√™te aurait d√ª √©chouer avec 403');
    console.log('üìÑ R√©ponse inattendue:', response.data);
    
  } catch (error) {
    console.log('üìÑ Status de l\'erreur:', error.response?.status);
    console.log('üìÑ Donn√©es de l\'erreur:', error.response?.data);
    
    if (error.response?.status === 403) {
      console.log('‚úÖ Erreur 403 d√©tect√©e comme attendu');
      console.log('üîß Donn√©es de debug:', JSON.stringify(error.response.data.debugInfo, null, 2));
      
      if (error.response.data.debugInfo?.suggestion) {
        console.log('üí° Suggestion trouv√©e:', error.response.data.debugInfo.suggestion);
        return error.response.data.debugInfo.suggestion;
      }
    } else if (error.response?.status === 401) {
      console.log('‚ùå Erreur 401 - Probl√®me d\'authentification');
    } else {
      console.error('‚ùå Erreur inattendue:', error.response?.data || error.message);
    }
  }
  
  return null;
}

// Fonction pour tester l'endpoint de debug
async function testDebugEndpoint() {
  console.log('\nüîç Test de l\'endpoint de debug...');
  
  try {
    const response = await axiosInstance.get(
      `/api/vendor-products/${testConfig.wrongProductId}/designs/${testConfig.wrongDesignId}/position/debug`
    );
    
    console.log('‚úÖ Debug endpoint r√©ussi');
    console.log('üîß Informations de debug:', JSON.stringify(response.data.debug, null, 2));
    
    if (response.data.debug.corrections?.length > 0) {
      console.log('üí° Corrections sugg√©r√©es:');
      response.data.debug.corrections.forEach((correction, index) => {
        console.log(`  ${index + 1}. ${correction.message}`);
      });
      return response.data.debug.corrections;
    }
    
  } catch (error) {
    console.log('üìÑ Status de l\'erreur:', error.response?.status);
    console.log('üìÑ Donn√©es de l\'erreur:', error.response?.data);
    
    if (error.response?.status === 401) {
      console.log('‚ùå Erreur 401 - Probl√®me d\'authentification pour debug');
    } else {
      console.error('‚ùå Erreur debug endpoint:', error.response?.data || error.message);
    }
  }
  
  return null;
}

// Fonction pour tester avec les IDs corrects
async function testWithCorrectIds(corrections) {
  if (!corrections || corrections.length === 0) {
    console.log('‚ö†Ô∏è Aucune correction disponible pour tester');
    return;
  }
  
  console.log('\nüîÑ Test avec les IDs corrects...');
  
  // Extraire les IDs corrects
  let correctProductId = null;
  let correctDesignId = null;
  
  corrections.forEach(correction => {
    if (correction.correctProductId) {
      correctProductId = correction.correctProductId;
    }
    if (correction.correctDesignId) {
      correctDesignId = correction.correctDesignId;
    }
  });
  
  if (!correctProductId || !correctDesignId) {
    console.log('‚ö†Ô∏è IDs corrects non trouv√©s dans les corrections');
    return;
  }
  
  try {
    console.log(`üîÑ Test avec produit ${correctProductId} et design ${correctDesignId}`);
    
    const response = await axiosInstance.put(
      `/api/vendor-products/${correctProductId}/designs/${correctDesignId}/position/direct`,
      {
        x: 0,
        y: 0,
        scale: 0.5,
        rotation: 0,
        constraints: { adaptive: true }
      }
    );
    
    console.log('‚úÖ Sauvegarde r√©ussie avec les IDs corrects');
    console.log('üìç Position sauvegard√©e:', response.data.data);
    
  } catch (error) {
    console.error('‚ùå Erreur avec les IDs corrects:', error.response?.data || error.message);
  }
}

// Fonction pour tester la r√©cup√©ration de position
async function testGetPosition(productId, designId) {
  console.log(`\nüì• Test de r√©cup√©ration de position pour produit ${productId} et design ${designId}...`);
  
  try {
    const response = await axiosInstance.get(
      `/api/vendor-products/${productId}/designs/${designId}/position/direct`
    );
    
    console.log('‚úÖ R√©cup√©ration r√©ussie');
    console.log('üìç Position r√©cup√©r√©e:', response.data.data);
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration position:', error.response?.data || error.message);
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ Test des corrections contre les boucles infinies');
  console.log('=' .repeat(60));
  
  // √âtape 1: Connexion
  if (!await login()) {
    console.log('‚ùå Impossible de se connecter, arr√™t du test');
    return;
  }
  
  // √âtape 2: Test des erreurs 403 avec suggestions
  const suggestion = await testForbiddenWithSuggestions();
  
  // √âtape 3: Test de l'endpoint de debug
  const corrections = await testDebugEndpoint();
  
  // √âtape 4: Test avec les IDs corrects
  await testWithCorrectIds(corrections);
  
  // √âtape 5: Test de r√©cup√©ration avec les IDs corrects
  if (corrections && corrections.length > 0) {
    const correctProductId = corrections.find(c => c.correctProductId)?.correctProductId;
    const correctDesignId = corrections.find(c => c.correctDesignId)?.correctDesignId;
    
    if (correctProductId && correctDesignId) {
      await testGetPosition(correctProductId, correctDesignId);
    }
  }
  
  console.log('\n‚úÖ Test termin√©');
}

// Ex√©cuter le test
main().catch(console.error); 
 
 
 
 