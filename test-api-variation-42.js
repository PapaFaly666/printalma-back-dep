// Test de l'API pour simuler la suppression de la variation 42
const { PrismaClient } = require('@prisma/client');
const { ConflictException } = require('@nestjs/common');

const prisma = new PrismaClient();

async function testApiSuppressionVariation42() {
  console.log('üîß Test API: Simulation de la suppression de la variation 42\n');

  try {
    // √âtape 1: R√©cup√©rer la variation 42
    const variation = await prisma.variation.findUnique({
      where: { id: 42 },
      include: {
        subCategory: true
      }
    });

    if (!variation) {
      console.log('‚ùå Variation 42 non trouv√©e');
      return;
    }

    console.log(`üìã Variation trouv√©e: ${variation.name}`);
    console.log(`   Sous-cat√©gorie: ${variation.subCategory.name}\n`);

    // √âtape 2: Simuler la logique du service corrig√©
    const productsCount = await prisma.product.count({
      where: {
        variationId: 42,
        isDelete: false
      }
    });

    console.log(`üîç Produits utilisant directement cette variation: ${productsCount}`);

    // √âtape 3: Simuler la r√©ponse du service
    if (productsCount > 0) {
      // Simulation de l'erreur que le backend retournerait
      const errorResponse = {
        success: false,
        error: 'VARIATION_IN_USE',
        message: `La variation est utilis√©e par ${productsCount} produit(s). Elle ne peut pas √™tre supprim√©e.`,
        details: {
          variationId: 42,
          subCategoryId: variation.subCategoryId,
          productsCount,
          message: `${productsCount} produit(s) utilisent directement cette variation`
        }
      };

      console.log('\nüõ°Ô∏è  R√âPONSE API (erreur 409):');
      console.log(JSON.stringify(errorResponse, null, 2));

    } else {
      // Simulation de la r√©ussite
      const successResponse = {
        success: true,
        message: 'Variation d√©sactiv√©e avec succ√®s',
        data: {
          id: 42,
          name: variation.name,
          isActive: false,
          updatedAt: new Date()
        }
      };

      console.log('\n‚úÖ R√âPONSE API (succ√®s 200):');
      console.log(JSON.stringify(successResponse, null, 2));
    }

    console.log('\nüéØ Test termin√© avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testApiSuppressionVariation42();