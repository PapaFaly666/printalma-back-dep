const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');

const BASE_URL = 'http://localhost:3004';

// Configuration pour les tests
const config = {
  headers: {
    'Authorization': 'Bearer YOUR_ADMIN_TOKEN_HERE', // Remplacez par un vrai token admin
    'Content-Type': 'application/json'
  }
};

async function testIsReadyProductFix() {
  console.log('üß™ Test de la correction isReadyProduct');
  console.log('=====================================\n');

  try {
    // 1. Test de cr√©ation d'un produit pr√™t avec isReadyProduct = true
    console.log('1. Test cr√©ation produit pr√™t avec isReadyProduct = true...');
    
    const readyProductData = {
      name: "Test Produit Pr√™t",
      description: "Produit pr√™t √† l'emploi sans d√©limitations",
      price: 2500,
      stock: 100,
      status: "draft",
      categories: ["T-shirts"],
      sizes: ["S", "M", "L"],
      isReadyProduct: true, // ‚úÖ CRUCIAL
      colorVariations: [
        {
          name: "Rouge",
          colorCode: "#FF0000",
          images: [
            {
              fileId: "img_123",
              view: "Front"
            }
          ]
        }
      ]
    };

    // Cr√©er un fichier de test temporaire
    const testImagePath = './test-image.jpg';
    if (!fs.existsSync(testImagePath)) {
      // Cr√©er un fichier image de test simple
      const testImageBuffer = Buffer.from('fake image data');
      fs.writeFileSync(testImagePath, testImageBuffer);
    }

    const formData = new FormData();
    formData.append('productData', JSON.stringify(readyProductData));
    formData.append('file_img_123', fs.createReadStream(testImagePath));

    const createResponse = await axios.post(`${BASE_URL}/products/ready`, formData, {
      headers: {
        ...formData.getHeaders(),
        'Authorization': 'Bearer YOUR_ADMIN_TOKEN_HERE' // Remplacez par un vrai token
      }
    });

    console.log('‚úÖ Produit pr√™t cr√©√©:', createResponse.data);
    console.log('‚úÖ isReadyProduct dans la r√©ponse:', createResponse.data.isReadyProduct);

    // 2. V√©rifier que le produit a bien isReadyProduct = true
    if (createResponse.data.isReadyProduct === true) {
      console.log('‚úÖ SUCC√àS: isReadyProduct = true dans la r√©ponse');
    } else {
      console.log('‚ùå √âCHEC: isReadyProduct ‚â† true dans la r√©ponse');
    }

    // 3. R√©cup√©rer le produit pour v√©rifier en base
    const productId = createResponse.data.id;
    const getResponse = await axios.get(`${BASE_URL}/products/ready/${productId}`, config);
    
    console.log('‚úÖ Produit r√©cup√©r√©:', getResponse.data);
    console.log('‚úÖ isReadyProduct en base:', getResponse.data.isReadyProduct);

    if (getResponse.data.isReadyProduct === true) {
      console.log('‚úÖ SUCC√àS: isReadyProduct = true en base de donn√©es');
    } else {
      console.log('‚ùå √âCHEC: isReadyProduct ‚â† true en base de donn√©es');
    }

    console.log('\nüéâ Test de correction isReadyProduct termin√© !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Le serveur n\'est pas d√©marr√©.');
      console.log('   - Lancez: npm run start:dev');
    } else if (error.response?.status === 401) {
      console.log('\nüí° Probl√®me d\'authentification.');
      console.log('   - Remplacez YOUR_ADMIN_TOKEN_HERE par un vrai token admin');
    } else if (error.response?.status === 400) {
      console.log('\nüí° Erreur 400 - V√©rifiez les logs du serveur.');
      console.log('   - Regardez les logs de d√©bogage dans la console du serveur');
    }
  }
}

async function testWithCurl() {
  console.log('\nüîÑ Commandes curl pour tester manuellement');
  console.log('===========================================\n');

  console.log('1. Cr√©er un produit pr√™t avec isReadyProduct = true:');
  console.log(`   curl -X POST ${BASE_URL}/products/ready \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN" \\');
  console.log('     -F "productData={\\"name\\":\\"Test Produit\\",\\"description\\":\\"Test\\",\\"price\\":2500,\\"stock\\":100,\\"status\\":\\"draft\\",\\"categories\\":[\\"T-shirts\\"],\\"sizes\\":[\\"S\\",\\"M\\",\\"L\\"],\\"isReadyProduct\\":true,\\"colorVariations\\":[{\\"name\\":\\"Rouge\\",\\"colorCode\\":\\"#FF0000\\",\\"images\\":[{\\"fileId\\":\\"img_123\\",\\"view\\":\\"Front\\"}]}]}" \\');
  console.log('     -F "file_img_123=@test-image.jpg"');
  console.log('');
  
  console.log('2. R√©cup√©rer un produit pr√™t:');
  console.log(`   curl -X GET ${BASE_URL}/products/ready/1 \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN"');
  console.log('');
  
  console.log('3. Lister tous les produits pr√™ts:');
  console.log(`   curl -X GET ${BASE_URL}/products/ready \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN"');
}

function showExpectedResults() {
  console.log('\nüìã R√©sultats attendus');
  console.log('=====================\n');

  console.log('‚úÖ Apr√®s correction, quand on cr√©e un produit pr√™t:');
  console.log('   - isReadyProduct doit √™tre true dans la requ√™te');
  console.log('   - isReadyProduct doit √™tre true dans la r√©ponse');
  console.log('   - isReadyProduct doit √™tre true en base de donn√©es');
  console.log('');
  
  console.log('‚úÖ Logs de d√©bogage attendus dans la console du serveur:');
  console.log('   üîç createReadyProduct - isReadyProduct from DTO: true');
  console.log('   ‚úÖ Produit pr√™t d√©tect√© - isReadyProduct = true');
  console.log('   üíæ Produit cr√©√© avec isReadyProduct: true');
  console.log('');
  
  console.log('‚úÖ R√©ponse API attendue:');
  console.log('   {');
  console.log('     "id": 123,');
  console.log('     "name": "Test Produit Pr√™t",');
  console.log('     "description": "Produit pr√™t √† l\'emploi",');
  console.log('     "price": 2500,');
  console.log('     "stock": 100,');
  console.log('     "status": "DRAFT",');
  console.log('     "isReadyProduct": true, // ‚Üê DOIT √äTRE TRUE');
  console.log('     "categories": [...],');
  console.log('     "sizes": [...],');
  console.log('     "colorVariations": [...]');
  console.log('   }');
}

function showTroubleshooting() {
  console.log('\nüõ†Ô∏è D√©pannage');
  console.log('=============\n');

  console.log('Si isReadyProduct reste false:');
  console.log('1. V√©rifiez les logs de d√©bogage dans la console du serveur');
  console.log('2. V√©rifiez que le frontend envoie isReadyProduct: true');
  console.log('3. V√©rifiez que le DTO contient la propri√©t√© isReadyProduct');
  console.log('4. V√©rifiez que la base de donn√©es a la colonne isReadyProduct');
  console.log('');
  
  console.log('Si vous avez des erreurs TypeScript:');
  console.log('1. R√©g√©n√©rer Prisma: npx prisma generate');
  console.log('2. Red√©marrer le serveur: npm run start:dev');
  console.log('');
  
  console.log('Si le serveur ne d√©marre pas:');
  console.log('1. V√©rifiez les erreurs de compilation');
  console.log('2. Corrigez les erreurs TypeScript une par une');
}

// Ex√©cution des tests
async function runAllTests() {
  await testIsReadyProductFix();
  testWithCurl();
  showExpectedResults();
  showTroubleshooting();
}

// Instructions d'utilisation
console.log('üìã Instructions pour utiliser ce script:');
console.log('1. Assurez-vous que le serveur backend est d√©marr√© sur http://localhost:3004');
console.log('2. Remplacez YOUR_ADMIN_TOKEN_HERE par un vrai token admin');
console.log('3. Ex√©cutez: node test-isReadyProduct-fix.js\n');

// D√©commentez la ligne suivante pour ex√©cuter les tests
// runAllTests();

module.exports = {
  testIsReadyProductFix,
  testWithCurl,
  runAllTests
}; 