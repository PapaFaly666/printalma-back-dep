/**
 * üö® TEST SCRIPT - CORRECTION ENDPOINTS POSITION
 * 
 * Teste les endpoints corrig√©s pour √©liminer les boucles infinies
 * et s'assurer que les positions sont correctement sauvegard√©es/r√©cup√©r√©es
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3004';
const TEST_VENDOR_PRODUCTS = [43, 44]; // IDs des produits cr√©√©s
const TEST_DESIGN_ID = 1; // ID du design utilis√©

// Configuration Axios avec cookies
const apiClient = axios.create({
  baseURL: BASE_URL,
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json'
  }
});

/**
 * üîê Connexion vendeur test
 */
async function loginVendor() {
  try {
    const response = await apiClient.post('/auth/login', {
      email: 'test.vendeur@example.com',
      password: 'test123456'
    });
    
    if (response.data.success) {
      console.log('‚úÖ Connexion vendeur r√©ussie');
      return response.data.user;
    } else {
      throw new Error('√âchec connexion');
    }
  } catch (error) {
    console.error('‚ùå Erreur connexion:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * üß™ Test sauvegarde position
 */
async function testSavePosition(vendorProductId, designId) {
  const testPosition = {
    x: Math.random() * 100,
    y: Math.random() * 100,
    scale: 1 + Math.random() * 0.5,
    rotation: Math.random() * 360,
    constraints: { adaptive: true }
  };
  
  try {
    console.log(`\nüîÑ Test sauvegarde position - Produit ${vendorProductId}, Design ${designId}`);
    console.log(`üìç Position:`, testPosition);
    
    const response = await apiClient.put(
      `/api/vendor-products/${vendorProductId}/designs/${designId}/position/direct`,
      testPosition
    );
    
    if (response.data.success) {
      console.log('‚úÖ Position sauvegard√©e:', response.data.data);
      return testPosition;
    } else {
      console.error('‚ùå √âchec sauvegarde:', response.data);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Erreur sauvegarde:', error.response?.data || error.message);
    return null;
  }
}

/**
 * üß™ Test r√©cup√©ration position
 */
async function testGetPosition(vendorProductId, designId) {
  try {
    console.log(`\nüîç Test r√©cup√©ration position - Produit ${vendorProductId}, Design ${designId}`);
    
    const response = await apiClient.get(
      `/api/vendor-products/${vendorProductId}/designs/${designId}/position/direct`
    );
    
    if (response.data.success) {
      if (response.data.data) {
        console.log('‚úÖ Position r√©cup√©r√©e:', response.data.data);
        return response.data.data;
      } else {
        console.log('‚ö†Ô∏è Aucune position sauvegard√©e');
        return null;
      }
    } else {
      console.error('‚ùå √âchec r√©cup√©ration:', response.data);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration:', error.response?.data || error.message);
    return null;
  }
}

/**
 * üß™ Test debug permissions
 */
async function testDebugPermissions(vendorProductId, designId) {
  try {
    console.log(`\nüîç Test debug permissions - Produit ${vendorProductId}, Design ${designId}`);
    
    const response = await apiClient.get(
      `/api/vendor-products/${vendorProductId}/designs/${designId}/position/debug`
    );
    
    if (response.data.success) {
      console.log('‚úÖ Debug info:', {
        productBelongsToVendor: response.data.debug.productBelongsToVendor,
        designBelongsToVendor: response.data.debug.designBelongsToVendor,
        recommendations: response.data.debug.recommendations
      });
      return response.data.debug;
    } else {
      console.error('‚ùå √âchec debug:', response.data);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Erreur debug:', error.response?.data || error.message);
    return null;
  }
}

/**
 * üß™ Test complet d'un produit
 */
async function testCompleteFlow(vendorProductId, designId) {
  console.log(`\nüéØ === TEST COMPLET PRODUIT ${vendorProductId} ===`);
  
  // 1. Debug permissions
  const debugInfo = await testDebugPermissions(vendorProductId, designId);
  if (!debugInfo?.productBelongsToVendor) {
    console.log(`‚ö†Ô∏è Produit ${vendorProductId} n'appartient pas au vendeur connect√©`);
    return false;
  }
  
  // 2. R√©cup√©ration position initiale
  const initialPosition = await testGetPosition(vendorProductId, designId);
  
  // 3. Sauvegarde nouvelle position
  const savedPosition = await testSavePosition(vendorProductId, designId);
  if (!savedPosition) {
    console.log(`‚ùå √âchec sauvegarde pour produit ${vendorProductId}`);
    return false;
  }
  
  // 4. V√©rification r√©cup√©ration
  const retrievedPosition = await testGetPosition(vendorProductId, designId);
  if (!retrievedPosition) {
    console.log(`‚ùå Position non r√©cup√©r√©e pour produit ${vendorProductId}`);
    return false;
  }
  
  // 5. Comparaison
  const positionsMatch = (
    Math.abs(retrievedPosition.x - savedPosition.x) < 0.01 &&
    Math.abs(retrievedPosition.y - savedPosition.y) < 0.01 &&
    Math.abs(retrievedPosition.scale - savedPosition.scale) < 0.01
  );
  
  if (positionsMatch) {
    console.log(`‚úÖ Test complet r√©ussi pour produit ${vendorProductId}`);
    return true;
  } else {
    console.log(`‚ùå Positions ne correspondent pas pour produit ${vendorProductId}`);
    console.log(`   Sauvegard√©e:`, savedPosition);
    console.log(`   R√©cup√©r√©e:`, retrievedPosition);
    return false;
  }
}

/**
 * üöÄ Ex√©cution des tests
 */
async function runTests() {
  console.log('üöÄ === TESTS CORRECTION ENDPOINTS POSITION ===\n');
  
  try {
    // Connexion
    const user = await loginVendor();
    console.log(`üë§ Vendeur connect√©: ${user.email} (ID: ${user.id})`);
    
    // Tests sur tous les produits
    let successCount = 0;
    let totalCount = 0;
    
    for (const vendorProductId of TEST_VENDOR_PRODUCTS) {
      totalCount++;
      const success = await testCompleteFlow(vendorProductId, TEST_DESIGN_ID);
      if (success) successCount++;
    }
    
    // R√©sultats
    console.log(`\nüéØ === R√âSULTATS ===`);
    console.log(`‚úÖ Tests r√©ussis: ${successCount}/${totalCount}`);
    console.log(`‚ùå Tests √©chou√©s: ${totalCount - successCount}/${totalCount}`);
    
    if (successCount === totalCount) {
      console.log(`\nüéâ TOUS LES TESTS SONT PASS√âS !`);
      console.log(`‚úÖ Les boucles infinies sont √©limin√©es`);
      console.log(`‚úÖ Les positions sont correctement sauvegard√©es/r√©cup√©r√©es`);
      console.log(`‚úÖ Les permissions vendeur sont valid√©es`);
    } else {
      console.log(`\n‚ö†Ô∏è Certains tests ont √©chou√© - v√©rifiez les logs ci-dessus`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur globale:', error.message);
  }
}

// Ex√©cution
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { runTests, testCompleteFlow, testSavePosition, testGetPosition }; 
 
 
 
 