const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

const BASE_URL = 'http://localhost:3004';
let authToken = '';
let testDesignId = null;

// Configuration de test
const testConfig = {
  email: 'test@vendor.com',
  password: 'testpassword',
  serverPort: 3004
};

// Fonction utilitaire pour cr√©er un fichier de test temporaire
function createTestImageFile() {
  const testImagePath = path.join(__dirname, 'test-image.txt');
  // Cr√©er un faux fichier image pour le test
  const fakeImageContent = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==';
  fs.writeFileSync(testImagePath, Buffer.from(fakeImageContent, 'base64'));
  return testImagePath;
}

// Fonction pour attendre que le serveur soit d√©marr√©
async function waitForServer(url, maxAttempts = 30) {
  for (let i = 0; i < maxAttempts; i++) {
    try {
      await axios.get(`${url}/api/products`); // Endpoint simple pour v√©rifier
      return true;
    } catch (error) {
      console.log(`‚è≥ Tentative ${i + 1}/${maxAttempts} - Serveur non pr√™t...`);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  return false;
}

// 1. Test de connexion et r√©cup√©ration du token
async function testLogin() {
  console.log('üîê Test 1: Authentification...');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: testConfig.email,
      password: testConfig.password
    });
    
    if (response.data.access_token) {
      authToken = response.data.access_token;
      console.log('‚úÖ Authentification r√©ussie');
      console.log(`   Token re√ßu: ${authToken.substring(0, 20)}...`);
      return true;
    } else {
      console.log('‚ùå Pas de token re√ßu');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur d\'authentification:', error.response?.data?.message || error.message);
    
    // Essayer avec des identifiants par d√©faut
    try {
      console.log('üîÑ Essai avec identifiants par d√©faut...');
      const defaultResponse = await axios.post(`${BASE_URL}/api/auth/login`, {
        email: 'vendeur@example.com',
        password: 'password123'
      });
      
      if (defaultResponse.data.access_token) {
        authToken = defaultResponse.data.access_token;
        console.log('‚úÖ Authentification r√©ussie avec identifiants par d√©faut');
        return true;
      }
    } catch (defaultError) {
      console.log('‚ùå √âchec avec identifiants par d√©faut aussi');
    }
    
    return false;
  }
}

// 2. Test de cr√©ation de design avec fichier
async function testCreateDesign() {
  console.log('\nüé® Test 2: Cr√©ation de design...');
  
  if (!authToken) {
    console.log('‚ùå Pas de token d\'authentification');
    return false;
  }
  
  try {
    // Cr√©er un fichier de test temporaire
    const testImagePath = createTestImageFile();
    
    const formData = new FormData();
    formData.append('file', fs.createReadStream(testImagePath));
    formData.append('name', 'Test API Logo');
    formData.append('description', 'Logo cr√©√© via test API');
    formData.append('price', '3500');
    formData.append('category', 'logo');
    formData.append('tags', 'test,api,logo');
    
    const response = await axios.post(`${BASE_URL}/api/designs`, formData, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        ...formData.getHeaders()
      }
    });
    
    if (response.data.success && response.data.data.id) {
      testDesignId = response.data.data.id;
      console.log('‚úÖ Design cr√©√© avec succ√®s');
      console.log(`   ID: ${testDesignId}`);
      console.log(`   Nom: ${response.data.data.name}`);
      console.log(`   Prix: ${response.data.data.price} FCFA`);
      
      // Nettoyer le fichier temporaire
      fs.unlinkSync(testImagePath);
      return true;
    } else {
      console.log('‚ùå Cr√©ation √©chou√©e:', response.data);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la cr√©ation:', error.response?.data || error.message);
    return false;
  }
}

// 3. Test de r√©cup√©ration des designs
async function testGetDesigns() {
  console.log('\nüìã Test 3: R√©cup√©ration des designs...');
  
  if (!authToken) {
    console.log('‚ùå Pas de token d\'authentification');
    return false;
  }
  
  try {
    const response = await axios.get(`${BASE_URL}/api/designs`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      },
      params: {
        page: 1,
        limit: 10
      }
    });
    
    if (response.data.success && response.data.data.designs) {
      const designs = response.data.data.designs;
      console.log(`‚úÖ ${designs.length} design(s) r√©cup√©r√©(s)`);
      
      designs.forEach((design, index) => {
        console.log(`   ${index + 1}. ${design.name} - ${design.price} FCFA`);
      });
      
      // Afficher les statistiques
      const stats = response.data.data.stats;
      console.log(`üìä Statistiques:`);
      console.log(`   Total: ${stats.total}`);
      console.log(`   Publi√©s: ${stats.published}`);
      console.log(`   Brouillons: ${stats.draft}`);
      
      return true;
    } else {
      console.log('‚ùå R√©cup√©ration √©chou√©e:', response.data);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration:', error.response?.data || error.message);
    return false;
  }
}

// 4. Test de modification de design
async function testUpdateDesign() {
  console.log('\n‚úèÔ∏è Test 4: Modification de design...');
  
  if (!authToken || !testDesignId) {
    console.log('‚ùå Pas de token ou pas de design √† modifier');
    return false;
  }
  
  try {
    const updateData = {
      name: 'Test API Logo Modifi√©',
      description: 'Logo modifi√© via test API',
      price: 4000,
      category: 'pattern'
    };
    
    const response = await axios.put(`${BASE_URL}/api/designs/${testDesignId}`, updateData, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.data.id) {
      console.log('‚úÖ Design modifi√© avec succ√®s');
      console.log(`   Nouveau nom: ${response.data.name}`);
      console.log(`   Nouveau prix: ${response.data.price} FCFA`);
      console.log(`   Nouvelle cat√©gorie: ${response.data.category}`);
      return true;
    } else {
      console.log('‚ùå Modification √©chou√©e:', response.data);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la modification:', error.response?.data || error.message);
    return false;
  }
}

// 5. Test de publication de design
async function testPublishDesign() {
  console.log('\nüì¢ Test 5: Publication de design...');
  
  if (!authToken || !testDesignId) {
    console.log('‚ùå Pas de token ou pas de design √† publier');
    return false;
  }
  
  try {
    const response = await axios.patch(`${BASE_URL}/api/designs/${testDesignId}/publish`, 
      { isPublished: true }, 
      {
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    if (response.data.isPublished) {
      console.log('‚úÖ Design publi√© avec succ√®s');
      console.log(`   Statut publi√©: ${response.data.isPublished}`);
      console.log(`   Brouillon: ${response.data.isDraft}`);
      return true;
    } else {
      console.log('‚ùå Publication √©chou√©e:', response.data);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la publication:', error.response?.data || error.message);
    return false;
  }
}

// 6. Test des statistiques
async function testGetStats() {
  console.log('\nüìä Test 6: R√©cup√©ration des statistiques...');
  
  if (!authToken) {
    console.log('‚ùå Pas de token d\'authentification');
    return false;
  }
  
  try {
    const response = await axios.get(`${BASE_URL}/api/designs/stats/overview`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    if (response.data.success && response.data.data) {
      const stats = response.data.data;
      console.log('‚úÖ Statistiques r√©cup√©r√©es');
      console.log(`   Total designs: ${stats.total}`);
      console.log(`   Publi√©s: ${stats.published}`);
      console.log(`   En attente: ${stats.pending}`);
      console.log(`   Brouillons: ${stats.draft}`);
      console.log(`   Gains totaux: ${stats.totalEarnings} FCFA`);
      console.log(`   Vues totales: ${stats.totalViews}`);
      console.log(`   Likes totaux: ${stats.totalLikes}`);
      return true;
    } else {
      console.log('‚ùå R√©cup√©ration des statistiques √©chou√©e:', response.data);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error.response?.data || error.message);
    return false;
  }
}

// 7. Test de suppression de design
async function testDeleteDesign() {
  console.log('\nüóëÔ∏è Test 7: Suppression de design...');
  
  if (!authToken || !testDesignId) {
    console.log('‚ùå Pas de token ou pas de design √† supprimer');
    return false;
  }
  
  try {
    const response = await axios.delete(`${BASE_URL}/api/designs/${testDesignId}`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    if (response.data.success) {
      console.log('‚úÖ Design supprim√© avec succ√®s');
      console.log(`   Message: ${response.data.message}`);
      return true;
    } else {
      console.log('‚ùå Suppression √©chou√©e:', response.data);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la suppression:', error.response?.data || error.message);
    return false;
  }
}

// Fonction principale de test
async function runAllTests() {
  console.log('üöÄ Tests API Design - D√©marrage complet');
  console.log('======================================\n');
  
  // V√©rifier que le serveur est d√©marr√©
  console.log('‚è≥ Attente du d√©marrage du serveur...');
  const serverReady = await waitForServer(BASE_URL);
  
  if (!serverReady) {
    console.log('‚ùå Serveur non accessible apr√®s 30 tentatives');
    console.log('üí° Assurez-vous que le serveur est d√©marr√© sur le port 3004');
    return;
  }
  
  console.log('‚úÖ Serveur pr√™t !\n');
  
  let results = [];
  
  // Ex√©cuter tous les tests
  results.push(await testLogin());
  results.push(await testCreateDesign());
  results.push(await testGetDesigns());
  results.push(await testUpdateDesign());
  results.push(await testPublishDesign());
  results.push(await testGetStats());
  results.push(await testDeleteDesign());
  
  // R√©sum√© des r√©sultats
  console.log('\nüèÅ R√©sum√© des tests:');
  console.log('==================');
  
  const passed = results.filter(r => r).length;
  const total = results.length;
  
  console.log(`‚úÖ Tests r√©ussis: ${passed}/${total}`);
  console.log(`‚ùå Tests √©chou√©s: ${total - passed}/${total}`);
  
  if (passed === total) {
    console.log('\nüéâ Tous les tests sont pass√©s ! Le module Design fonctionne parfaitement.');
  } else {
    console.log('\n‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les logs ci-dessus.');
  }
  
  console.log('\nüìö L\'API Design est pr√™te pour l\'int√©gration frontend !');
}

// Ex√©cuter les tests si ce fichier est appel√© directement
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = { runAllTests }; 