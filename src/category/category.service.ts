// categories/category.service.ts
import { Injectable, NotFoundException, BadRequestException, ConflictException, ConflictException as HttpConflictException } from '@nestjs/common';
import { CreateCategoryDto } from './dto/create-category.dto';
import { PrismaService } from '../prisma.service';
import { UpdateCategoryDto } from './dto/update-category.dto';
import { CreateCategoryStructureDto } from './dto/create-category-structure.dto';

@Injectable()
export class CategoryService {
    constructor(private prisma: PrismaService) { }

    /**
     * Cr√©e une cat√©gorie avec v√©rification des doublons selon la logique frontend
     */
    async create(createCategoryDto: CreateCategoryDto) {
        const { name, description, parentId, level, order } = createCategoryDto;

        // 1. V√©rifier si la cat√©gorie existe d√©j√†
        const existing = await this.prisma.category.findFirst({
            where: {
                name: name.trim(),
                parentId: parentId || null
            }
        });

        if (existing) {
            throw new ConflictException({
                success: false,
                error: 'DUPLICATE_CATEGORY',
                message: `La cat√©gorie "${name}" existe d√©j√†${parentId ? ' dans cette cat√©gorie parent' : ''}`,
                existingCategory: existing
            });
        }

        // 2. D√©terminer le level automatiquement si parentId est fourni
        let calculatedLevel = level !== undefined ? level : 0;
        if (parentId) {
            const parent = await this.prisma.category.findUnique({
                where: { id: parentId },
                select: { level: true }
            });

            if (!parent) {
                throw new NotFoundException(`Cat√©gorie parent avec ID ${parentId} non trouv√©e`);
            }

            calculatedLevel = parent.level + 1;
        }

        // 3. Cr√©er la cat√©gorie
        const newCategory = await this.prisma.category.create({
            data: {
                name: name.trim(),
                description: description?.trim() || '',
                parentId: parentId || null,
                level: calculatedLevel,
                order: order || 0
            },
            include: {
                parent: true,
                children: true
            }
        });

        return {
            success: true,
            message: 'Cat√©gorie cr√©√©e avec succ√®s',
            data: newCategory
        };
    }

    /**
     * R√©cup√®re toutes les cat√©gories avec organisation hi√©rarchique
     */
    async findAll() {
        const categories = await this.prisma.category.findMany({
            orderBy: [
                { level: 'asc' },
                { order: 'asc' },
                { name: 'asc' }
            ],
            include: {
                parent: true,
                children: true,
                _count: {
                    select: { products: true }
                }
            }
        });

        return categories;
    }

    /**
     * R√©cup√®re les cat√©gories avec leur hi√©rarchie compl√®te (arbre)
     */
    async findAllHierarchy() {
        const categories = await this.findAll();

        // Cr√©er un map pour organiser les cat√©gories
        const categoriesMap: Record<number, any> = {};
        const rootCategories: any[] = [];

        // Initialiser le map
        categories.forEach(cat => {
            categoriesMap[cat.id] = {
                ...cat,
                subcategories: [],
                productCount: cat._count?.products || 0
            };
        });

        // Construire l'arbre hi√©rarchique
        categories.forEach(cat => {
            if (cat.parentId && categoriesMap[cat.parentId]) {
                categoriesMap[cat.parentId].subcategories.push(categoriesMap[cat.id]);
            } else if (!cat.parentId) {
                rootCategories.push(categoriesMap[cat.id]);
            }
        });

        return rootCategories;
    }

    async findOne(id: number) {
        const category = await this.prisma.category.findUnique({
            where: { id },
            include: {
                parent: true,
                children: {
                    include: {
                        children: true // Include variations if it's a subcategory
                    }
                },
                _count: {
                    select: { products: true }
                }
            }
        });

        if (!category) {
            throw new NotFoundException(`Cat√©gorie avec ID ${id} non trouv√©e`);
        }

        return {
            ...category,
            productCount: category._count.products
        };
    }

    async update(id: number, updateCategoryDto: UpdateCategoryDto) {
        // V√©rifier si la cat√©gorie existe
        const category = await this.findOne(id);

        // Si le nom est modifi√©, v√©rifier qu'il n'existe pas d√©j√†
        if (updateCategoryDto.name && updateCategoryDto.name.trim() !== category.name) {
            const existingCategory = await this.prisma.category.findFirst({
                where: {
                    name: updateCategoryDto.name.trim(),
                    parentId: category.parentId || null,
                    id: { not: id } // Exclure la cat√©gorie actuelle
                }
            });

            if (existingCategory) {
                throw new ConflictException({
                    success: false,
                    error: 'DUPLICATE_CATEGORY',
                    message: `Une cat√©gorie avec le nom "${updateCategoryDto.name}" existe d√©j√†${category.parentId ? ' dans cette cat√©gorie parent' : ''}`,
                    existingCategory
                });
            }
        }

        // Mettre √† jour la cat√©gorie
        const updatedCategory = await this.prisma.category.update({
            where: { id },
            data: {
                name: updateCategoryDto.name?.trim(),
                description: updateCategoryDto.description?.trim()
            },
            include: {
                parent: true,
                children: true,
                _count: {
                    select: { products: true }
                }
            }
        });

        // üîÑ SYNCHRONISATION AUTOMATIQUE DES PRODUITS
        // Si le nom a chang√©, mettre √† jour tous les produits li√©s
        if (updateCategoryDto.name && updateCategoryDto.name.trim() !== category.name) {
            const productsToUpdate = await this.prisma.product.findMany({
                where: {
                    categories: {
                        some: { id }
                    }
                },
                select: { id: true }
            });

            console.log(`üîÑ Synchronisation: ${productsToUpdate.length} produit(s) li√©s √† la cat√©gorie "${category.name}" ‚Üí "${updatedCategory.name}"`);

            // Note: La synchronisation est automatique via la relation many-to-many
            // Les produits afficheront automatiquement le nouveau nom de cat√©gorie
        }

        return {
            success: true,
            message: `Cat√©gorie mise √† jour avec succ√®s${updatedCategory._count.products > 0 ? ` (${updatedCategory._count.products} produit(s) synchronis√©(s))` : ''}`,
            data: {
                ...updatedCategory,
                productCount: updatedCategory._count.products
            }
        };
    }

    /**
     * Supprime une cat√©gorie et tous ses enfants en cascade
     */
    async remove(id: number) {
        // V√©rifier si la cat√©gorie existe
        const category = await this.findOne(id);

        // R√©cup√©rer tous les IDs des enfants (r√©cursif)
        const childrenIds = await this.getAllChildrenIds(id);
        const allIds = [id, ...childrenIds];

        // V√©rifier si des produits sont li√©s √† cette cat√©gorie ou ses enfants
        const productsCount = await this.prisma.product.count({
            where: {
                categories: {
                    some: {
                        id: { in: allIds }
                    }
                }
            }
        });

        if (productsCount > 0) {
            throw new ConflictException({
                code: 'CategoryInUse',
                message: `La cat√©gorie est utilis√©e par ${productsCount} produit(s).`,
                details: await this.getUsage(id)
            });
        }

        // Suppression en cascade (Prisma g√®re automatiquement avec onDelete: Cascade)
        await this.prisma.category.delete({
            where: { id },
        });

        return {
            success: true,
            message: 'Cat√©gorie supprim√©e avec succ√®s',
            deletedCount: allIds.length
        };
    }

    /**
     * R√©cup√®re r√©cursivement tous les IDs des enfants d'une cat√©gorie
     */
    private async getAllChildrenIds(parentId: number): Promise<number[]> {
        const children = await this.prisma.category.findMany({
            where: { parentId },
            select: { id: true }
        });

        let allIds: number[] = [];

        for (const child of children) {
            allIds.push(child.id);
            const subChildren = await this.getAllChildrenIds(child.id);
            allIds = [...allIds, ...subChildren];
        }

        return allIds;
    }

    /**
     * Admin: Obtenir l'usage d'une cat√©gorie (produits li√©s, sous-cat√©gories, variations)
     */
    async getUsage(id: number) {
        // V√©rifier existence
        const cat = await this.prisma.category.findUnique({ where: { id } });
        if (!cat) {
            throw new NotFoundException(`Cat√©gorie avec ID ${id} non trouv√©e`);
        }

        const directProductsCount = await this.prisma.product.count({
            where: { categories: { some: { id } } }
        });

        // Sous-cat√©gories directes
        const subcategories = await this.prisma.category.findMany({
            where: { parentId: id },
            select: { id: true }
        });
        const subcategoryIds = subcategories.map(s => s.id);

        const productsWithSubCategory = subcategoryIds.length === 0 ? 0 : await this.prisma.product.count({
            where: { categories: { some: { id: { in: subcategoryIds } } } }
        });

        // Variations: enfants de niveau 2 sous cette cat√©gorie
        let variationsCount = 0;
        if (subcategoryIds.length > 0) {
            variationsCount = await this.prisma.category.count({
                where: { parentId: { in: subcategoryIds } }
            });
        } else {
            // Si la cat√©gorie n'a pas d'enfants, variations = 0
            variationsCount = 0;
        }

        return {
            success: true,
            data: {
                categoryId: id,
                productsWithCategory: directProductsCount,
                productsWithSubCategory,
                subcategoriesCount: subcategoryIds.length,
                variationsCount
            }
        };
    }

    /**
     * Admin: R√©affecter des produits li√©s √† une cat√©gorie/source vers une cible
     */
    async reassignCategory(
        id: number,
        body: {
            targetCategoryId: number,
            reassignType: 'category' | 'subcategory' | 'both',
            reassignVariations?: 'keep' | 'null' | 'map',
            variationMap?: Array<{ from: number, to: number }>
        }
    ) {
        const { targetCategoryId, reassignType } = body;

        if (id === targetCategoryId) {
            throw new BadRequestException('La cat√©gorie cible doit √™tre diff√©rente de la cat√©gorie source');
        }

        const [source, target] = await Promise.all([
            this.prisma.category.findUnique({ where: { id } }),
            this.prisma.category.findUnique({ where: { id: targetCategoryId } })
        ]);

        if (!source) throw new NotFoundException(`Cat√©gorie source ${id} introuvable`);
        if (!target) throw new BadRequestException({ code: 'InvalidTarget', message: 'Cat√©gorie cible introuvable.' });

        // Construire le set d'IDs de cat√©gories √† r√©assigner selon le type
        const idsToReassign = new Set<number>();
        if (reassignType === 'category' || reassignType === 'both') {
            idsToReassign.add(id);
        }
        if (reassignType === 'subcategory' || reassignType === 'both') {
            const directChildren = await this.prisma.category.findMany({ where: { parentId: id }, select: { id: true } });
            directChildren.forEach(c => idsToReassign.add(c.id));
        }

        if (idsToReassign.size === 0) {
            return { success: true, data: { updated: 0 } };
        }

        const categoryIds = Array.from(idsToReassign);

        // Trouver les produits li√©s √† au moins une des cat√©gories √† r√©assigner
        const products = await this.prisma.product.findMany({
            where: { categories: { some: { id: { in: categoryIds } } } },
            select: { id: true, categories: { select: { id: true } } }
        });

        let updated = 0;
        await this.prisma.$transaction(async (tx) => {
            for (const p of products) {
                const productCategoryIds = p.categories.map(c => c.id);
                const toDisconnect = productCategoryIds.filter(cid => categoryIds.includes(cid));

                // D√©connecter les anciennes et connecter la cible
                await tx.product.update({
                    where: { id: p.id },
                    data: {
                        categories: {
                            disconnect: toDisconnect.map(cid => ({ id: cid })),
                            connect: [{ id: targetCategoryId }]
                        }
                    }
                });
                updated += 1;
            }
        });

        return { success: true, data: { updated } };
    }

    /**
     * Admin: lister les variations (enfants directs) d'une cat√©gorie
     */
    async getVariations(categoryId: number) {
        // Ici "variations" = enfants directs, g√©n√©ralement level 2 si parent est une sous-cat√©gorie
        const variations = await this.prisma.category.findMany({
            where: { parentId: categoryId },
            orderBy: [{ order: 'asc' }, { name: 'asc' }]
        });
        return { success: true, data: variations };
    }

    /**
     * Admin: lister les sous-cat√©gories (enfants directs) d'une cat√©gorie
     */
    async getChildren(categoryId: number) {
        const children = await this.prisma.category.findMany({
            where: { parentId: categoryId },
            orderBy: [{ order: 'asc' }, { name: 'asc' }]
        });
        return { success: true, data: children };
    }

    /**
     * Admin: retourner l'arbre complet √† partir d'un noeud donn√©
     */
    async getTree(rootId: number) {
        const all = await this.prisma.category.findMany({
            orderBy: [{ level: 'asc' }, { order: 'asc' }, { name: 'asc' }]
        });
        const byId: Record<number, any> = {};
        for (const c of all) {
            byId[c.id] = { ...c, subcategories: [] };
        }
        for (const c of all) {
            if (c.parentId && byId[c.parentId]) {
                byId[c.parentId].subcategories.push(byId[c.id]);
            }
        }
        const root = byId[rootId];
        if (!root) {
            throw new NotFoundException(`Cat√©gorie avec ID ${rootId} non trouv√©e`);
        }
        return { success: true, data: root };
    }

    /**
     * Admin: suppression avec garde 409 si utilis√©e
     */
    async adminRemove(id: number) {
        const usage = await this.getUsage(id);
        const { productsWithCategory, productsWithSubCategory } = usage.data;
        if ((productsWithCategory || 0) + (productsWithSubCategory || 0) > 0) {
            throw new ConflictException({ code: 'CategoryInUse', message: 'La cat√©gorie est utilis√©e par des produits.', details: usage.data });
        }
        await this.prisma.category.delete({ where: { id } });
        return { success: true };
    }

    /**
     * Cr√©e une structure compl√®te de cat√©gories (parent > enfant > variations)
     * Selon la logique frontend d√©crite dans ha.md
     */
    async createCategoryStructure(dto: CreateCategoryStructureDto) {
        const { parentName, parentDescription, childName, variations } = dto;

        let createdCount = 0;
        let parentResult = null;
        let childResult = null;
        const skippedVariations: string[] = [];

        // 1. Cr√©er ou r√©cup√©rer le parent
        const existingParent = await this.prisma.category.findFirst({
            where: {
                name: parentName.trim(),
                parentId: null
            }
        });

        if (existingParent) {
            parentResult = existingParent;
        } else {
            const newParent = await this.create({
                name: parentName,
                description: parentDescription,
                parentId: null,
                level: 0
            });
            parentResult = newParent.data;
            createdCount++;
        }

        // 2. Cr√©er ou r√©cup√©rer l'enfant (sous-cat√©gorie)
        if (childName && childName.trim()) {
            const existingChild = await this.prisma.category.findFirst({
                where: {
                    name: childName.trim(),
                    parentId: parentResult.id
                }
            });

            if (existingChild) {
                childResult = existingChild;
            } else {
                const newChild = await this.create({
                    name: childName,
                    description: `Sous-cat√©gorie de ${parentResult.name}`,
                    parentId: parentResult.id,
                    level: 1
                });
                childResult = newChild.data;
                createdCount++;
            }
        }

        // 3. Ajouter les variations
        const targetParentId = childResult ? childResult.id : parentResult.id;
        const targetLevel = childResult ? 2 : 1;

        for (const variation of variations) {
            if (variation.trim()) {
                const existingVariation = await this.prisma.category.findFirst({
                    where: {
                        name: variation.trim(),
                        parentId: targetParentId
                    }
                });

                if (!existingVariation) {
                    try {
                        await this.create({
                            name: variation.trim(),
                            description: `Variation de ${childResult?.name || parentResult.name}`,
                            parentId: targetParentId,
                            level: targetLevel
                        });
                        createdCount++;
                    } catch (error) {
                        skippedVariations.push(variation);
                    }
                } else {
                    skippedVariations.push(variation);
                }
            }
        }

        return {
            success: true,
            createdCount,
            skippedVariations,
            message: `Structure cr√©√©e avec succ√®s ! ${createdCount} nouveau(x) √©l√©ment(s) ajout√©(s).`,
            data: {
                parent: parentResult,
                child: childResult,
                totalVariations: variations.length,
                createdVariations: variations.length - skippedVariations.length
            }
        };
    }

    /**
     * V√©rifie si une cat√©gorie avec ce nom existe d√©j√† dans le parent sp√©cifi√©
     */
    async checkDuplicateCategory(name: string, parentId: number | null = null) {
        const existing = await this.prisma.category.findFirst({
            where: {
                name: name.trim(),
                parentId: parentId
            }
        });

        return {
            exists: existing !== null,
            category: existing || null
        };
    }
}