const axios = require('axios');

const BASE_URL = 'http://localhost:5174/api';

// Test des endpoints publics (sans authentification)
async function testPublicEndpoints() {
  console.log('üîì Test des endpoints publics des th√®mes (sans authentification)\n');

  try {
    // Test 1: Liste des th√®mes
    console.log('üß™ Test 1: R√©cup√©rer la liste des th√®mes');
    const themesResponse = await axios.get(`${BASE_URL}/themes`);
    console.log('‚úÖ Succ√®s - Th√®mes r√©cup√©r√©s:', themesResponse.data.data?.length || 0, 'th√®mes');
    console.log('');

    // Test 2: D√©tails d'un th√®me
    console.log('üß™ Test 2: R√©cup√©rer les d√©tails d\'un th√®me');
    const themeId = 4; // ID du th√®me √† tester
    const themeDetailsResponse = await axios.get(`${BASE_URL}/themes/${themeId}`);
    console.log('‚úÖ Succ√®s - D√©tails du th√®me:', themeDetailsResponse.data.data?.name);
    console.log('');

    // Test 3: Produits d'un th√®me
    console.log('üß™ Test 3: R√©cup√©rer les produits d\'un th√®me');
    const themeProductsResponse = await axios.get(`${BASE_URL}/themes/${themeId}/products`, {
      params: {
        status: 'READY',
        limit: 5,
        sort: 'name',
        order: 'asc'
      }
    });
    console.log('‚úÖ Succ√®s - Produits r√©cup√©r√©s:', themeProductsResponse.data.data?.length || 0, 'produits');
    console.log('');

    // Test 4: Produits avec filtres
    console.log('üß™ Test 4: R√©cup√©rer les produits avec filtres');
    const filteredProductsResponse = await axios.get(`${BASE_URL}/themes/${themeId}/products`, {
      params: {
        status: 'READY',
        category: 'tshirt',
        search: 'manga',
        limit: 3,
        sort: 'price',
        order: 'desc'
      }
    });
    console.log('‚úÖ Succ√®s - Produits filtr√©s:', filteredProductsResponse.data.data?.length || 0, 'produits');
    console.log('');

    // Test 5: Pagination
    console.log('üß™ Test 5: Tester la pagination');
    const paginationResponse = await axios.get(`${BASE_URL}/themes/${themeId}/products`, {
      params: {
        limit: 2,
        offset: 0
      }
    });
    console.log('‚úÖ Succ√®s - Pagination:', {
      total: paginationResponse.data.pagination?.total,
      limit: paginationResponse.data.pagination?.limit,
      hasMore: paginationResponse.data.pagination?.hasMore
    });
    console.log('');

    console.log('üéâ Tous les tests des endpoints publics ont r√©ussi !');
    console.log('‚úÖ Les endpoints sont bien accessibles sans authentification');

  } catch (error) {
    console.error('‚ùå Erreur lors du test des endpoints publics:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.error('‚ùå ERREUR: L\'endpoint n√©cessite une authentification alors qu\'il devrait √™tre public');
    } else if (error.response?.status === 404) {
      console.error('‚ùå ERREUR: Th√®me non trouv√© - v√©rifiez que le th√®me ID 4 existe');
    } else {
      console.error('‚ùå ERREUR: Probl√®me de connexion ou serveur non d√©marr√©');
    }
  }
}

// Test de performance
async function testPerformance() {
  console.log('\n‚ö° Test de performance des endpoints publics\n');

  const startTime = Date.now();
  
  try {
    // Test de charge simple
    const promises = [];
    for (let i = 0; i < 5; i++) {
      promises.push(axios.get(`${BASE_URL}/themes/4/products?limit=10`));
    }
    
    const results = await Promise.all(promises);
    const endTime = Date.now();
    
    console.log(`‚úÖ Performance: ${results.length} requ√™tes en ${endTime - startTime}ms`);
    console.log(`üìä Temps moyen par requ√™te: ${(endTime - startTime) / results.length}ms`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de performance:', error.message);
  }
}

// Test de validation des param√®tres
async function testParameterValidation() {
  console.log('\nüîç Test de validation des param√®tres\n');

  try {
    // Test avec param√®tres invalides
    console.log('üß™ Test: Param√®tres invalides');
    const invalidResponse = await axios.get(`${BASE_URL}/themes/4/products`, {
      params: {
        sort: 'invalid_sort',
        order: 'invalid_order',
        limit: 'not_a_number'
      }
    });
    console.log('‚úÖ Succ√®s - Param√®tres invalides g√©r√©s gracieusement');
    console.log('');

    // Test avec param√®tres valides
    console.log('üß™ Test: Param√®tres valides');
    const validResponse = await axios.get(`${BASE_URL}/themes/4/products`, {
      params: {
        sort: 'name',
        order: 'asc',
        limit: 5,
        status: 'READY'
      }
    });
    console.log('‚úÖ Succ√®s - Param√®tres valides trait√©s correctement');
    console.log('');

  } catch (error) {
    console.error('‚ùå Erreur lors du test de validation:', error.response?.data || error.message);
  }
}

// Fonction principale
async function runAllTests() {
  console.log('üöÄ D√©marrage des tests des endpoints publics des th√®mes\n');
  
  await testPublicEndpoints();
  await testPerformance();
  await testParameterValidation();
  
  console.log('\nüéâ Tous les tests termin√©s !');
  console.log('üìã R√©sum√©:');
  console.log('   ‚úÖ Endpoints publics accessibles sans authentification');
  console.log('   ‚úÖ Filtres et pagination fonctionnels');
  console.log('   ‚úÖ Performance acceptable');
  console.log('   ‚úÖ Validation des param√®tres correcte');
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runAllTests();
}

module.exports = {
  testPublicEndpoints,
  testPerformance,
  testParameterValidation,
  runAllTests
}; 