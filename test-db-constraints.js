const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testDatabaseConstraints() {
  console.log('üöÄ D√âBUT DU TEST DE CONTRAINTES DE BASE DE DONN√âES\n');

  try {
    // √âtape 1: Cr√©er la hi√©rarchie compl√®te
    console.log('üìÅ √âTAPE 1: CR√âATION DE LA HI√âRARCHIE DE CAT√âGORIES');

    // Cr√©er une cat√©gorie
    const category = await prisma.category.create({
      data: {
        name: 'V√™tements de Test DB',
        slug: 'vetements-test-db',
        description: 'Description pour test des contraintes',
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Cat√©gorie "${category.name}" cr√©√©e avec ID: ${category.id}`);

    // Cr√©er une sous-cat√©gorie
    const subCategory = await prisma.subCategory.create({
      data: {
        name: 'T-shirts de Test DB',
        slug: 'tshirts-test-db',
        description: 'Description pour test des contraintes',
        categoryId: category.id,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Sous-cat√©gorie "${subCategory.name}" cr√©√©e avec ID: ${subCategory.id}`);

    // Cr√©er une variation
    const variation = await prisma.variation.create({
      data: {
        name: 'Col rond de Test DB',
        slug: 'col-rond-test-db',
        description: 'Description pour test des contraintes',
        subCategoryId: subCategory.id,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Variation "${variation.name}" cr√©√©e avec ID: ${variation.id}`);

    // √âtape 2: Cr√©er un produit avec cette hi√©rarchie
    console.log('\nüì¶ √âTAPE 2: CR√âATION D\'UN PRODUIT AVEC LA HI√âRARCHIE');

    const product = await prisma.product.create({
      data: {
        name: 'T-shirt Test Contrainte DB',
        description: 'T-shirt pour tester les contraintes de suppression en base de donn√©es',
        price: 25.99,
        stock: 100,
        status: 'PUBLISHED',
        categoryId: category.id,
        subCategoryId: subCategory.id,
        variationId: variation.id,
        colorVariations: {
          create: {
            name: 'Blanc',
            colorCode: '#FFFFFF'
          }
        },
        sizes: {
          create: [
            { sizeName: 'M' },
            { sizeName: 'L' }
          ]
        }
      },
      include: {
        colorVariations: true,
        sizes: true
      }
    });
    console.log(`‚úÖ Produit "${product.name}" cr√©√© avec ID: ${product.id}`);

    // √âtape 3: Tester les suppressions (devraient √©chouer)
    console.log('\nüóëÔ∏è  √âTAPE 3: TEST DES SUPPRESSIONS (DEVRAIENT √âCHOUER)');

    // Test 1: Essayer de supprimer la sous-cat√©gorie
    console.log('\n‚û°Ô∏è  Test 1: Tentative de suppression de la sous-cat√©gorie...');
    try {
      await prisma.subCategory.delete({
        where: { id: subCategory.id }
      });
      console.log(`‚ùå ERREUR: La sous-cat√©gorie "${subCategory.name}" a √©t√© supprim√©e - CE N'EST PAS NORMAL!`);
    } catch (error) {
      console.log(`‚úÖ BON: La sous-cat√©gorie "${subCategory.name}" ne peut pas √™tre supprim√©e (Erreur: ${error.code})`);
    }

    // Test 2: Essayer de supprimer la variation
    console.log('\n‚û°Ô∏è  Test 2: Tentative de suppression de la variation...');
    try {
      await prisma.variation.delete({
        where: { id: variation.id }
      });
      console.log(`‚ùå ERREUR: La variation "${variation.name}" a √©t√© supprim√©e - CE N'EST PAS NORMAL!`);
    } catch (error) {
      console.log(`‚úÖ BON: La variation "${variation.name}" ne peut pas √™tre supprim√©e (Erreur: ${error.code})`);
    }

    // Test 3: Essayer de supprimer la cat√©gorie
    console.log('\n‚û°Ô∏è  Test 3: Tentative de suppression de la cat√©gorie...');
    try {
      await prisma.category.delete({
        where: { id: category.id }
      });
      console.log(`‚ùå ERREUR: La cat√©gorie "${category.name}" a √©t√© supprim√©e - CE N'EST PAS NORMAL!`);
    } catch (error) {
      console.log(`‚úÖ BON: La cat√©gorie "${category.name}" ne peut pas √™tre supprim√©e (Erreur: ${error.code})`);
    }

    // √âtape 4: Nettoyage propre (suppression s√©quentielle)
    console.log('\nüßπ √âTAPE 4: NETTOYAGE PROPRE (SUPPRESSION S√âQUENTIELLE)');

    // Supprimer le produit en premier
    await prisma.product.delete({
      where: { id: product.id }
    });
    console.log(`‚úÖ Produit "${product.name}" supprim√© avec succ√®s`);

    // Maintenant on devrait pouvoir supprimer la variation
    try {
      await prisma.variation.delete({
        where: { id: variation.id }
      });
      console.log(`‚úÖ Variation "${variation.name}" supprim√©e avec succ√®s`);
    } catch (error) {
      console.log(`‚ùå Impossible de supprimer la variation m√™me apr√®s avoir supprim√© le produit: ${error.message}`);
    }

    // Puis la sous-cat√©gorie
    try {
      await prisma.subCategory.delete({
        where: { id: subCategory.id }
      });
      console.log(`‚úÖ Sous-cat√©gorie "${subCategory.name}" supprim√©e avec succ√®s`);
    } catch (error) {
      console.log(`‚ùå Impossible de supprimer la sous-cat√©gorie: ${error.message}`);
    }

    // Et enfin la cat√©gorie
    try {
      await prisma.category.delete({
        where: { id: category.id }
      });
      console.log(`‚úÖ Cat√©gorie "${category.name}" supprim√©e avec succ√®s`);
    } catch (error) {
      console.log(`‚ùå Impossible de supprimer la cat√©gorie: ${error.message}`);
    }

    console.log('\nüèÅ FIN DU TEST');
    console.log('\nüìã R√âSUM√â:');
    console.log('- Si les suppressions des √âTAPES 3 ont √©chou√©: ‚úÖ Les contraintes fonctionnent CORRECTEMENT');
    console.log('- Si les suppressions des √âTAPES 3 ont r√©ussi: ‚ùå Les contraintes NE fonctionnent PAS');
    console.log('- Le nettoyage de l\'√âTAPE 4 devrait fonctionner s√©quentiellement');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test
testDatabaseConstraints().catch(console.error);