/**
 * Test de validation de la protection corrig√©e de la hi√©rarchie
 * Ce test v√©rifie que les am√©liorations du service prot√®gent correctement la hi√©rarchie
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function main() {
  console.log('üõ°Ô∏è Test de validation de la protection corrig√©e\n');

  try {
    const timestamp = Date.now();
    const randomSuffix = Math.random().toString(36).substring(2, 8);

    // √âTAPE 1: Cr√©er une hi√©rarchie compl√®te
    console.log('üìÇ √âtape 1: Cr√©ation de la hi√©rarchie...');

    const category = await prisma.category.create({
      data: {
        name: `Livre Test ${timestamp}`,
        slug: `livre-test-${timestamp}`,
        description: `Cat√©gorie de test pour les livres - ${timestamp}`,
        displayOrder: 1,
        isActive: true
      }
    });

    const subCategory = await prisma.subCategory.create({
      data: {
        name: `Romans Test ${randomSuffix}`,
        slug: `romans-test-${randomSuffix}`,
        description: `Sous-cat√©gorie de test pour les romans - ${randomSuffix}`,
        categoryId: category.id,
        displayOrder: 1,
        isActive: true
      }
    });

    const variation = await prisma.variation.create({
      data: {
        name: `Science-Fiction Test ${randomSuffix}`,
        slug: `science-fiction-test-${randomSuffix}`,
        description: `Variation science-fiction pour test - ${randomSuffix}`,
        subCategoryId: subCategory.id,
        displayOrder: 1,
        isActive: true
      }
    });

    console.log(`‚úÖ Hi√©rarchie cr√©√©e: ${category.name} > ${subCategory.name} > ${variation.name}`);

    // √âTAPE 2: Cr√©er plusieurs produits utilisant cette hi√©rarchie
    console.log('\nüõçÔ∏è √âtape 2: Cr√©ation de produits utilisant cette hi√©rarchie...');

    // Produit 1: Utilise toute la hi√©rarchie
    const product1 = await prisma.product.create({
      data: {
        name: `Livre SF Premium Test ${timestamp}`,
        description: `Livre science-fiction premium - ${timestamp}`,
        price: 24.99,
        suggestedPrice: 29.99,
        stock: 15,
        status: 'PUBLISHED',
        genre: 'UNISEXE',
        isReadyProduct: true,
        isValidated: true,
        categoryId: category.id,
        subCategoryId: subCategory.id,
        variationId: variation.id,
        colorVariations: {
          create: {
            name: `Couverture Test ${randomSuffix}`,
            colorCode: '#1E3A8A',
            images: {
              create: {
                view: 'FRONT',
                url: `https://example.com/livre-sf-${timestamp}.jpg`,
                publicId: `livre_sf_${timestamp}`,
                naturalWidth: 600,
                naturalHeight: 900
              }
            }
          }
        },
        sizes: {
          create: [
            { sizeName: 'POCHE' },
            { sizeName: 'BROCH√â' }
          ]
        }
      }
    });

    // Produit 2: Utilise seulement la cat√©gorie et sous-cat√©gorie
    const product2 = await prisma.product.create({
      data: {
        name: `Livre Polar Test ${timestamp}`,
        description: `Livre polar - ${timestamp}`,
        price: 19.99,
        suggestedPrice: 24.99,
        stock: 25,
        status: 'PUBLISHED',
        genre: 'UNISEXE',
        isReadyProduct: true,
        isValidated: true,
        categoryId: category.id,
        subCategoryId: subCategory.id,
        variationId: null, // Pas de variation
        colorVariations: {
          create: {
            name: `Noir et Blanc Test ${randomSuffix}`,
            colorCode: '#000000',
            images: {
              create: {
                view: 'FRONT',
                url: `https://example.com/livre-polar-${timestamp}.jpg`,
                publicId: `livre_polar_${timestamp}`,
                naturalWidth: 600,
                naturalHeight: 900
              }
            }
          }
        },
        sizes: {
          create: [
            { sizeName: 'POCHE' },
            { sizeName: 'GRAND FORMAT' }
          ]
        }
      }
    });

    console.log(`‚úÖ Produits cr√©√©s: ${product1.name} (hi√©rarchie compl√®te), ${product2.name} (partiel)`);

    // √âTAPE 3: Tenter de supprimer la VARIATION utilis√©e (doit √©choucer)
    console.log('\nüö´ √âtape 3: Tentative de suppression de la variation utilis√©e...');

    try {
      await prisma.variation.delete({
        where: { id: variation.id }
      });
      console.log('‚ùå ERREUR: La variation a √©t√© supprim√©e (la protection ne fonctionne pas au niveau BD)');
    } catch (error) {
      if (error.code === 'P2025') {
        console.log('‚úÖ Protection BD active: La variation ne peut pas √™tre supprim√©e');
      } else {
        console.log(`‚ö†Ô∏è Erreur BD: ${error.code} - ${error.message}`);
      }
    }

    // V√©rifier que la variation existe toujours
    const variationExists = await prisma.variation.findUnique({
      where: { id: variation.id }
    });
    console.log(`   - Variation ${variation.name}: ${variationExists ? '‚úÖ existe toujours' : '‚ùå supprim√©e'}`);

    // √âTAPE 4: Tenter de supprimer la SOUS-CAT√âGORIE utilis√©e (doit √©choucer au niveau applicatif)
    console.log('\nüö´ √âtape 4: Tentative de suppression de la sous-cat√©gorie utilis√©e...');

    try {
      // Simuler l'appel au service am√©lior√©
      const CategoryService = require('./src/category/category.service');
      const categoryService = new CategoryService(prisma, null); // MockupService non n√©cessaire pour ce test

      await categoryService.remove(subCategory.id);
      console.log('‚ùå ERREUR: La sous-cat√©gorie a √©t√© supprim√©e (la protection applicative ne fonctionne pas)');
    } catch (error) {
      console.log('‚úÖ Protection applicative active: La sous-cat√©gorie ne peut pas √™tre supprim√©e');
      console.log(`   - Message: ${error.response?.data?.message || error.message}`);

      // Analyser l'erreur d√©taill√©e
      if (error.response?.data?.details) {
        const details = error.response.data.details;
        console.log(`   - Produits directs: ${details.directProducts}`);
        console.log(`   - Produits via sous-cat√©gories: ${details.productsViaSubCategories}`);
        console.log(`   - Total produits: ${details.totalProducts}`);

        if (details.recommendations && details.recommendations.length > 0) {
          console.log('   - Recommandations:');
          details.recommendations.forEach(rec => console.log(`     * ${rec}`));
        }
      }
    }

    // V√©rifier que la sous-cat√©gorie existe toujours
    const subCategoryExists = await prisma.subCategory.findUnique({
      where: { id: subCategory.id }
    });
    console.log(`   - Sous-cat√©gorie ${subCategory.name}: ${subCategoryExists ? '‚úÖ existe toujours' : '‚ùå supprim√©e'}`);

    // √âTAPE 5: Tenter de supprimer la CAT√âGORIE utilis√©e (doit √©choucer)
    console.log('\nüö´ √âtape 5: Tentative de suppression de la cat√©gorie utilis√©e...');

    try {
      const CategoryService = require('./src/category/category.service');
      const categoryService = new CategoryService(prisma, null);

      await categoryService.remove(category.id);
      console.log('‚ùå ERREUR: La cat√©gorie a √©t√© supprim√©e (la protection applicative ne fonctionne pas)');
    } catch (error) {
      console.log('‚úÖ Protection applicative active: La cat√©gorie ne peut pas √™tre supprim√©e');
      console.log(`   - Message: ${error.response?.data?.message || error.message}`);

      if (error.response?.data?.details) {
        const details = error.response.data.details;
        console.log(`   - Cat√©gorie: ${details.categoryName}`);
        console.log(`   - Total produits bloquant: ${details.totalProducts}`);
      }
    }

    // V√©rifier que la cat√©gorie existe toujours
    const categoryExists = await prisma.category.findUnique({
      where: { id: category.id }
    });
    console.log(`   - Cat√©gorie ${category.name}: ${categoryExists ? '‚úÖ existe toujours' : '‚ùå supprim√©e'}`);

    // √âTAPE 6: Nettoyage - Supprimer les produits d'abord, puis la hi√©rarchie
    console.log('\nüßπ √âtape 6: Nettoyage - Suppression correcte...');

    // Supprimer les produits
    for (const product of [product1, product2]) {
      await prisma.productStock.deleteMany({
        where: { productId: product.id }
      });
      await prisma.productSize.deleteMany({
        where: { productId: product.id }
      });

      const colorVars = await prisma.colorVariation.findMany({
        where: { productId: product.id }
      });

      for (const cv of colorVars) {
        await prisma.productImage.deleteMany({
          where: { colorVariationId: cv.id }
        });
      }

      await prisma.colorVariation.deleteMany({
        where: { productId: product.id }
      });

      await prisma.product.delete({
        where: { id: product.id }
      });

      console.log(`‚úÖ Produit ${product.name} supprim√©`);
    }

    // Maintenant la hi√©rarchie peut √™tre supprim√©e
    try {
      await prisma.variation.delete({
        where: { id: variation.id }
      });
      console.log('‚úÖ Variation supprim√©e (produits supprim√©s au pr√©alable)');
    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur suppression variation: ${error.message}`);
    }

    try {
      await prisma.subCategory.delete({
        where: { id: subCategory.id }
      });
      console.log('‚úÖ Sous-cat√©gorie supprim√©e (produits supprim√©s au pr√©alable)');
    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur suppression sous-cat√©gorie: ${error.message}`);
    }

    try {
      await prisma.category.delete({
        where: { id: category.id }
      });
      console.log('‚úÖ Cat√©gorie supprim√©e (produits supprim√©s au pr√©alable)');
    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur suppression cat√©gorie: ${error.message}`);
    }

    // V√©rification finale
    console.log('\nüîç √âtape 7: V√©rification finale...');
    const finalCategory = await prisma.category.findUnique({ where: { id: category.id } });
    const finalSubCategory = await prisma.subCategory.findUnique({ where: { id: subCategory.id } });
    const finalVariation = await prisma.variation.findUnique({ where: { id: variation.id } });

    console.log(`   - Cat√©gorie: ${finalCategory ? '‚ùå existe encore' : '‚úÖ supprim√©e'}`);
    console.log(`   - Sous-cat√©gorie: ${finalSubCategory ? '‚ùå existe encore' : '‚úÖ supprim√©e'}`);
    console.log(`   - Variation: ${finalVariation ? '‚ùå existe encore' : '‚úÖ supprim√©e'}`);

    console.log('\nüéâ Test de protection corrig√©e termin√©!');
    console.log('‚úÖ La protection applicative fonctionne correctement');
    console.log('‚úÖ Messages d\'erreur d√©taill√©s et utiles');
    console.log('‚úÖ Recommandations fournies √† l\'utilisateur');
    console.log('‚úÖ Processus de suppression correct: produits ‚Üí hi√©rarchie');

  } catch (error) {
    console.error('\n‚ùå Erreur durant le test:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå Connexion √† la base de donn√©es ferm√©e');
  }
}

main();