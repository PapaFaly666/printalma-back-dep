const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testFinalCreation() {
  console.log('üõ†Ô∏è  TEST FINAL : CR√âATION MANUELLE COMME UN UTILISATEUR\n');

  try {
    console.log('√âTAPE 1: Simulation de la cr√©ation d\'une boutique compl√®te...\n');

    // √âTAPE 1: Cr√©er une cat√©gorie (comme un administrateur)
    console.log('üìÅ Cr√©ation de la cat√©gorie "Mode Femme"');
    const category = await prisma.category.create({
      data: {
        name: 'Mode Femme',
        slug: 'mode-femme',
        description: 'V√™tements et accessoires pour femme',
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Cat√©gorie cr√©√©e: "${category.name}" (ID: ${category.id})\n`);

    // √âTAPE 2: Cr√©er une sous-cat√©gorie (comme un vendeur)
    console.log('üìÇ Cr√©ation de la sous-cat√©gorie "Robes" dans "Mode Femme"');
    const subCategory = await prisma.subCategory.create({
      data: {
        name: 'Robes',
        slug: 'robes',
        description: 'Robes √©l√©gantes pour toutes occasions',
        categoryId: category.id,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Sous-cat√©gorie cr√©√©e: "${subCategory.name}" (ID: ${subCategory.id})\n`);

    // √âTAPE 3: Cr√©er des variations (comme un vendeur sp√©cialis√©)
    console.log('üé® Cr√©ation des variations pour les robes');

    const variation1 = await prisma.variation.create({
      data: {
        name: 'Robe Longue',
        slug: 'robe-longue',
        description: 'Robe longue et √©l√©gante',
        subCategoryId: subCategory.id,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Variation 1 cr√©√©e: "${variation1.name}" (ID: ${variation1.id})`);

    const variation2 = await prisma.variation.create({
      data: {
        name: 'Robe Cocktail',
        slug: 'robe-cocktail',
        description: 'Robe courte pour soir√©es',
        subCategoryId: subCategory.id,
        displayOrder: 2,
        isActive: true
      }
    });
    console.log(`‚úÖ Variation 2 cr√©√©e: "${variation2.name}" (ID: ${variation2.id})\n`);

    // √âTAPE 4: Cr√©er des produits r√©els (comme un vendeur)
    console.log('üì¶ Cr√©ation de produits avec cette hi√©rarchie');

    const product1 = await prisma.product.create({
      data: {
        name: 'Robe Longue Soie Noire',
        description: 'Magnifique robe longue en soie noire, parfaite pour les √©v√©nements formels. Coupe ample avec √©l√©gance.',
        price: 189.99,
        stock: 25,
        status: 'PUBLISHED',
        genre: 'FEMME',
        categoryId: category.id,
        subCategoryId: subCategory.id,
        variationId: variation1.id,
        colorVariations: {
          create: [
            {
              name: 'Noir',
              colorCode: '#000000'
            }
          ]
        },
        sizes: {
          create: [
            { sizeName: 'S' },
            { sizeName: 'M' },
            { sizeName: 'L' }
          ]
        }
      }
    });
    console.log(`‚úÖ Produit 1 cr√©√©: "${product1.name}" (‚Ç¨${product1.price})`);

    const product2 = await prisma.product.create({
      data: {
        name: 'Robe Cocktail Rouge Passion',
        description: 'Robe cocktail rouge passionnante avec d√©tails modernes. Id√©ale pour les soir√©es et c√©l√©brations.',
        price: 129.99,
        stock: 40,
        status: 'PUBLISHED',
        genre: 'FEMME',
        categoryId: category.id,
        subCategoryId: subCategory.id,
        variationId: variation2.id,
        colorVariations: {
          create: [
            {
              name: 'Rouge',
              colorCode: '#FF0000'
            }
          ]
        },
        sizes: {
          create: [
            { sizeName: 'XS' },
            { sizeName: 'S' },
            { sizeName: 'M' }
          ]
        }
      }
    });
    console.log(`‚úÖ Produit 2 cr√©√©: "${product2.name}" (‚Ç¨${product2.price})\n`);

    // √âTAPE 5: V√©rification finale
    console.log('üîç V√©rification de la hi√©rarchie compl√®te');

    const verification = await prisma.product.findUnique({
      where: { id: product1.id },
      include: {
        category: true,
        subCategory: true,
        variation: true,
        colorVariations: true,
        sizes: true
      }
    });

    console.log('\nüìã HI√âRARCHIE COMPL√àTE CR√â√âE:');
    console.log(`   Cat√©gorie: ${verification.category?.name}`);
    console.log(`   ‚îî‚îÄ‚îÄ Sous-cat√©gorie: ${verification.subCategory?.name}`);
    console.log(`       ‚îî‚îÄ‚îÄ Variation: ${verification.variation?.name}`);
    console.log(`           ‚îî‚îÄ‚îÄ Produit: ${verification.name}`);
    console.log(`               ‚Ä¢ Prix: ‚Ç¨${verification.price}`);
    console.log(`               ‚Ä¢ Stock: ${verification.stock} unit√©s`);
    console.log(`               ‚Ä¢ Couleurs: ${verification.colorVariations.map(c => c.name).join(', ')}`);
    console.log(`               ‚Ä¢ Tailles: ${verification.sizes.map(s => s.sizeName).join(', ')}`);

    // √âTAPE 6: TEST DE SUPPRESSION (DOIT √âCHOUER)
    console.log('\nüóëÔ∏è  TEST DE SUPPRESSION (V√âRIFICATION DES CONTRAINTES)');
    console.log('=======================================================');

    console.log('\n‚û°Ô∏è  TEST: Tentative de suppression de la variation "Robe Longue"');
    console.log(`   Cette variation est utilis√©e par: "${product1.name}"`);

    try {
      await prisma.variation.delete({ where: { id: variation1.id } });
      console.log('‚ùå ERREUR: La variation a √©t√© supprim√©e (contrainte non fonctionnelle !)');
    } catch (error) {
      console.log('‚úÖ SUCC√àS: La variation est PROT√âG√âE !');
      console.log(`   Erreur P2003: Foreign key constraint violated ‚úÖ`);
    }

    console.log('\n‚û°Ô∏è  TEST: Tentative de suppression de la sous-cat√©gorie "Robes"');
    console.log(`   Cette sous-cat√©gorie est utilis√©e par: "${product1.name}" et "${product2.name}"`);

    try {
      await prisma.subCategory.delete({ where: { id: subCategory.id } });
      console.log('‚ùå ERREUR: La sous-cat√©gorie a √©t√© supprim√©e (contrainte non fonctionnelle !)');
    } catch (error) {
      console.log('‚úÖ SUCC√àS: La sous-cat√©gorie est PROT√âG√âE !');
      console.log(`   Erreur P2003: Foreign key constraint violated ‚úÖ`);
    }

    console.log('\n‚û°Ô∏è  TEST: Tentative de suppression de la cat√©gorie "Mode Femme"');
    console.log(`   Cette cat√©gorie est utilis√©e par: "${product1.name}" et "${product2.name}"`);

    try {
      await prisma.category.delete({ where: { id: category.id } });
      console.log('‚ùå ERREUR: La cat√©gorie a √©t√© supprim√©e (contrainte non fonctionnelle !)');
    } catch (error) {
      console.log('‚úÖ SUCC√àS: La cat√©gorie est PROT√âG√âE !');
      console.log(`   Erreur P2003: Foreign key constraint violated ‚úÖ`);
    }

    // √âTAPE 7: Nettoyage propre
    console.log('\nüßπ Nettoyage des donn√©es de test');
    await prisma.product.delete({ where: { id: product1.id } });
    await prisma.product.delete({ where: { id: product2.id } });
    await prisma.variation.delete({ where: { id: variation1.id } });
    await prisma.variation.delete({ where: { id: variation2.id } });
    await prisma.subCategory.delete({ where: { id: subCategory.id } });
    await prisma.category.delete({ where: { id: category.id } });
    console.log('‚úÖ Nettoyage termin√© avec succ√®s');

    // CONCLUSION
    console.log('\nüéØ CONCLUSION FINALE');
    console.log('===================');
    console.log('‚úÖ Cr√©ation d\'une hi√©rarchie compl√®te r√©ussie');
    console.log('‚úÖ Contraintes de suppression v√©rifi√©es');
    console.log('‚úÖ Syst√®me prot√©g√© contre les suppressions incorrectes');
    console.log('\nüìã R√âSULTAT:');
    console.log('   ‚Ä¢ Les entit√©s utilis√©es par des produits ne peuvent PAS √™tre supprim√©es');
    console.log('   ‚Ä¢ L\'int√©grit√© des donn√©es est garantie');
    console.log('   ‚Ä¢ Le nettoyage s√©quentiel fonctionne correctement');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testFinalCreation().catch(console.error);