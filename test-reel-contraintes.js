const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testReelContraintes() {
  console.log('üéØ TEST R√âEL : CR√âATION DE PRODUIT + TEST SUPPRESSION HI√âRARCHIE\n');

  try {
    // √âTAPE 1: Cr√©er une hi√©rarchie compl√®te comme dans l'application r√©elle
    console.log('üìÅ √âTAPE 1: Cr√©ation de la hi√©rarchie de cat√©gories');

    const category = await prisma.category.create({
      data: {
        name: 'V√™tements Test Contrainte',
        slug: 'vetements-test-contrainte',
        description: 'Cat√©gorie principale pour les v√™tements - test contraintes',
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Cat√©gorie cr√©√©e: "${category.name}" (ID: ${category.id})`);

    const subCategory = await prisma.subCategory.create({
      data: {
        name: 'T-shirts Test Contrainte',
        slug: 't-shirts-test-contrainte',
        description: 'Sous-cat√©gorie pour les t-shirts - test contraintes',
        categoryId: category.id,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Sous-cat√©gorie cr√©√©e: "${subCategory.name}" (ID: ${subCategory.id})`);

    const variation = await prisma.variation.create({
      data: {
        name: 'Col Rond Test Contrainte',
        slug: 'col-rond-test-contrainte',
        description: 'T-shirts avec col rond - test contraintes',
        subCategoryId: subCategory.id,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Variation cr√©√©e: "${variation.name}" (ID: ${variation.id})`);

    console.log('\nüìä Hi√©rarchie compl√®te cr√©√©e:');
    console.log(`   ${category.name} ‚Üí ${subCategory.name} ‚Üí ${variation.name}`);

    // √âTAPE 2: Cr√©er un produit r√©el avec toutes les caract√©ristiques
    console.log('\nüì¶ √âTAPE 2: Cr√©ation d\'un produit complet');

    const product = await prisma.product.create({
      data: {
        name: 'T-shirt Col Rond Blanc Coton Bio',
        description: 'T-shirt confortable en coton biologique avec col rond. Id√©al pour le quotidien.',
        price: 24.99,
        stock: 150,
        status: 'PUBLISHED',
        genre: 'UNISEXE',
        categoryId: category.id,
        subCategoryId: subCategory.id,
        variationId: variation.id,
        colorVariations: {
          create: [
            {
              name: 'Blanc',
              colorCode: '#FFFFFF'
            },
            {
              name: 'Noir',
              colorCode: '#000000'
            }
          ]
        },
        sizes: {
          create: [
            { sizeName: 'S' },
            { sizeName: 'M' },
            { sizeName: 'L' },
            { sizeName: 'XL' }
          ]
        }
      },
      include: {
        category: true,
        subCategory: true,
        variation: true,
        colorVariations: true,
        sizes: true
      }
    });

    console.log(`‚úÖ Produit cr√©√©: "${product.name}" (ID: ${product.id})`);
    console.log(`   üí∞ Prix: ${product.price}‚Ç¨`);
    console.log(`   üì¶ Stock: ${product.stock} unit√©s`);
    console.log(`   üè∑Ô∏è  Cat√©gorie: ${product.category?.name}`);
    console.log(`   üìÇ Sous-cat√©gorie: ${product.subCategory?.name}`);
    console.log(`   üé® Variation: ${product.variation?.name}`);
    console.log(`   üåà Couleurs: ${product.colorVariations.map(c => c.name).join(', ')}`);
    console.log(`   üìè Tailles: ${product.sizes.map(s => s.sizeName).join(', ')}`);

    // √âTAPE 3: V√©rifier que le produit est correctement li√©
    console.log('\nüîç √âTAPE 3: V√©rification des liaisons du produit');

    const productVerification = await prisma.product.findUnique({
      where: { id: product.id },
      select: {
        id: true,
        name: true,
        categoryId: true,
        subCategoryId: true,
        variationId: true,
        _count: {
          select: {
            colorVariations: true,
            sizes: true
          }
        }
      }
    });

    console.log(`Produit "${productVerification.name}":`);
    console.log(`   üîó categoryId: ${productVerification.categoryId} (${productVerification.categoryId ? 'LI√â' : 'NON LI√â'})`);
    console.log(`   üîó subCategoryId: ${productVerification.subCategoryId} (${productVerification.subCategoryId ? 'LI√â' : 'NON LI√â'})`);
    console.log(`   üîó variationId: ${productVerification.variationId} (${productVerification.variationId ? 'LI√â' : 'NON LI√â'})`);
    console.log(`   üåà Variations couleur: ${productVerification._count.colorVariations}`);
    console.log(`   üìè Tailles: ${productVerification._count.sizes}`);

    // √âTAPE 4: TESTS DE SUPPRESSION - CAS D'USAGE R√âEL
    console.log('\nüóëÔ∏è  √âTAPE 4: TESTS DE SUPPRESSION (CAS D\'USAGE R√âEL)');
    console.log('================================================================');

    // Test 1: Essayer de supprimer la VARIATION utilis√©e par le produit
    console.log('\n‚û°Ô∏è  TEST 1: Suppression de la VARIATION "Col Rond"');
    console.log(`   Variance ID: ${variation.id}`);
    console.log(`   Utilis√©e par le produit ID: ${product.id} (${product.name})`);
    console.log(`   üîç R√àGLE M√âTIER: Une variation utilis√©e par un produit NE DEVRAIT PAS pouvoir √™tre supprim√©e`);

    try {
      const deletedVariation = await prisma.variation.delete({
        where: { id: variation.id }
      });
      console.log(`   ‚ùå üö® PROBL√àME GRAVE: Variation "${deletedVariation.name}" supprim√©e !`);
      console.log(`   ‚ùå Le produit va perdre sa classification de variation !`);

      // V√©rifier l'impact sur le produit
      const productAfterVariationDeletion = await prisma.product.findUnique({
        where: { id: product.id },
        select: {
          id: true,
          name: true,
          variationId: true,
          variation: { select: { name: true } }
        }
      });
      console.log(`   üìä √âtat du produit apr√®s suppression:`);
      console.log(`      - variationId: ${productAfterVariationDeletion.variationId} (devrait rester ${variation.id})`);
      console.log(`      - variation.name: ${productAfterVariationDeletion.variation?.name || 'NULL/PERDU'} (devrait √™tre "Col Rond")`);

    } catch (error) {
      console.log(`   ‚úÖ BON: La variation est prot√©g√©e !`);
      console.log(`   ‚úÖ Erreur: ${error.code} - ${error.message}`);
      console.log(`   ‚úÖ Le produit conserve sa classification de variation`);
    }

    // Test 2: Essayer de supprimer la SOUS-CAT√âGORIE utilis√©e par le produit
    console.log('\n‚û°Ô∏è  TEST 2: Suppression de la SOUS-CAT√âGORIE "T-shirts"');
    console.log(`   Sous-cat√©gorie ID: ${subCategory.id}`);
    console.log(`   Utilis√©e par le produit ID: ${product.id} (${product.name})`);
    console.log(`   üîç R√àGLE M√âTIER: Une sous-cat√©gorie utilis√©e par un produit NE DEVRAIT PAS pouvoir √™tre supprim√©e`);

    try {
      const deletedSubCategory = await prisma.subCategory.delete({
        where: { id: subCategory.id }
      });
      console.log(`   ‚ùå üö® PROBL√àME GRAVE: Sous-cat√©gorie "${deletedSubCategory.name}" supprim√©e !`);
      console.log(`   ‚ùå Le produit va perdre sa classification de sous-cat√©gorie !`);

      // V√©rifier l'impact sur le produit
      const productAfterSubCategoryDeletion = await prisma.product.findUnique({
        where: { id: product.id },
        select: {
          id: true,
          name: true,
          subCategoryId: true,
          subCategory: { select: { name: true } }
        }
      });
      console.log(`   üìä √âtat du produit apr√®s suppression:`);
      console.log(`      - subCategoryId: ${productAfterSubCategoryDeletion.subCategoryId} (devrait rester ${subCategory.id})`);
      console.log(`      - subCategory.name: ${productAfterSubCategoryDeletion.subCategory?.name || 'NULL/PERDU'} (devrait √™tre "T-shirts")`);

    } catch (error) {
      console.log(`   ‚úÖ BON: La sous-cat√©gorie est prot√©g√©e !`);
      console.log(`   ‚úÖ Erreur: ${error.code} - ${error.message}`);
      console.log(`   ‚úÖ Le produit conserve sa classification de sous-cat√©gorie`);
    }

    // Test 3: Essayer de supprimer la CAT√âGORIE utilis√©e par le produit
    console.log('\n‚û°Ô∏è  TEST 3: Suppression de la CAT√âGORIE "V√™tements"');
    console.log(`   Cat√©gorie ID: ${category.id}`);
    console.log(`   Utilis√©e par le produit ID: ${product.id} (${product.name})`);
    console.log(`   üîç R√àGLE M√âTIER: Une cat√©gorie utilis√©e par un produit NE DEVRAIT PAS pouvoir √™tre supprim√©e`);

    try {
      const deletedCategory = await prisma.category.delete({
        where: { id: category.id }
      });
      console.log(`   ‚ùå üö® PROBL√àME GRAVE: Cat√©gorie "${deletedCategory.name}" supprim√©e !`);
      console.log(`   ‚ùå Le produit va perdre sa classification de cat√©gorie !`);

      // V√©rifier l'impact sur le produit
      const productAfterCategoryDeletion = await prisma.product.findUnique({
        where: { id: product.id },
        select: {
          id: true,
          name: true,
          categoryId: true,
          category: { select: { name: true } }
        }
      });
      console.log(`   üìä √âtat du produit apr√®s suppression:`);
      console.log(`      - categoryId: ${productAfterCategoryDeletion.categoryId} (devrait rester ${category.id})`);
      console.log(`      - category.name: ${productAfterCategoryDeletion.category?.name || 'NULL/PERDU'} (devrait √™tre "V√™tements")`);

    } catch (error) {
      console.log(`   ‚úÖ BON: La cat√©gorie est prot√©g√©e !`);
      console.log(`   ‚úÖ Erreur: ${error.code} - ${error.message}`);
      console.log(`   ‚úÖ Le produit conserve sa classification de cat√©gorie`);
    }

    // √âTAPE 5: Nettoyage manuel (simulation du processus correct)
    console.log('\nüßπ √âTAPE 5: NETTOYAGE MANUEL (PROCESSUS CORRECT)');
    console.log('Processus correct: Supprimer le produit DABORD, puis la hi√©rarchie');

    try {
      await prisma.product.delete({
        where: { id: product.id }
      });
      console.log('‚úÖ Produit supprim√© en premier (processus correct)');

      // Maintenant les entit√©s de la hi√©rarchie peuvent √™tre supprim√©es
      try {
        await prisma.variation.delete({ where: { id: variation.id } });
        console.log('‚úÖ Variation supprim√©e apr√®s suppression du produit');
      } catch (error) {
        console.log(`‚ÑπÔ∏è  Variation d√©j√† supprim√©e ou erreur: ${error.message}`);
      }

      try {
        await prisma.subCategory.delete({ where: { id: subCategory.id } });
        console.log('‚úÖ Sous-cat√©gorie supprim√©e');
      } catch (error) {
        console.log(`‚ÑπÔ∏è  Sous-cat√©gorie d√©j√† supprim√©e ou erreur: ${error.message}`);
      }

      try {
        await prisma.category.delete({ where: { id: category.id } });
        console.log('‚úÖ Cat√©gorie supprim√©e');
      } catch (error) {
        console.log(`‚ÑπÔ∏è  Cat√©gorie d√©j√† supprim√©e ou erreur: ${error.message}`);
      }

    } catch (error) {
      console.log(`‚ùå Erreur lors du nettoyage: ${error.message}`);
    }

    // CONCLUSION
    console.log('\nüéØ CONCLUSION DU TEST');
    console.log('===================');
    console.log('');
    console.log('üìã R√àGLES M√âTIER ATTENDUES:');
    console.log('   ‚Ä¢ Une variation utilis√©e par un produit ne doit PAS pouvoir √™tre supprim√©e');
    console.log('   ‚Ä¢ Une sous-cat√©gorie utilis√©e par un produit ne doit PAS pouvoir √™tre supprim√©e');
    console.log('   ‚Ä¢ Une cat√©gorie utilis√©e par un produit ne doit PAS pouvoir √™tre supprim√©e');
    console.log('');
    console.log('üö® SI LES TESTS 1-3 ONT R√âUSSI: PROBL√àME CRITIQUE DE S√âCURIT√â');
    console.log('‚úÖ SI LES TESTS 1-3 ONT √âCHOU√â: CONTRAINTES FONCTIONNELLES');
    console.log('');
    console.log('üí° SOLUTION: Ajouter "onDelete: Restrict" dans les relations Product');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test
testReelContraintes().catch(console.error);