const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');

const BASE_URL = 'http://localhost:3004';

// Configuration pour les tests
const config = {
  headers: {
    'Authorization': 'Bearer YOUR_ADMIN_TOKEN_HERE', // Remplacez par un vrai token admin
    'Content-Type': 'application/json'
  }
};

async function testThemesEndpoints() {
  console.log('üß™ Test des endpoints des th√®mes');
  console.log('================================\n');

  try {
    // 1. Test GET /themes - Liste des th√®mes
    console.log('1. Test GET /themes - Liste des th√®mes');
    console.log('----------------------------------------');
    
    const getThemesResponse = await axios.get(`${BASE_URL}/themes`, config);
    console.log('‚úÖ GET /themes r√©ussi');
    console.log('üìä Nombre de th√®mes:', getThemesResponse.data.data?.length || 0);
    console.log('üìã Pagination:', getThemesResponse.data.pagination);
    console.log('');

    // 2. Test POST /themes - Cr√©er un th√®me
    console.log('2. Test POST /themes - Cr√©er un th√®me');
    console.log('----------------------------------------');
    
    // Cr√©er un fichier de test temporaire
    const testImagePath = './test-theme-image.jpg';
    if (!fs.existsSync(testImagePath)) {
      const testImageBuffer = Buffer.from('fake theme image data');
      fs.writeFileSync(testImagePath, testImageBuffer);
    }

    const createThemeFormData = new FormData();
    createThemeFormData.append('name', 'Test Th√®me Manga');
    createThemeFormData.append('description', 'Th√®me de test pour les mangas et animes');
    createThemeFormData.append('category', 'anime');
    createThemeFormData.append('status', 'active');
    createThemeFormData.append('featured', 'false');
    createThemeFormData.append('coverImage', fs.createReadStream(testImagePath));

    const createThemeResponse = await axios.post(`${BASE_URL}/themes`, createThemeFormData, {
      headers: {
        ...createThemeFormData.getHeaders(),
        'Authorization': 'Bearer YOUR_ADMIN_TOKEN_HERE' // Remplacez par un vrai token
      }
    });

    console.log('‚úÖ POST /themes r√©ussi');
    console.log('üìã Th√®me cr√©√©:', createThemeResponse.data.data);
    const themeId = createThemeResponse.data.data.id;
    console.log('üÜî ID du th√®me cr√©√©:', themeId);
    console.log('');

    // 3. Test GET /themes/:id - D√©tails d'un th√®me
    console.log('3. Test GET /themes/:id - D√©tails d\'un th√®me');
    console.log('----------------------------------------------');
    
    const getThemeResponse = await axios.get(`${BASE_URL}/themes/${themeId}`, config);
    console.log('‚úÖ GET /themes/:id r√©ussi');
    console.log('üìã D√©tails du th√®me:', getThemeResponse.data.data);
    console.log('');

    // 4. Test PATCH /themes/:id - Modifier un th√®me
    console.log('4. Test PATCH /themes/:id - Modifier un th√®me');
    console.log('----------------------------------------------');
    
    const updateThemeFormData = new FormData();
    updateThemeFormData.append('name', 'Test Th√®me Manga Modifi√©');
    updateThemeFormData.append('description', 'Description mise √† jour du th√®me de test');
    updateThemeFormData.append('category', 'anime');
    updateThemeFormData.append('status', 'active');
    updateThemeFormData.append('featured', 'true');

    const updateThemeResponse = await axios.patch(`${BASE_URL}/themes/${themeId}`, updateThemeFormData, {
      headers: {
        ...updateThemeFormData.getHeaders(),
        'Authorization': 'Bearer YOUR_ADMIN_TOKEN_HERE' // Remplacez par un vrai token
      }
    });

    console.log('‚úÖ PATCH /themes/:id r√©ussi');
    console.log('üìã Th√®me modifi√©:', updateThemeResponse.data.data);
    console.log('');

    // 5. Test avec filtres
    console.log('5. Test GET /themes avec filtres');
    console.log('----------------------------------');
    
    const filteredResponse = await axios.get(`${BASE_URL}/themes?status=active&category=anime&limit=5`, config);
    console.log('‚úÖ GET /themes avec filtres r√©ussi');
    console.log('üìä Th√®mes filtr√©s:', filteredResponse.data.data?.length || 0);
    console.log('');

    // 6. Test DELETE /themes/:id - Supprimer un th√®me
    console.log('6. Test DELETE /themes/:id - Supprimer un th√®me');
    console.log('------------------------------------------------');
    
    const deleteThemeResponse = await axios.delete(`${BASE_URL}/themes/${themeId}`, config);
    console.log('‚úÖ DELETE /themes/:id r√©ussi');
    console.log('üìã R√©ponse:', deleteThemeResponse.data);
    console.log('');

    // 7. V√©rifier que le th√®me a bien √©t√© supprim√©
    console.log('7. V√©rification de la suppression');
    console.log('-----------------------------------');
    
    try {
      await axios.get(`${BASE_URL}/themes/${themeId}`, config);
      console.log('‚ùå ERREUR: Le th√®me existe encore');
    } catch (error) {
      if (error.response?.status === 404) {
        console.log('‚úÖ SUCC√àS: Le th√®me a bien √©t√© supprim√© (404 attendu)');
      } else {
        console.log('‚ùå ERREUR inattendue:', error.response?.status);
      }
    }

    console.log('\nüéâ Tous les tests des th√®mes sont pass√©s !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Le serveur n\'est pas d√©marr√©.');
      console.log('   - Lancez: npm run start:dev');
    } else if (error.response?.status === 401) {
      console.log('\nüí° Probl√®me d\'authentification.');
      console.log('   - Remplacez YOUR_ADMIN_TOKEN_HERE par un vrai token admin');
    } else if (error.response?.status === 400) {
      console.log('\nüí° Erreur 400 - V√©rifiez les donn√©es envoy√©es.');
      console.log('   - Regardez les d√©tails de l\'erreur ci-dessus');
    } else if (error.response?.status === 404) {
      console.log('\nüí° Endpoint non trouv√©.');
      console.log('   - V√©rifiez que les routes sont bien configur√©es');
    }
  }
}

async function testWithCurl() {
  console.log('\nüîÑ Commandes curl pour tester manuellement');
  console.log('===========================================\n');

  console.log('1. Lister les th√®mes:');
  console.log(`   curl -X GET ${BASE_URL}/themes \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN" \\');
  console.log('     -H "Content-Type: application/json"');
  console.log('');
  
  console.log('2. Cr√©er un th√®me:');
  console.log(`   curl -X POST ${BASE_URL}/themes \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN" \\');
  console.log('     -F "name=Manga Collection" \\');
  console.log('     -F "description=Th√®me d√©di√© aux mangas" \\');
  console.log('     -F "category=anime" \\');
  console.log('     -F "status=active" \\');
  console.log('     -F "featured=false" \\');
  console.log('     -F "coverImage=@/path/to/image.jpg"');
  console.log('');
  
  console.log('3. R√©cup√©rer un th√®me:');
  console.log(`   curl -X GET ${BASE_URL}/themes/1 \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN"');
  console.log('');
  
  console.log('4. Modifier un th√®me:');
  console.log(`   curl -X PATCH ${BASE_URL}/themes/1 \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN" \\');
  console.log('     -F "name=Manga Collection Updated" \\');
  console.log('     -F "description=Description mise √† jour" \\');
  console.log('     -F "featured=true"');
  console.log('');
  
  console.log('5. Supprimer un th√®me:');
  console.log(`   curl -X DELETE ${BASE_URL}/themes/1 \\`);
  console.log('     -H "Authorization: Bearer YOUR_TOKEN"');
}

function showExpectedResults() {
  console.log('\nüìã R√©sultats attendus');
  console.log('=====================\n');

  console.log('‚úÖ GET /themes doit retourner:');
  console.log('   {');
  console.log('     "success": true,');
  console.log('     "data": [');
  console.log('       {');
  console.log('         "id": 1,');
  console.log('         "name": "Manga Collection",');
  console.log('         "description": "Th√®me d√©di√© aux mangas",');
  console.log('         "coverImage": "https://res.cloudinary.com/...",');
  console.log('         "productCount": 0,');
  console.log('         "status": "active",');
  console.log('         "category": "anime",');
  console.log('         "featured": false');
  console.log('       }');
  console.log('     ],');
  console.log('     "pagination": {');
  console.log('       "total": 1,');
  console.log('       "limit": 20,');
  console.log('       "offset": 0,');
  console.log('       "hasMore": false');
  console.log('     }');
  console.log('   }');
  console.log('');
  
  console.log('‚úÖ POST /themes doit retourner:');
  console.log('   {');
  console.log('     "success": true,');
  console.log('     "data": { ... },');
  console.log('     "message": "Th√®me cr√©√© avec succ√®s"');
  console.log('   }');
}

// Ex√©cution des tests
async function runAllTests() {
  await testThemesEndpoints();
  testWithCurl();
  showExpectedResults();
}

// Instructions d'utilisation
console.log('üìã Instructions pour utiliser ce script:');
console.log('1. Assurez-vous que le serveur backend est d√©marr√© sur http://localhost:3004');
console.log('2. Remplacez YOUR_ADMIN_TOKEN_HERE par un vrai token admin');
console.log('3. Ex√©cutez: node test-themes.js\n');

// D√©commentez la ligne suivante pour ex√©cuter les tests
// runAllTests();

module.exports = {
  testThemesEndpoints,
  testWithCurl,
  runAllTests
}; 