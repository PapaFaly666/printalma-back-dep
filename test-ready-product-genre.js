const axios = require('axios');

const BASE_URL = 'http://localhost:3004';
const ADMIN_TOKEN = 'your-admin-token-here'; // √Ä remplacer par un vrai token admin

async function testReadyProductGenre() {
  console.log('üß™ Test du champ genre avec les produits pr√™ts\n');

  try {
    // Test 1: Cr√©er un produit pr√™t avec genre
    console.log('1Ô∏è‚É£ Test cr√©ation produit pr√™t avec genre...');
    const productData = {
      name: 'T-shirt Homme Premium',
      description: 'T-shirt premium pour homme en coton bio',
      price: 12000,
      stock: 50,
      status: 'published',
      isReadyProduct: true,
      genre: 'HOMME', // ‚Üê NOUVEAU CHAMP
      categories: ['V√™tements > T-shirts'],
      sizes: ['S', 'M', 'L', 'XL'],
      colorVariations: [
        {
          name: 'Blanc',
          colorCode: '#FFFFFF',
          images: [
            {
              fileId: 'test-file-1',
              view: 'Front'
            }
          ]
        }
      ]
    };

    try {
      const response = await axios.post(`${BASE_URL}/products/ready`, productData, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });

      const createdProduct = response.data;
      console.log('‚úÖ Produit pr√™t cr√©√©:', {
        id: createdProduct.id,
        name: createdProduct.name,
        genre: createdProduct.genre,
        isReadyProduct: createdProduct.isReadyProduct
      });

      // Test 2: R√©cup√©rer le produit pr√™t par ID
      console.log('\n2Ô∏è‚É£ Test r√©cup√©ration produit pr√™t par ID...');
      const getResponse = await axios.get(`${BASE_URL}/products/ready/${createdProduct.id}`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Produit pr√™t r√©cup√©r√©:', {
        id: getResponse.data.id,
        name: getResponse.data.name,
        genre: getResponse.data.genre,
        isReadyProduct: getResponse.data.isReadyProduct
      });

      // Test 3: Mettre √† jour le genre
      console.log('\n3Ô∏è‚É£ Test mise √† jour du genre...');
      const updateResponse = await axios.patch(`${BASE_URL}/products/ready/${createdProduct.id}`, {
        genre: 'FEMME',
        name: 'T-shirt Femme Premium'
      }, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ Produit pr√™t mis √† jour:', {
        id: updateResponse.data.id,
        name: updateResponse.data.name,
        genre: updateResponse.data.genre
      });

      // Test 4: R√©cup√©rer tous les produits pr√™ts
      console.log('\n4Ô∏è‚É£ Test r√©cup√©ration tous les produits pr√™ts...');
      const allResponse = await axios.get(`${BASE_URL}/products/ready`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log(`‚úÖ Tous les produits pr√™ts: ${allResponse.data.products.length}`);

      // V√©rifier que le produit cr√©√© a le bon genre
      const ourProduct = allResponse.data.products.find(p => p.id === createdProduct.id);
      if (ourProduct) {
        console.log('‚úÖ Produit trouv√© dans la liste:', {
          id: ourProduct.id,
          name: ourProduct.name,
          genre: ourProduct.genre
        });
      }

      // Test 5: Nettoyer le produit de test
      console.log('\n5Ô∏è‚É£ Nettoyage du produit de test...');
      await axios.delete(`${BASE_URL}/products/ready/${createdProduct.id}`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Produit de test supprim√©');

    } catch (error) {
      console.log('‚ùå Erreur cr√©ation/mise √† jour:', error.response?.data || error.message);
    }

    console.log('\nüéâ Tests termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Test des erreurs de validation
async function testValidationErrors() {
  console.log('\nüß™ Test des erreurs de validation pour produits pr√™ts...\n');

  try {
    // Test 1: Genre invalide
    console.log('1Ô∏è‚É£ Test genre invalide...');
    const invalidGenreProduct = {
      name: 'Test Invalid Genre',
      description: 'Test avec genre invalide',
      price: 5000,
      isReadyProduct: true,
      genre: 'INVALID', // Genre invalide
      categories: ['Test'],
      colorVariations: []
    };

    try {
      await axios.post(`${BASE_URL}/products/ready`, invalidGenreProduct, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚ùå Erreur: Le genre invalide aurait d√ª √™tre rejet√©');
    } catch (error) {
      console.log('‚úÖ Genre invalide correctement rejet√©:', error.response?.status);
    }

    // Test 2: isReadyProduct = false (devrait √™tre accept√© pour les produits pr√™ts)
    console.log('\n2Ô∏è‚É£ Test isReadyProduct = false...');
    const falseReadyProduct = {
      name: 'Test Ready Product False',
      description: 'Test avec isReadyProduct = false',
      price: 5000,
      isReadyProduct: false, // Devrait √™tre accept√©
      genre: 'HOMME',
      categories: ['Test'],
      colorVariations: []
    };

    try {
      const response = await axios.post(`${BASE_URL}/products/ready`, falseReadyProduct, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ isReadyProduct = false accept√©:', response.data.isReadyProduct);
      
      // Nettoyer
      await axios.delete(`${BASE_URL}/products/ready/${response.data.id}`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
    } catch (error) {
      console.log('‚ùå isReadyProduct = false rejet√©:', error.response?.status);
    }

  } catch (error) {
    console.error('‚ùå Erreur tests de validation:', error.message);
  }
}

// Ex√©cuter les tests
async function runTests() {
  await testReadyProductGenre();
  await testValidationErrors();
}

runTests(); 

const BASE_URL = 'http://localhost:3004';
const ADMIN_TOKEN = 'your-admin-token-here'; // √Ä remplacer par un vrai token admin

async function testReadyProductGenre() {
  console.log('üß™ Test du champ genre avec les produits pr√™ts\n');

  try {
    // Test 1: Cr√©er un produit pr√™t avec genre
    console.log('1Ô∏è‚É£ Test cr√©ation produit pr√™t avec genre...');
    const productData = {
      name: 'T-shirt Homme Premium',
      description: 'T-shirt premium pour homme en coton bio',
      price: 12000,
      stock: 50,
      status: 'published',
      isReadyProduct: true,
      genre: 'HOMME', // ‚Üê NOUVEAU CHAMP
      categories: ['V√™tements > T-shirts'],
      sizes: ['S', 'M', 'L', 'XL'],
      colorVariations: [
        {
          name: 'Blanc',
          colorCode: '#FFFFFF',
          images: [
            {
              fileId: 'test-file-1',
              view: 'Front'
            }
          ]
        }
      ]
    };

    try {
      const response = await axios.post(`${BASE_URL}/products/ready`, productData, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });

      const createdProduct = response.data;
      console.log('‚úÖ Produit pr√™t cr√©√©:', {
        id: createdProduct.id,
        name: createdProduct.name,
        genre: createdProduct.genre,
        isReadyProduct: createdProduct.isReadyProduct
      });

      // Test 2: R√©cup√©rer le produit pr√™t par ID
      console.log('\n2Ô∏è‚É£ Test r√©cup√©ration produit pr√™t par ID...');
      const getResponse = await axios.get(`${BASE_URL}/products/ready/${createdProduct.id}`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Produit pr√™t r√©cup√©r√©:', {
        id: getResponse.data.id,
        name: getResponse.data.name,
        genre: getResponse.data.genre,
        isReadyProduct: getResponse.data.isReadyProduct
      });

      // Test 3: Mettre √† jour le genre
      console.log('\n3Ô∏è‚É£ Test mise √† jour du genre...');
      const updateResponse = await axios.patch(`${BASE_URL}/products/ready/${createdProduct.id}`, {
        genre: 'FEMME',
        name: 'T-shirt Femme Premium'
      }, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ Produit pr√™t mis √† jour:', {
        id: updateResponse.data.id,
        name: updateResponse.data.name,
        genre: updateResponse.data.genre
      });

      // Test 4: R√©cup√©rer tous les produits pr√™ts
      console.log('\n4Ô∏è‚É£ Test r√©cup√©ration tous les produits pr√™ts...');
      const allResponse = await axios.get(`${BASE_URL}/products/ready`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log(`‚úÖ Tous les produits pr√™ts: ${allResponse.data.products.length}`);

      // V√©rifier que le produit cr√©√© a le bon genre
      const ourProduct = allResponse.data.products.find(p => p.id === createdProduct.id);
      if (ourProduct) {
        console.log('‚úÖ Produit trouv√© dans la liste:', {
          id: ourProduct.id,
          name: ourProduct.name,
          genre: ourProduct.genre
        });
      }

      // Test 5: Nettoyer le produit de test
      console.log('\n5Ô∏è‚É£ Nettoyage du produit de test...');
      await axios.delete(`${BASE_URL}/products/ready/${createdProduct.id}`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Produit de test supprim√©');

    } catch (error) {
      console.log('‚ùå Erreur cr√©ation/mise √† jour:', error.response?.data || error.message);
    }

    console.log('\nüéâ Tests termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Test des erreurs de validation
async function testValidationErrors() {
  console.log('\nüß™ Test des erreurs de validation pour produits pr√™ts...\n');

  try {
    // Test 1: Genre invalide
    console.log('1Ô∏è‚É£ Test genre invalide...');
    const invalidGenreProduct = {
      name: 'Test Invalid Genre',
      description: 'Test avec genre invalide',
      price: 5000,
      isReadyProduct: true,
      genre: 'INVALID', // Genre invalide
      categories: ['Test'],
      colorVariations: []
    };

    try {
      await axios.post(`${BASE_URL}/products/ready`, invalidGenreProduct, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚ùå Erreur: Le genre invalide aurait d√ª √™tre rejet√©');
    } catch (error) {
      console.log('‚úÖ Genre invalide correctement rejet√©:', error.response?.status);
    }

    // Test 2: isReadyProduct = false (devrait √™tre accept√© pour les produits pr√™ts)
    console.log('\n2Ô∏è‚É£ Test isReadyProduct = false...');
    const falseReadyProduct = {
      name: 'Test Ready Product False',
      description: 'Test avec isReadyProduct = false',
      price: 5000,
      isReadyProduct: false, // Devrait √™tre accept√©
      genre: 'HOMME',
      categories: ['Test'],
      colorVariations: []
    };

    try {
      const response = await axios.post(`${BASE_URL}/products/ready`, falseReadyProduct, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ isReadyProduct = false accept√©:', response.data.isReadyProduct);
      
      // Nettoyer
      await axios.delete(`${BASE_URL}/products/ready/${response.data.id}`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
    } catch (error) {
      console.log('‚ùå isReadyProduct = false rejet√©:', error.response?.status);
    }

  } catch (error) {
    console.error('‚ùå Erreur tests de validation:', error.message);
  }
}

// Ex√©cuter les tests
async function runTests() {
  await testReadyProductGenre();
  await testValidationErrors();
}

runTests(); 