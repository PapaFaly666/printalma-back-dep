const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testContraintesCorrigees() {
  console.log('üîß TEST DES CONTRAINTES APR√àS CORRECTION\n');

  try {
    // √âTAPE 1: Cr√©er une hi√©rarchie compl√®te
    console.log('üìÅ √âTAPE 1: Cr√©ation de la hi√©rarchie de test');

    const category = await prisma.category.create({
      data: {
        name: 'Cat√©gorie Test Corrig√©',
        slug: 'categorie-test-corrige',
        description: 'Test apr√®s correction des contraintes',
        displayOrder: 9999,
        isActive: true
      }
    });
    console.log(`‚úÖ Cat√©gorie cr√©√©e: "${category.name}" (ID: ${category.id})`);

    const subCategory = await prisma.subCategory.create({
      data: {
        name: 'Sous-cat√©gorie Test Corrig√©',
        slug: 'sous-categorie-test-corrige',
        description: 'Test apr√®s correction',
        categoryId: category.id,
        displayOrder: 9999,
        isActive: true
      }
    });
    console.log(`‚úÖ Sous-cat√©gorie cr√©√©e: "${subCategory.name}" (ID: ${subCategory.id})`);

    const variation = await prisma.variation.create({
      data: {
        name: 'Variation Test Corrig√©',
        slug: 'variation-test-corrige',
        description: 'Test apr√®s correction',
        subCategoryId: subCategory.id,
        displayOrder: 9999,
        isActive: true
      }
    });
    console.log(`‚úÖ Variation cr√©√©e: "${variation.name}" (ID: ${variation.id})`);

    // √âTAPE 2: Cr√©er un produit avec toutes les relations
    console.log('\nüì¶ √âTAPE 2: Cr√©ation d\'un produit avec la hi√©rarchie compl√®te');

    const product = await prisma.product.create({
      data: {
        name: 'Produit Test Contraintes Corrig√©es',
        description: 'Produit pour tester les contraintes apr√®s correction',
        price: 39.99,
        stock: 75,
        status: 'PUBLISHED',
        categoryId: category.id,
        subCategoryId: subCategory.id,
        variationId: variation.id,
        colorVariations: {
          create: {
            name: 'Rouge',
            colorCode: '#FF0000'
          }
        },
        sizes: {
          create: [
            { sizeName: 'S' },
            { sizeName: 'M' }
          ]
        }
      }
    });
    console.log(`‚úÖ Produit cr√©√©: "${product.name}" (ID: ${product.id})`);
    console.log(`   üè∑Ô∏è  Cat√©gorie: ${category.name} (ID: ${category.id})`);
    console.log(`   üìÇ Sous-cat√©gorie: ${subCategory.name} (ID: ${subCategory.id})`);
    console.log(`   üé® Variation: ${variation.name} (ID: ${variation.id})`);

    // V√©rification des liaisons
    const productVerification = await prisma.product.findUnique({
      where: { id: product.id },
      select: {
        id: true,
        name: true,
        categoryId: true,
        subCategoryId: true,
        variationId: true
      }
    });

    console.log('\nüîç V√©rification des liaisons:');
    console.log(`   categoryId: ${productVerification.categoryId} ‚úÖ`);
    console.log(`   subCategoryId: ${productVerification.subCategoryId} ‚úÖ`);
    console.log(`   variationId: ${productVerification.variationId} ‚úÖ`);

    // √âTAPE 3: TESTS DE SUPPRESSION (doivent √©chouer maintenant)
    console.log('\nüóëÔ∏è  √âTAPE 3: TESTS DE SUPPRESSION (doivent √©chouer)');
    console.log('=====================================================');

    // Test 1: Tenter de supprimer la variation
    console.log('\n‚û°Ô∏è  TEST 1: Suppression de la VARIATION');
    console.log(`   Tentative de suppression: "${variation.name}" utilis√©e par "${product.name}"`);
    console.log('   üö® ATTENDU: Doit √©chouer avec erreur de contrainte');

    try {
      await prisma.variation.delete({ where: { id: variation.id } });
      console.log('   ‚ùå √âCHEC DU TEST: La variation a √©t√© supprim√©e ! (PROBL√àME NON CORRIG√â)');

      // V√©rifier l'impact
      const productAfter = await prisma.product.findUnique({ where: { id: product.id } });
      console.log(`   üìä Impact: variationId = ${productAfter.variationId} (devrait √™tre ${variation.id})`);

    } catch (error) {
      console.log('   ‚úÖ SUCC√àS: La variation est PROT√âG√âE !');
      console.log(`   ‚úÖ Erreur: ${error.code}`);
      console.log(`   ‚úÖ Message: ${error.message.split('\n')[0]}`);
    }

    // Test 2: Tenter de supprimer la sous-cat√©gorie
    console.log('\n‚û°Ô∏è  TEST 2: Suppression de la SOUS-CAT√âGORIE');
    console.log(`   Tentative de suppression: "${subCategory.name}" utilis√©e par "${product.name}"`);
    console.log('   üö® ATTENDU: Doit √©chouer avec erreur de contrainte');

    try {
      await prisma.subCategory.delete({ where: { id: subCategory.id } });
      console.log('   ‚ùå √âCHEC DU TEST: La sous-cat√©gorie a √©t√© supprim√©e ! (PROBL√àME NON CORRIG√â)');

      // V√©rifier l'impact
      const productAfter = await prisma.product.findUnique({ where: { id: product.id } });
      console.log(`   üìä Impact: subCategoryId = ${productAfter.subCategoryId} (devrait √™tre ${subCategory.id})`);

    } catch (error) {
      console.log('   ‚úÖ SUCC√àS: La sous-cat√©gorie est PROT√âG√âE !');
      console.log(`   ‚úÖ Erreur: ${error.code}`);
      console.log(`   ‚úÖ Message: ${error.message.split('\n')[0]}`);
    }

    // Test 3: Tenter de supprimer la cat√©gorie
    console.log('\n‚û°Ô∏è  TEST 3: Suppression de la CAT√âGORIE');
    console.log(`   Tentative de suppression: "${category.name}" utilis√©e par "${product.name}"`);
    console.log('   üö® ATTENDU: Doit √©chouer avec erreur de contrainte');

    try {
      await prisma.category.delete({ where: { id: category.id } });
      console.log('   ‚ùå √âCHEC DU TEST: La cat√©gorie a √©t√© supprim√©e ! (PROBL√àME NON CORRIG√â)');

      // V√©rifier l'impact
      const productAfter = await prisma.product.findUnique({ where: { id: product.id } });
      console.log(`   üìä Impact: categoryId = ${productAfter.categoryId} (devrait √™tre ${category.id})`);

    } catch (error) {
      console.log('   ‚úÖ SUCC√àS: La cat√©gorie est PROT√âG√âE !');
      console.log(`   ‚úÖ Erreur: ${error.code}`);
      console.log(`   ‚úÖ Message: ${error.message.split('\n')[0]}`);
    }

    // √âTAPE 4: Test de suppression correct (produit d'abord)
    console.log('\nüßπ √âTAPE 4: Test de suppression CORRECTE');
    console.log('   Processus: Produit ‚Üí Variation ‚Üí Sous-cat√©gorie ‚Üí Cat√©gorie');

    try {
      // Supprimer le produit en premier
      await prisma.product.delete({ where: { id: product.id } });
      console.log('‚úÖ Produit supprim√© (√©tape 1/4)');

      // Maintenant la variation peut √™tre supprim√©e
      await prisma.variation.delete({ where: { id: variation.id } });
      console.log('‚úÖ Variation supprim√©e (√©tape 2/4)');

      // Puis la sous-cat√©gorie
      await prisma.subCategory.delete({ where: { id: subCategory.id } });
      console.log('‚úÖ Sous-cat√©gorie supprim√©e (√©tape 3/4)');

      // Et enfin la cat√©gorie
      await prisma.category.delete({ where: { id: category.id } });
      console.log('‚úÖ Cat√©gorie supprim√©e (√©tape 4/4)');

      console.log('\nüéâ NETTOYAGE COMPLET R√âUSSI !');

    } catch (error) {
      console.log(`‚ùå Erreur lors du nettoyage: ${error.message}`);
    }

    // CONCLUSION FINALE
    console.log('\nüéØ CONCLUSION FINALE DE LA CORRECTION');
    console.log('=====================================');
    console.log('');
    console.log('‚úÖ TOUS LES TESTS DEVRAIENT AVOIR √âCHOU√â (suppressions prot√©g√©es)');
    console.log('‚úÖ SEUL LE NETTOYAGE S√âQUENTIEL DEVRAIT AVOIR R√âUSSI');
    console.log('');
    console.log('üîß CORRECTION APPLIQU√âE:');
    console.log('   - category: onDelete: Restrict');
    console.log('   - subCategory: onDelete: Restrict');
    console.log('   - variation: onDelete: Restrict');
    console.log('');
    console.log('üìã R√âSULTAT ATTENDU:');
    console.log('   Aucune entit√© utilis√©e par un produit ne peut √™tre supprim√©e');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testContraintesCorrigees().catch(console.error);