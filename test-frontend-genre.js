const axios = require('axios');

const BASE_URL = 'http://localhost:3004';
const ADMIN_TOKEN = 'your-admin-token-here'; // √Ä remplacer par un vrai token admin

async function testFrontendGenre() {
  console.log('üß™ Test des endpoints genre pour le frontend\n');

  try {
    // Test 1: R√©cup√©rer les genres disponibles
    console.log('1Ô∏è‚É£ Test r√©cup√©ration des genres disponibles...');
    try {
      const genresResponse = await axios.get(`${BASE_URL}/mockups/genres`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Genres disponibles:', genresResponse.data);
    } catch (error) {
      console.log('‚ùå Erreur r√©cup√©ration genres:', error.response?.data || error.message);
    }

    // Test 2: Cr√©er un mockup avec genre
    console.log('\n2Ô∏è‚É£ Test cr√©ation mockup avec genre...');
    const mockupData = {
      name: 'T-shirt Test Frontend',
      description: 'Test pour le frontend avec genre',
      price: 5000,
      status: 'draft',
      isReadyProduct: false,
      genre: 'HOMME',
      categories: ['Test'],
      sizes: ['M'],
      colorVariations: [
        {
          name: 'Blanc',
          colorCode: '#FFFFFF',
          images: [
            {
              view: 'Front',
              delimitations: [
                {
                  x: 10,
                  y: 10,
                  width: 80,
                  height: 80,
                  name: 'Zone test'
                }
              ]
            }
          ]
        }
      ]
    };

    try {
      const createResponse = await axios.post(`${BASE_URL}/mockups`, mockupData, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      
      const createdMockup = createResponse.data;
      console.log('‚úÖ Mockup cr√©√©:', {
        id: createdMockup.id,
        name: createdMockup.name,
        genre: createdMockup.genre,
        isReadyProduct: createdMockup.isReadyProduct
      });

      // Test 3: R√©cup√©rer le mockup par ID
      console.log('\n3Ô∏è‚É£ Test r√©cup√©ration mockup par ID...');
      const getResponse = await axios.get(`${BASE_URL}/mockups/${createdMockup.id}`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Mockup r√©cup√©r√©:', {
        id: getResponse.data.id,
        name: getResponse.data.name,
        genre: getResponse.data.genre
      });

      // Test 4: Mettre √† jour le genre
      console.log('\n4Ô∏è‚É£ Test mise √† jour du genre...');
      const updateResponse = await axios.patch(`${BASE_URL}/mockups/${createdMockup.id}`, {
        genre: 'FEMME',
        name: 'T-shirt Test Frontend - Femme'
      }, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ Mockup mis √† jour:', {
        id: updateResponse.data.id,
        name: updateResponse.data.name,
        genre: updateResponse.data.genre
      });

      // Test 5: R√©cup√©rer par genre
      console.log('\n5Ô∏è‚É£ Test r√©cup√©ration par genre...');
      const genreResponse = await axios.get(`${BASE_URL}/mockups/by-genre/FEMME`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log(`‚úÖ Mockups FEMME trouv√©s: ${genreResponse.data.length}`);

      // Test 6: R√©cup√©rer tous les mockups
      console.log('\n6Ô∏è‚É£ Test r√©cup√©ration tous les mockups...');
      const allResponse = await axios.get(`${BASE_URL}/mockups`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log(`‚úÖ Tous les mockups: ${allResponse.data.length}`);

      // Test 7: Filtrage par genre
      console.log('\n7Ô∏è‚É£ Test filtrage par genre...');
      const filterResponse = await axios.get(`${BASE_URL}/mockups?genre=HOMME`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log(`‚úÖ Mockups filtr√©s HOMME: ${filterResponse.data.length}`);

      // Nettoyer le mockup de test
      console.log('\n8Ô∏è‚É£ Nettoyage du mockup de test...');
      await axios.delete(`${BASE_URL}/mockups/${createdMockup.id}`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Mockup de test supprim√©');

    } catch (error) {
      console.log('‚ùå Erreur cr√©ation/mise √† jour:', error.response?.data || error.message);
    }

    console.log('\nüéâ Tests termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Test des erreurs de validation
async function testValidationErrors() {
  console.log('\nüß™ Test des erreurs de validation...\n');

  try {
    // Test 1: Genre invalide
    console.log('1Ô∏è‚É£ Test genre invalide...');
    const invalidGenreMockup = {
      name: 'Test Invalid Genre',
      description: 'Test avec genre invalide',
      price: 5000,
      isReadyProduct: false,
      genre: 'INVALID', // Genre invalide
      categories: ['Test'],
      colorVariations: []
    };

    try {
      await axios.post(`${BASE_URL}/mockups`, invalidGenreMockup, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚ùå Erreur: Le genre invalide aurait d√ª √™tre rejet√©');
    } catch (error) {
      console.log('‚úÖ Genre invalide correctement rejet√©:', error.response?.status);
    }

    // Test 2: isReadyProduct = true (interdit pour les mockups)
    console.log('\n2Ô∏è‚É£ Test isReadyProduct = true (interdit)...');
    const invalidReadyProductMockup = {
      name: 'Test Ready Product',
      description: 'Test avec isReadyProduct = true',
      price: 5000,
      isReadyProduct: true, // Interdit pour les mockups
      genre: 'HOMME',
      categories: ['Test'],
      colorVariations: []
    };

    try {
      await axios.post(`${BASE_URL}/mockups`, invalidReadyProductMockup, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚ùå Erreur: isReadyProduct = true aurait d√ª √™tre rejet√©');
    } catch (error) {
      console.log('‚úÖ isReadyProduct = true correctement rejet√©:', error.response?.status);
    }

  } catch (error) {
    console.error('‚ùå Erreur tests de validation:', error.message);
  }
}

// Ex√©cuter les tests
async function runTests() {
  await testFrontendGenre();
  await testValidationErrors();
}

runTests(); 

const BASE_URL = 'http://localhost:3004';
const ADMIN_TOKEN = 'your-admin-token-here'; // √Ä remplacer par un vrai token admin

async function testFrontendGenre() {
  console.log('üß™ Test des endpoints genre pour le frontend\n');

  try {
    // Test 1: R√©cup√©rer les genres disponibles
    console.log('1Ô∏è‚É£ Test r√©cup√©ration des genres disponibles...');
    try {
      const genresResponse = await axios.get(`${BASE_URL}/mockups/genres`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Genres disponibles:', genresResponse.data);
    } catch (error) {
      console.log('‚ùå Erreur r√©cup√©ration genres:', error.response?.data || error.message);
    }

    // Test 2: Cr√©er un mockup avec genre
    console.log('\n2Ô∏è‚É£ Test cr√©ation mockup avec genre...');
    const mockupData = {
      name: 'T-shirt Test Frontend',
      description: 'Test pour le frontend avec genre',
      price: 5000,
      status: 'draft',
      isReadyProduct: false,
      genre: 'HOMME',
      categories: ['Test'],
      sizes: ['M'],
      colorVariations: [
        {
          name: 'Blanc',
          colorCode: '#FFFFFF',
          images: [
            {
              view: 'Front',
              delimitations: [
                {
                  x: 10,
                  y: 10,
                  width: 80,
                  height: 80,
                  name: 'Zone test'
                }
              ]
            }
          ]
        }
      ]
    };

    try {
      const createResponse = await axios.post(`${BASE_URL}/mockups`, mockupData, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      
      const createdMockup = createResponse.data;
      console.log('‚úÖ Mockup cr√©√©:', {
        id: createdMockup.id,
        name: createdMockup.name,
        genre: createdMockup.genre,
        isReadyProduct: createdMockup.isReadyProduct
      });

      // Test 3: R√©cup√©rer le mockup par ID
      console.log('\n3Ô∏è‚É£ Test r√©cup√©ration mockup par ID...');
      const getResponse = await axios.get(`${BASE_URL}/mockups/${createdMockup.id}`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Mockup r√©cup√©r√©:', {
        id: getResponse.data.id,
        name: getResponse.data.name,
        genre: getResponse.data.genre
      });

      // Test 4: Mettre √† jour le genre
      console.log('\n4Ô∏è‚É£ Test mise √† jour du genre...');
      const updateResponse = await axios.patch(`${BASE_URL}/mockups/${createdMockup.id}`, {
        genre: 'FEMME',
        name: 'T-shirt Test Frontend - Femme'
      }, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ Mockup mis √† jour:', {
        id: updateResponse.data.id,
        name: updateResponse.data.name,
        genre: updateResponse.data.genre
      });

      // Test 5: R√©cup√©rer par genre
      console.log('\n5Ô∏è‚É£ Test r√©cup√©ration par genre...');
      const genreResponse = await axios.get(`${BASE_URL}/mockups/by-genre/FEMME`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log(`‚úÖ Mockups FEMME trouv√©s: ${genreResponse.data.length}`);

      // Test 6: R√©cup√©rer tous les mockups
      console.log('\n6Ô∏è‚É£ Test r√©cup√©ration tous les mockups...');
      const allResponse = await axios.get(`${BASE_URL}/mockups`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log(`‚úÖ Tous les mockups: ${allResponse.data.length}`);

      // Test 7: Filtrage par genre
      console.log('\n7Ô∏è‚É£ Test filtrage par genre...');
      const filterResponse = await axios.get(`${BASE_URL}/mockups?genre=HOMME`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log(`‚úÖ Mockups filtr√©s HOMME: ${filterResponse.data.length}`);

      // Nettoyer le mockup de test
      console.log('\n8Ô∏è‚É£ Nettoyage du mockup de test...');
      await axios.delete(`${BASE_URL}/mockups/${createdMockup.id}`, {
        headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` }
      });
      console.log('‚úÖ Mockup de test supprim√©');

    } catch (error) {
      console.log('‚ùå Erreur cr√©ation/mise √† jour:', error.response?.data || error.message);
    }

    console.log('\nüéâ Tests termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Test des erreurs de validation
async function testValidationErrors() {
  console.log('\nüß™ Test des erreurs de validation...\n');

  try {
    // Test 1: Genre invalide
    console.log('1Ô∏è‚É£ Test genre invalide...');
    const invalidGenreMockup = {
      name: 'Test Invalid Genre',
      description: 'Test avec genre invalide',
      price: 5000,
      isReadyProduct: false,
      genre: 'INVALID', // Genre invalide
      categories: ['Test'],
      colorVariations: []
    };

    try {
      await axios.post(`${BASE_URL}/mockups`, invalidGenreMockup, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚ùå Erreur: Le genre invalide aurait d√ª √™tre rejet√©');
    } catch (error) {
      console.log('‚úÖ Genre invalide correctement rejet√©:', error.response?.status);
    }

    // Test 2: isReadyProduct = true (interdit pour les mockups)
    console.log('\n2Ô∏è‚É£ Test isReadyProduct = true (interdit)...');
    const invalidReadyProductMockup = {
      name: 'Test Ready Product',
      description: 'Test avec isReadyProduct = true',
      price: 5000,
      isReadyProduct: true, // Interdit pour les mockups
      genre: 'HOMME',
      categories: ['Test'],
      colorVariations: []
    };

    try {
      await axios.post(`${BASE_URL}/mockups`, invalidReadyProductMockup, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚ùå Erreur: isReadyProduct = true aurait d√ª √™tre rejet√©');
    } catch (error) {
      console.log('‚úÖ isReadyProduct = true correctement rejet√©:', error.response?.status);
    }

  } catch (error) {
    console.error('‚ùå Erreur tests de validation:', error.message);
  }
}

// Ex√©cuter les tests
async function runTests() {
  await testFrontendGenre();
  await testValidationErrors();
}

runTests(); 