const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testDeleteProtection() {
  console.log('üß™ Test de protection contre la suppression...\n');

  try {
    // 1. Trouver une sous-cat√©gorie avec des variations
    console.log('1Ô∏è‚É£ Recherche d\'une sous-cat√©gorie avec des variations...');
    const subCategoryWithVariations = await prisma.subCategory.findFirst({
      where: {
        isActive: true,
        variations: {
          some: {
            isActive: true
          }
        }
      },
      include: {
        variations: {
          where: { isActive: true },
          include: {
            _count: {
              select: {
                products: {
                  where: {
                    isDelete: false
                  }
                }
              }
            }
          }
        },
        _count: {
          select: {
            products: {
              where: {
                isDelete: false
              }
            }
          }
        }
      }
    });

    if (!subCategoryWithVariations) {
      console.log('‚ùå Aucune sous-cat√©gorie avec variations trouv√©e');
      return;
    }

    console.log(`‚úÖ Sous-cat√©gorie trouv√©e: ${subCategoryWithVariations.name} (ID: ${subCategoryWithVariations.id})`);
    console.log(`   - Variations: ${subCategoryWithVariations.variations.length}`);
    console.log(`   - Produits directs: ${subCategoryWithVariations._count.products}`);

    // Afficher les d√©tails des variations
    for (const variation of subCategoryWithVariations.variations) {
      console.log(`   - Variation: ${variation.name} (ID: ${variation.id}) - ${variation._count.products} produit(s)`);
    }

    // 2. Test de suppression de la sous-cat√©gorie (devrait √©chouer)
    console.log('\n2Ô∏è‚É£ Test de suppression de la sous-cat√©gorie (devrait √©chouer)...');
    try {
      await prisma.subCategory.delete({
        where: { id: subCategoryWithVariations.id }
      });
      console.log('‚ùå ERREUR: La sous-cat√©gorie a √©t√© supprim√©e !');
    } catch (error) {
      console.log('‚úÖ Succ√®s: La sous-cat√©gorie est prot√©g√©e contre la suppression');
      console.log(`   Message: ${error.message}`);
    }

    // 3. Test de suppression d'une variation avec produits (devrait √©chouer)
    const variationWithProducts = subCategoryWithVariations.variations.find(v => v._count.products > 0);
    if (variationWithProducts) {
      console.log('\n3Ô∏è‚É£ Test de suppression d\'une variation avec produits (devrait √©chouer)...');
      try {
        await prisma.variation.delete({
          where: { id: variationWithProducts.id }
        });
        console.log('‚ùå ERREUR: La variation a √©t√© supprim√©e !');
      } catch (error) {
        console.log('‚úÖ Succ√®s: La variation est prot√©g√©e contre la suppression');
        console.log(`   Message: ${error.message}`);
      }
    } else {
      console.log('\n3Ô∏è‚É£ Aucune variation avec des produits trouv√©e pour tester');
    }

    // 4. Test de suppression d'une variation sans produits (devrait r√©ussir)
    const variationWithoutProducts = subCategoryWithVariations.variations.find(v => v._count.products === 0);
    if (variationWithoutProducts) {
      console.log('\n4Ô∏è‚É£ Test de suppression d\'une variation sans produits (devrait r√©ussir)...');
      try {
        await prisma.variation.delete({
          where: { id: variationWithoutProducts.id }
        });
        console.log('‚úÖ Succ√®s: La variation sans produits a √©t√© supprim√©e');
      } catch (error) {
        console.log('‚ö†Ô∏è  La suppression a √©chou√© (peut-√™tre d√ª √† d\'autres contraintes)');
        console.log(`   Message: ${error.message}`);
      }
    } else {
      console.log('\n4Ô∏è‚É£ Aucune variation sans produits trouv√©e pour tester');
    }

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testDeleteProtection();