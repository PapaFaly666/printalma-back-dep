const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testAnalyseCompleteContraintes() {
  console.log('üîç ANALYSE COMPL√àTE DES CONTRAINTES DE SUPPRESSION\n');

  try {
    // √âTAPE 1: Analyser la structure existante
    console.log('üìä √âTAPE 1: Analyse des donn√©es existantes');

    const categories = await prisma.category.findMany({
      include: {
        subCategories: {
          include: {
            variations: true,
            products: true
          }
        },
        directProducts: true,
        products: true
      }
    });

    console.log(`Trouv√© ${categories.length} cat√©gories:`);

    for (const cat of categories.slice(0, 3)) {
      console.log(`\nüìÅ Cat√©gorie: "${cat.name}" (ID: ${cat.id})`);
      console.log(`   - Sous-cat√©gories: ${cat.subCategories.length}`);
      console.log(`   - Produits directs (relation directProducts): ${cat.directProducts.length}`);
      console.log(`   - Produits (relation products): ${cat.products.length}`);

      // Analyser les sous-cat√©gories
      for (const subCat of cat.subCategories.slice(0, 2)) {
        console.log(`   üìÇ Sous-cat√©gorie: "${subCat.name}" (ID: ${subCat.id})`);
        console.log(`      - Variations: ${subCat.variations.length}`);
        console.log(`      - Produits: ${subCat.products.length}`);

        // Analyser les variations
        for (const variation of subCat.variations.slice(0, 2)) {
          console.log(`   üé® Variation: "${variation.name}" (ID: ${variation.id})`);
          const variationProducts = await prisma.product.count({
            where: { variationId: variation.id }
          });
          console.log(`      - Produits utilisant cette variation: ${variationProducts}`);
        }
      }
    }

    // √âTAPE 2: Test syst√©matique des suppressions
    console.log('\nüóëÔ∏è  √âTAPE 2: Tests syst√©matiques de suppression');

    // Cherchons une cat√©gorie avec diff√©rentes configurations
    let categoryToTest = null;
    let subCategoryToTest = null;
    let variationToTest = null;

    // Chercher une configuration avec tous les niveaux
    for (const cat of categories) {
      for (const subCat of cat.subCategories) {
        if (subCat.variations.length > 0 && subCat.products.length > 0) {
          const variation = subCat.variations[0];
          const variationProducts = await prisma.product.count({
            where: { variationId: variation.id }
          });

          if (variationProducts > 0) {
            categoryToTest = cat;
            subCategoryToTest = subCat;
            variationToTest = variation;
            break;
          }
        }
      }
      if (categoryToTest) break;
    }

    if (!categoryToTest) {
      console.log('‚ö†Ô∏è  Aucune configuration compl√®te trouv√©e. Cr√©ons des donn√©es de test...');

      // Cr√©er une hi√©rarchie compl√®te
      categoryToTest = await prisma.category.create({
        data: {
          name: 'Cat√©gorie Test Analyse',
          slug: 'categorie-test-analyse',
          description: 'Test analyse compl√®te',
          displayOrder: 9999,
          isActive: true
        }
      });

      subCategoryToTest = await prisma.subCategory.create({
        data: {
          name: 'Sous-cat√©gorie Test Analyse',
          slug: 'sous-categorie-test-analyse',
          description: 'Test analyse compl√®te',
          categoryId: categoryToTest.id,
          displayOrder: 9999,
          isActive: true
        }
      });

      variationToTest = await prisma.variation.create({
        data: {
          name: 'Variation Test Analyse',
          slug: 'variation-test-analyse',
          description: 'Test analyse compl√®te',
          subCategoryId: subCategoryToTest.id,
          displayOrder: 9999,
          isActive: true
        }
      });

      // Cr√©er des produits avec diff√©rentes relations
      console.log('üì¶ Cr√©ation de produits test...');

      // Produit 1: Toutes les relations
      const product1 = await prisma.product.create({
        data: {
          name: 'Produit Test Complet',
          description: 'Test avec toutes les relations',
          price: 29.99,
          stock: 50,
          status: 'PUBLISHED',
          categoryId: categoryToTest.id,
          subCategoryId: subCategoryToTest.id,
          variationId: variationToTest.id
        }
      });

      // Produit 2: Seulement cat√©gorie et sous-cat√©gorie
      const product2 = await prisma.product.create({
        data: {
          name: 'Produit Test Partiel',
          description: 'Test sans variation',
          price: 19.99,
          stock: 30,
          status: 'PUBLISHED',
          categoryId: categoryToTest.id,
          subCategoryId: subCategoryToTest.id
        }
      });

      // Produit 3: Seulement cat√©gorie
      const product3 = await prisma.product.create({
        data: {
          name: 'Produit Test Cat√©gorie Seule',
          description: 'Test avec seulement cat√©gorie',
          price: 15.99,
          stock: 20,
          status: 'PUBLISHED',
          categoryId: categoryToTest.id
        }
      });

      console.log(`‚úÖ 3 produits cr√©√©s avec diff√©rentes configurations`);
    }

    console.log(`\nüéØ Configuration de test trouv√©e/cr√©√©e:`);
    console.log(`   Cat√©gorie: "${categoryToTest.name}" (ID: ${categoryToTest.id})`);
    console.log(`   Sous-cat√©gorie: "${subCategoryToTest.name}" (ID: ${subCategoryToTest.id})`);
    console.log(`   Variation: "${variationToTest.name}" (ID: ${variationToTest.id})`);

    // Compter les produits li√©s
    const productsWithVariation = await prisma.product.count({
      where: { variationId: variationToTest.id }
    });
    const productsWithSubCategory = await prisma.product.count({
      where: { subCategoryId: subCategoryToTest.id }
    });
    const productsWithCategory = await prisma.product.count({
      where: { categoryId: categoryToTest.id }
    });

    console.log(`   Produits li√©s:`);
    console.log(`      - √Ä la variation: ${productsWithVariation}`);
    console.log(`      - √Ä la sous-cat√©gorie: ${productsWithSubCategory}`);
    console.log(`      - √Ä la cat√©gorie: ${productsWithCategory}`);

    // √âTAPE 3: Tests de suppression individuels
    console.log('\nüß™ √âTAPE 3: Tests de suppression individuels');

    // Test 1: Supprimer la variation
    console.log('\n‚û°Ô∏è  TEST 1: Suppression de la VARIATION');
    try {
      await prisma.variation.delete({ where: { id: variationToTest.id } });
      console.log('‚ùå VARIATION SUPPRIM√âE (PROBL√àME !)');

      const remainingProducts = await prisma.product.count({
        where: { variationId: variationToTest.id }
      });
      console.log(`   Produits avec variationId null: ${productsWithVariation - remainingProducts}`);

    } catch (error) {
      console.log('‚úÖ VARIATION PROT√âG√âE (CORRECT !)');
      console.log(`   Erreur: ${error.code} - ${error.message.split('\n')[0]}`);
    }

    // Test 2: Supprimer la sous-cat√©gorie
    console.log('\n‚û°Ô∏è  TEST 2: Suppression de la SOUS-CAT√âGORIE');
    try {
      await prisma.subCategory.delete({ where: { id: subCategoryToTest.id } });
      console.log('‚ùå SOUS-CAT√âGORIE SUPPRIM√âE (PROBL√àME !)');

      const remainingProducts = await prisma.product.count({
        where: { subCategoryId: subCategoryToTest.id }
      });
      console.log(`   Produits avec subCategoryId null: ${productsWithSubCategory - remainingProducts}`);

    } catch (error) {
      console.log('‚úÖ SOUS-CAT√âGORIE PROT√âG√âE (CORRECT !)');
      console.log(`   Erreur: ${error.code} - ${error.message.split('\n')[0]}`);
    }

    // Test 3: Supprimer la cat√©gorie
    console.log('\n‚û°Ô∏è  TEST 3: Suppression de la CAT√âGORIE');
    try {
      await prisma.category.delete({ where: { id: categoryToTest.id } });
      console.log('‚ùå CAT√âGORIE SUPPRIM√âE (PROBL√àME !)');

      const remainingProducts = await prisma.product.count({
        where: { categoryId: categoryToTest.id }
      });
      console.log(`   Produits avec categoryId null: ${productsWithCategory - remainingProducts}`);

    } catch (error) {
      console.log('‚úÖ CAT√âGORIE PROT√âG√âE (CORRECT !)');
      console.log(`   Erreur: ${error.code} - ${error.message.split('\n')[0]}`);
    }

    // √âTAPE 4: Nettoyage
    console.log('\nüßπ √âTAPE 4: Nettoyage des donn√©es de test');

    // Supprimer les produits d'abord
    const productsToDelete = await prisma.product.findMany({
      where: {
        OR: [
          { categoryId: categoryToTest.id },
          { subCategoryId: subCategoryToTest.id },
          { variationId: variationToTest.id }
        ]
      }
    });

    for (const product of productsToDelete) {
      await prisma.product.delete({ where: { id: product.id } });
    }
    console.log(`‚úÖ ${productsToDelete.length} produits supprim√©s`);

    // Maintenant supprimer la hi√©rarchie
    try {
      await prisma.variation.delete({ where: { id: variationToTest.id } });
      await prisma.subCategory.delete({ where: { id: subCategoryToTest.id } });
      await prisma.category.delete({ where: { id: categoryToTest.id } });
      console.log('‚úÖ Hi√©rarchie supprim√©e avec succ√®s');
    } catch (error) {
      console.log(`‚ÑπÔ∏è  Certaines entit√©s d√©j√† supprim√©es ou erreurs: ${error.message}`);
    }

    console.log('\nüéØ CONCLUSION FINALE');
    console.log('===================');
    console.log('Ce test analyse en d√©tail quelles contraintes fonctionnent r√©ellement.');
    console.log('Les r√©sultats montrent la complexit√© des relations dans le syst√®me actuel.');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAnalyseCompleteContraintes().catch(console.error);