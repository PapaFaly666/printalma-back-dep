const axios = require('axios');

// Configuration de test
const BASE_URL = process.env.API_BASE_URL || 'http://localhost:3004';
const TEST_TOKEN = process.env.TEST_VENDOR_TOKEN || 'your_test_jwt_token';

// Configuration axios
const api = axios.create({
  baseURL: BASE_URL,
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${TEST_TOKEN}`
  },
  timeout: 300000 // 5 minutes de timeout pour les gros uploads
});

// G√©n√©rer une image base64 de taille sp√©cifique
function generateBase64Image(targetSizeMB) {
  const targetBytes = targetSizeMB * 1024 * 1024;
  // Approximation : base64 fait environ 33% de plus que la taille binaire
  const binarySize = Math.floor(targetBytes * 0.75);
  
  // G√©n√©rer des donn√©es al√©atoires
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  let result = 'data:image/png;base64,';
  
  for (let i = 0; i < binarySize; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  
  return result;
}

// G√©n√©rer un payload de test avec des images de taille sp√©cifique
function generateTestPayload(totalSizeMB, imageCount = 3) {
  const imageSizeMB = totalSizeMB / imageCount;
  
  const basePayload = {
    baseProductId: 1,
    designUrl: 'blob:http://localhost:5173/test-design-url',
    designFile: {
      name: 'test-design.png',
      size: 245760,
      type: 'image/png'
    },
    finalImages: {
      colorImages: {},
      statistics: {
        totalColorImages: imageCount - 1,
        hasDefaultImage: true,
        availableColors: [],
        totalImagesGenerated: imageCount
      }
    },
    vendorPrice: 15000,
    vendorName: `Test Payload ${totalSizeMB}MB`,
    vendorDescription: 'Produit de test pour validation des limites de payload',
    vendorStock: 50,
    basePriceAdmin: 12000,
    selectedSizes: [
      { id: 1, sizeName: 'S' },
      { id: 2, sizeName: 'M' }
    ],
    selectedColors: [],
    previewView: {
      viewType: 'FRONT',
      url: 'https://example.com/preview.jpg',
      delimitations: []
    },
    publishedAt: new Date().toISOString(),
    finalImagesBase64: {}
  };

  // G√©n√©rer les images et leurs m√©tadonn√©es
  const colors = ['Rouge', 'Vert', 'Bleu', 'Noir', 'Blanc'];
  
  for (let i = 0; i < imageCount - 1; i++) {
    const colorName = colors[i];
    const colorInfo = {
      id: i + 1,
      name: colorName,
      colorCode: '#' + Math.floor(Math.random()*16777215).toString(16)
    };
    
    basePayload.finalImages.colorImages[colorName] = {
      colorInfo,
      imageUrl: `blob:http://localhost:5173/image-${colorName.toLowerCase()}-test`,
      imageKey: `1_${i + 1}`
    };
    
    basePayload.selectedColors.push(colorInfo);
    basePayload.finalImages.statistics.availableColors.push(colorName);
    basePayload.finalImagesBase64[colorName] = generateBase64Image(imageSizeMB);
  }
  
  // Ajouter l'image par d√©faut
  basePayload.finalImages.defaultImage = {
    imageUrl: 'blob:http://localhost:5173/image-default-test',
    imageKey: '1_default'
  };
  basePayload.finalImagesBase64['default'] = generateBase64Image(imageSizeMB);
  
  return basePayload;
}

// Calculer la taille r√©elle d'un payload
function calculatePayloadSize(payload) {
  const jsonString = JSON.stringify(payload);
  const sizeBytes = new Blob([jsonString]).size;
  return sizeBytes / (1024 * 1024); // Retourner en MB
}

// Tests des limites de payload
async function testPayloadLimits() {
  console.log('üß™ Test des Limites de Payload - Publication Vendeur\n');
  
  const testCases = [
    { size: 5, expected: 'success', description: 'Payload optimal' },
    { size: 15, expected: 'success', description: 'Payload acceptable' },
    { size: 30, expected: 'success', description: 'Payload moyen' },
    { size: 50, expected: 'success', description: 'Payload important' },
    { size: 75, expected: 'success', description: 'Payload volumineux' },
    { size: 95, expected: 'success', description: 'Limite haute' },
    { size: 110, expected: 'error', description: 'D√©passement limite (attendu)' }
  ];
  
  for (const testCase of testCases) {
    console.log(`\nüìã Test: ${testCase.description} (${testCase.size}MB)`);
    console.log('='.repeat(50));
    
    try {
      // G√©n√©rer le payload
      console.log('üîÑ G√©n√©ration du payload...');
      const payload = generateTestPayload(testCase.size);
      const actualSize = calculatePayloadSize(payload);
      
      console.log(`üìä Taille g√©n√©r√©e: ${actualSize.toFixed(2)}MB`);
      console.log(`üìä Nombre d'images: ${payload.finalImages.statistics.totalImagesGenerated}`);
      
      // Envoyer la requ√™te
      const startTime = Date.now();
      console.log('üöÄ Envoi de la requ√™te...');
      
      const response = await api.post('/vendor/publish', payload);
      
      const duration = Date.now() - startTime;
      
      if (testCase.expected === 'success') {
        console.log(`‚úÖ SUCC√àS: ${response.status} en ${duration}ms`);
        console.log(`üì¶ Produit cr√©√©: ${response.data.productId}`);
        console.log(`üñºÔ∏è Images trait√©es: ${response.data.imagesProcessed}`);
      } else {
        console.log(`‚ö†Ô∏è INATTENDU: Succ√®s alors qu'un √©chec √©tait attendu`);
      }
      
    } catch (error) {
      if (testCase.expected === 'error') {
        console.log(`‚úÖ √âCHEC ATTENDU: ${error.response?.status || 'Network Error'}`);
        console.log(`üìù Message: ${error.response?.data?.message || error.message}`);
      } else {
        console.log(`‚ùå √âCHEC INATTENDU: ${error.response?.status || 'Network Error'}`);
        console.log(`üìù Message: ${error.response?.data?.message || error.message}`);
        
        if (error.response?.data?.errors) {
          console.log('üìã Erreurs d√©taill√©es:');
          error.response.data.errors.forEach((err, index) => {
            console.log(`   ${index + 1}. ${err}`);
          });
        }
      }
    }
  }
}

// Test sp√©cifique des images volumineuses
async function testLargeImages() {
  console.log('\n\nüñºÔ∏è Test des Images Volumineuses Individuelles\n');
  
  const imageSizes = [5, 10, 15, 20]; // MB par image
  
  for (const imageSize of imageSizes) {
    console.log(`\nüìã Test: Image de ${imageSize}MB`);
    console.log('='.repeat(30));
    
    try {
      const payload = generateTestPayload(imageSize, 1); // Une seule image
      const actualSize = calculatePayloadSize(payload);
      
      console.log(`üìä Taille payload: ${actualSize.toFixed(2)}MB`);
      
      const response = await api.post('/vendor/publish', payload);
      console.log(`‚úÖ SUCC√àS: Image ${imageSize}MB accept√©e`);
      
    } catch (error) {
      console.log(`‚ùå √âCHEC: Image ${imageSize}MB refus√©e`);
      console.log(`üìù Raison: ${error.response?.data?.message || error.message}`);
    }
  }
}

// Test de performance avec diff√©rentes tailles
async function testPerformance() {
  console.log('\n\n‚ö° Test de Performance par Taille\n');
  
  const sizes = [10, 25, 50]; // MB
  
  for (const size of sizes) {
    console.log(`\nüìã Performance: ${size}MB`);
    console.log('='.repeat(25));
    
    try {
      const payload = generateTestPayload(size);
      
      const startTime = Date.now();
      const response = await api.post('/vendor/publish', payload);
      const duration = Date.now() - startTime;
      
      console.log(`‚úÖ Temps de traitement: ${duration}ms`);
      console.log(`üìä Vitesse: ${(size / (duration / 1000)).toFixed(2)} MB/s`);
      
    } catch (error) {
      console.log(`‚ùå Erreur: ${error.message}`);
    }
  }
}

// Test du health check
async function testHealthCheck() {
  console.log('\n\nüè• Test Health Check\n');
  
  try {
    const response = await api.get('/vendor/health');
    console.log('‚úÖ Health Check r√©ussi');
    console.log('üìä Statut:', response.data);
  } catch (error) {
    console.log('‚ùå Health Check √©chou√©:', error.message);
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ Script de Test - Limites de Payload Vendeur');
  console.log('=' .repeat(60));
  console.log(`üì° Base URL: ${BASE_URL}`);
  console.log(`üîë Token configur√©: ${TEST_TOKEN ? 'Oui' : 'Non'}`);
  console.log(`‚è±Ô∏è Timeout: 5 minutes\n`);
  
  try {
    await testHealthCheck();
    await testPayloadLimits();
    await testLargeImages();
    await testPerformance();
    
    console.log('\n\nüéâ Tests termin√©s !');
    console.log('\nüí° Conseils:');
    console.log('   - Limites configur√©es: 100MB pour /vendor/publish');
    console.log('   - Images individuelles: 15MB maximum');
    console.log('   - Optimiser les images avant conversion base64');
    console.log('   - Surveiller les temps de traitement > 30s');
    
  } catch (error) {
    console.error('\n‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// V√©rification si ex√©cut√© directement
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testPayloadLimits,
  testLargeImages,
  testPerformance,
  generateTestPayload,
  calculatePayloadSize
}; 