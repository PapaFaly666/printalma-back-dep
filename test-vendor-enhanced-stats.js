/**
 * Script de test pour l'endpoint /vendor/stats enrichi
 * Usage: node test-vendor-enhanced-stats.js
 */

const https = require('https');

// ‚öôÔ∏è Configuration
const CONFIG = {
  API_BASE: 'https://printalma-backend.onrender.com',  // Remplacer par votre URL
  // API_BASE: 'http://localhost:3000',  // Pour test local

  // Cookie JWT du vendeur (obtenu apr√®s connexion)
  VENDOR_JWT: 'votre_jwt_cookie_ici',  // √Ä remplacer par un vrai token

  // ID du vendeur pour le test (optionnel)
  VENDOR_ID: 2  // √Ä adapter selon vos donn√©es
};

/**
 * üß™ Test de l'endpoint /vendor/stats
 */
async function testVendorStats() {
  console.log('üöÄ Test des statistiques vendeur enrichies...\n');

  try {
    const response = await fetch(`${CONFIG.API_BASE}/vendor/stats`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': CONFIG.VENDOR_JWT  // Auth par cookie
      },
      credentials: 'include'
    });

    console.log(`üì° Status: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erreur HTTP:', errorText);
      return;
    }

    const data = await response.json();

    if (data.success) {
      console.log('‚úÖ Succ√®s! Donn√©es re√ßues:\n');

      // üìä Affichage format√© des statistiques
      const stats = data.data;

      console.log('üì¶ PRODUITS & DESIGNS:');
      console.log(`   Produits: ${stats.totalProducts} (${stats.publishedProducts} publi√©s)`);
      console.log(`   Designs:  ${stats.totalDesigns} (${stats.validatedDesigns} valid√©s)\n`);

      console.log('üí∞ FINANCES:');
      console.log(`   CA annuel:        ${formatMoney(stats.yearlyRevenue)} FCFA`);
      console.log(`   CA mensuel:       ${formatMoney(stats.monthlyRevenue)} FCFA`);
      console.log(`   Solde disponible: ${formatMoney(stats.availableBalance)} FCFA`);
      console.log(`   En attente:       ${formatMoney(stats.pendingAmount)} FCFA`);
      console.log(`   Gains totaux:     ${formatMoney(stats.totalEarnings)} FCFA`);
      console.log(`   Commission moy:   ${stats.averageCommissionRate}%\n`);

      console.log('üìä ACTIVIT√â:');
      console.log(`   Vues boutique:    ${stats.shopViews.toLocaleString()}`);
      console.log(`   Commandes:        ${stats.totalOrders}\n`);

      console.log('üìÖ DATES:');
      console.log(`   Membre depuis:    ${stats.memberSinceFormatted || '‚Äî'}`);
      console.log(`   Derni√®re conn.:   ${stats.lastLoginAtFormatted || '‚Äî'}\n`);

      console.log(`üèóÔ∏è  Architecture:     ${stats.architecture}`);

      // ‚úÖ V√©rifications de coh√©rence
      console.log('\nüîç V√âRIFICATIONS DE COH√âRENCE:');

      if (stats.availableBalance >= 0) {
        console.log('‚úÖ Solde disponible positif ou nul');
      } else {
        console.log('‚ö†Ô∏è  Solde disponible n√©gatif (incoh√©rent)');
      }

      if (stats.totalEarnings >= stats.availableBalance + stats.pendingAmount) {
        console.log('‚úÖ Coh√©rence financi√®re: totalEarnings >= disponible + en attente');
      } else {
        console.log('‚ö†Ô∏è  Incoh√©rence financi√®re d√©tect√©e');
      }

      if (stats.publishedProducts <= stats.totalProducts) {
        console.log('‚úÖ Coh√©rence produits: publi√©s <= total');
      } else {
        console.log('‚ö†Ô∏è  Incoh√©rence produits d√©tect√©e');
      }

    } else {
      console.error('‚ùå √âchec API:', data.message || 'Erreur inconnue');
    }

  } catch (error) {
    console.error('üí• Erreur de connexion:', error.message);

    if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
      console.log('\nüí° Suggestions:');
      console.log('   - V√©rifiez que le serveur est d√©marr√©');
      console.log('   - V√©rifiez l\'URL dans CONFIG.API_BASE');
      console.log('   - Pour test local: npm run start:dev');
    }
  }
}

/**
 * üí∞ Formater un montant en FCFA
 */
function formatMoney(amount) {
  if (typeof amount !== 'number') return '0';
  return new Intl.NumberFormat('fr-FR').format(amount);
}

/**
 * üß™ Test de coh√©rence avec l'endpoint funds
 */
async function testFinancialConsistency() {
  console.log('\nüîó Test de coh√©rence avec /vendor/earnings...');

  try {
    const response = await fetch(`${CONFIG.API_BASE}/vendor/earnings`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': CONFIG.VENDOR_JWT
      }
    });

    if (response.ok) {
      const earningsData = await response.json();
      console.log('‚úÖ Endpoint /vendor/earnings accessible');

      if (earningsData.success && earningsData.data) {
        console.log(`   Solde selon earnings: ${formatMoney(earningsData.data.availableAmount)} FCFA`);
      }
    } else {
      console.log('‚ö†Ô∏è  Endpoint /vendor/earnings non accessible (normal si pas impl√©ment√©)');
    }

  } catch (error) {
    console.log('‚ÑπÔ∏è  Test de coh√©rence ignor√© (endpoint earnings optionnel)');
  }
}

/**
 * üéØ Fonction principale
 */
async function main() {
  console.log('=' .repeat(60));
  console.log('üß™ TEST DES STATISTIQUES VENDEUR ENRICHIES');
  console.log('=' .repeat(60));

  // V√©rification de la configuration
  if (CONFIG.VENDOR_JWT === 'votre_jwt_cookie_ici') {
    console.log('‚ö†Ô∏è  ATTENTION: Configurez un vrai JWT dans CONFIG.VENDOR_JWT');
    console.log('üí° Pour obtenir un JWT:');
    console.log('   1. Connectez-vous en tant que vendeur');
    console.log('   2. Copiez le cookie JWT depuis les DevTools');
    console.log('   3. Remplacez la valeur dans ce script\n');
  }

  await testVendorStats();
  await testFinancialConsistency();

  console.log('\n' + '=' .repeat(60));
  console.log('üèÅ Test termin√©');
  console.log('=' .repeat(60));
}

// Ex√©cution
main().catch(console.error);