const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testSimpleDesignCreation() {
  console.log('üß™ Test cr√©ation design s√©par√©e des produits...\n');

  try {
    // 1. Cr√©er un vendeur de test
    const vendor = await prisma.user.create({
      data: {
        firstName: 'Vendeur',
        lastName: 'Test',
        email: 'test-vendor-design@example.com',
        password: 'hashedpassword',
        role: 'VENDEUR'
      }
    });

    console.log(`‚úÖ Vendeur cr√©√©: ${vendor.id}`);

    // 2. Cr√©er un admin
    const admin = await prisma.user.create({
      data: {
        firstName: 'Admin',
        lastName: 'Test',
        email: 'test-admin-design@example.com',
        password: 'hashedpassword',
        role: 'ADMIN'
      }
    });

    console.log(`‚úÖ Admin cr√©√©: ${admin.id}`);

    // 3. Cr√©er un produit de base
    const baseProduct = await prisma.product.upsert({
      where: { id: 998 },
      update: {},
      create: {
        id: 998,
        name: 'T-shirt Test Design',
        description: 'Produit de base pour test',
        price: 15000,
        stock: 100,
        status: 'PUBLISHED'
      }
    });

    console.log(`‚úÖ Produit de base cr√©√©: ${baseProduct.id}`);

    // 4. Cr√©er un design via le service
    console.log('\nüé® Test 1: Cr√©ation d\'un design...');
    
    const design = await prisma.design.create({
      data: {
        vendorId: vendor.id,
        name: 'Dragon Mystique',
        description: 'Design de dragon dans un style mystique',
        price: 0,
        category: 'ILLUSTRATION',
        imageUrl: 'https://example.com/dragon-mystique.jpg',
        thumbnailUrl: 'https://example.com/dragon-mystique-thumb.jpg',
        cloudinaryPublicId: `vendor_${vendor.id}_design_${Date.now()}`,
        fileSize: 1000,
        originalFileName: `design_${Date.now()}`,
        dimensions: { width: 500, height: 500 },
        format: 'jpg',
        tags: ['dragon', 'mystique', 'fantasy'],
        isDraft: false,
        isPublished: false,
        isPending: true,
        isValidated: false
      }
    });

    console.log(`‚úÖ Design cr√©√©: ${design.id} - ${design.name}`);

    // 5. Cr√©er un produit avec ce design
    console.log('\nüì¶ Test 2: Cr√©ation d\'un produit avec design existant...');
    
    const vendorProduct = await prisma.vendorProduct.create({
      data: {
        baseProductId: baseProduct.id,
        vendorId: vendor.id,
        name: 'T-shirt Dragon Mystique',
        description: 'T-shirt avec design dragon mystique',
        price: 25000,
        stock: 100,
        
        // Liaison avec le design existant
        designId: design.id,
        designCloudinaryUrl: design.imageUrl,
        designCloudinaryPublicId: design.cloudinaryPublicId,
        
        sizes: JSON.stringify([{ id: 1, name: 'M' }]),
        colors: JSON.stringify([{ id: 1, name: 'Rouge', code: '#ff0000' }]),
        
        // Statut d√©pend du design
        status: design.isValidated ? 'PUBLISHED' : 'PENDING',
        isValidated: design.isValidated,
        postValidationAction: 'AUTO_PUBLISH',
        
        adminProductName: baseProduct.name,
        adminProductDescription: baseProduct.description,
        adminProductPrice: baseProduct.price,
        vendorName: 'T-shirt Dragon Mystique',
        vendorDescription: 'T-shirt avec design dragon mystique',
        vendorStock: 100,
        basePriceAdmin: baseProduct.price
      }
    });

    console.log(`‚úÖ Produit cr√©√©: ${vendorProduct.id} avec design ${design.id}`);

    // 6. Cr√©er un lien design-produit
    await prisma.designProductLink.create({
      data: {
        designId: design.id,
        vendorProductId: vendorProduct.id
      }
    });

    console.log(`‚úÖ Lien cr√©√©: Design ${design.id} ‚Üî Produit ${vendorProduct.id}`);

    // 7. Cr√©er un DEUXI√àME produit avec le M√äME design
    console.log('\nüì¶ Test 3: Cr√©ation d\'un deuxi√®me produit avec le m√™me design...');
    
    const vendorProduct2 = await prisma.vendorProduct.create({
      data: {
        baseProductId: baseProduct.id,
        vendorId: vendor.id,
        name: 'T-shirt Dragon Mystique V2',
        description: 'Deuxi√®me version avec le m√™me design',
        price: 28000,
        stock: 50,
        
        // M√™me design
        designId: design.id,
        designCloudinaryUrl: design.imageUrl,
        designCloudinaryPublicId: design.cloudinaryPublicId,
        
        sizes: JSON.stringify([{ id: 1, name: 'L' }]),
        colors: JSON.stringify([{ id: 2, name: 'Bleu', code: '#0000ff' }]),
        
        status: design.isValidated ? 'PUBLISHED' : 'PENDING',
        isValidated: design.isValidated,
        postValidationAction: 'TO_DRAFT', // Diff√©rent du premier
        
        adminProductName: baseProduct.name,
        adminProductDescription: baseProduct.description,
        adminProductPrice: baseProduct.price,
        vendorName: 'T-shirt Dragon Mystique V2',
        vendorDescription: 'Deuxi√®me version avec le m√™me design',
        vendorStock: 50,
        basePriceAdmin: baseProduct.price
      }
    });

    console.log(`‚úÖ Produit 2 cr√©√©: ${vendorProduct2.id} avec le m√™me design ${design.id}`);

    // Cr√©er le lien pour le deuxi√®me produit
    await prisma.designProductLink.create({
      data: {
        designId: design.id,
        vendorProductId: vendorProduct2.id
      }
    });

    console.log(`‚úÖ Lien cr√©√©: Design ${design.id} ‚Üî Produit ${vendorProduct2.id}`);

    // 8. Test de validation en cascade
    console.log('\nüîÑ Test 4: Validation en cascade...');
    
    // Valider le design
    await prisma.design.update({
      where: { id: design.id },
      data: {
        isValidated: true,
        validatedAt: new Date(),
        validatedBy: admin.id,
        isPending: false
      }
    });

    console.log(`‚úÖ Design ${design.id} valid√© par admin ${admin.id}`);

    // Mettre √† jour les produits li√©s
    const linkedProducts = await prisma.vendorProduct.findMany({
      where: { designId: design.id }
    });

    console.log(`üì¶ ${linkedProducts.length} produits li√©s trouv√©s`);

    for (const product of linkedProducts) {
      let newStatus = product.postValidationAction === 'TO_DRAFT' ? 'DRAFT' : 'PUBLISHED';
      
      await prisma.vendorProduct.update({
        where: { id: product.id },
        data: {
          isValidated: true,
          validatedAt: new Date(),
          status: newStatus,
          rejectionReason: null
        }
      });

      console.log(`‚úÖ Produit ${product.id}: ${product.postValidationAction} ‚Üí ${newStatus}`);
    }

    // 9. V√©rifier les r√©sultats
    console.log('\nüìä R√©sultats finaux...');
    
    const finalDesigns = await prisma.design.count({
      where: { vendorId: vendor.id }
    });
    
    const finalProducts = await prisma.vendorProduct.count({
      where: { vendorId: vendor.id }
    });
    
    const finalLinks = await prisma.designProductLink.count({
      where: {
        vendorProduct: { vendorId: vendor.id }
      }
    });

    const product1Final = await prisma.vendorProduct.findUnique({
      where: { id: vendorProduct.id }
    });

    const product2Final = await prisma.vendorProduct.findUnique({
      where: { id: vendorProduct2.id }
    });

    console.log(`Designs cr√©√©s: ${finalDesigns} (attendu: 1)`);
    console.log(`Produits cr√©√©s: ${finalProducts} (attendu: 2)`);
    console.log(`Liens cr√©√©s: ${finalLinks} (attendu: 2)`);
    console.log(`Produit 1 status: ${product1Final.status} (attendu: PUBLISHED)`);
    console.log(`Produit 2 status: ${product2Final.status} (attendu: DRAFT)`);

    // V√©rifier le succ√®s
    let success = true;
    if (finalDesigns !== 1) {
      console.log('‚ùå Erreur: Nombre de designs incorrect');
      success = false;
    }
    if (finalProducts !== 2) {
      console.log('‚ùå Erreur: Nombre de produits incorrect');
      success = false;
    }
    if (product1Final.status !== 'PUBLISHED') {
      console.log('‚ùå Erreur: Produit 1 devrait √™tre PUBLISHED');
      success = false;
    }
    if (product2Final.status !== 'DRAFT') {
      console.log('‚ùå Erreur: Produit 2 devrait √™tre DRAFT');
      success = false;
    }

    if (success) {
      console.log('\nüéâ Test termin√© avec succ√®s !');
      console.log('‚úÖ Un seul design cr√©√©');
      console.log('‚úÖ Deux produits utilisant le m√™me design');
      console.log('‚úÖ Validation en cascade fonctionne');
      console.log('‚úÖ Actions post-validation respect√©es');
    } else {
      console.log('\n‚ùå Test √©chou√© - Voir les erreurs ci-dessus');
    }

  } catch (error) {
    console.error('‚ùå Erreur durant le test:', error);
  } finally {
    await cleanup();
    await prisma.$disconnect();
  }
}

async function cleanup() {
  console.log('\nüßπ Nettoyage des donn√©es de test...');

  try {
    // Supprimer dans l'ordre pour √©viter les contraintes
    await prisma.designProductLink.deleteMany({
      where: {
        vendorProduct: {
          vendor: {
            email: 'test-vendor-design@example.com'
          }
        }
      }
    });

    await prisma.vendorProduct.deleteMany({
      where: {
        vendor: {
          email: 'test-vendor-design@example.com'
        }
      }
    });

    await prisma.design.deleteMany({
      where: {
        vendor: {
          email: 'test-vendor-design@example.com'
        }
      }
    });

    await prisma.product.deleteMany({
      where: {
        OR: [
          { name: 'T-shirt Test Design' },
          { id: 998 }
        ]
      }
    });

    await prisma.user.deleteMany({
      where: {
        email: {
          in: [
            'test-vendor-design@example.com',
            'test-admin-design@example.com'
          ]
        }
      }
    });

    console.log('‚úÖ Nettoyage termin√©');

  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  }
}

// Ex√©cuter le test
if (require.main === module) {
  testSimpleDesignCreation()
    .then(() => {
      console.log('\nüéâ Test termin√© !');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { testSimpleDesignCreation }; 