// Test final des protections en simulant les services
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Simuler SubCategoryService.remove()
async function testSubCategoryProtection(id) {
  console.log(`\nüîç Test de protection pour la sous-cat√©gorie ID: ${id}`);

  try {
    // V√©rifier que la sous-cat√©gorie existe
    const subCategory = await prisma.subCategory.findUnique({
      where: { id },
      include: {
        variations: {
          where: { isActive: true },
          include: {
            _count: {
              select: {
                products: {
                  where: { isDelete: false }
                }
              }
            }
          }
        },
        _count: {
          select: {
            products: {
              where: { isDelete: false }
            }
          }
        }
      }
    });

    if (!subCategory) {
      console.log('‚ùå Sous-cat√©gorie non trouv√©e');
      return false;
    }

    console.log(`üìã Sous-cat√©gorie: ${subCategory.name}`);
    console.log(`   - Variations: ${subCategory.variations.length}`);
    console.log(`   - Produits directs: ${subCategory._count.products}`);

    // V√©rifier si des produits sont li√©s directement √† cette sous-cat√©gorie
    const directProductsCount = subCategory._count.products;

    // V√©rifier si des variations de cette sous-cat√©gorie sont utilis√©es par des produits
    const variationsWithProducts = subCategory.variations.filter(v => v._count.products > 0);
    const totalProductsThroughVariations = variationsWithProducts.reduce(
      (total, variation) => total + variation._count.products,
      0
    );

    // Calculer le nombre total de produits affect√©s
    const totalAffectedProducts = directProductsCount + totalProductsThroughVariations;

    console.log(`   - Produits via variations: ${totalProductsThroughVariations}`);
    console.log(`   - Total affect√©: ${totalAffectedProducts}`);

    if (totalAffectedProducts > 0) {
      console.log('üõ°Ô∏è  PROTECTION ACTIV√âE: La sous-cat√©gorie est utilis√©e par des produits');
      console.log(`   Erreur: SUBCATEGORY_IN_USE`);
      console.log(`   Message: La sous-cat√©gorie est utilis√©e par ${totalAffectedProducts} produit(s) au total.`);
      return true; // Protection fonctionnelle
    }

    // V√©rifier si la sous-cat√©gorie a des variations (m√™me sans produits)
    if (subCategory.variations.length > 0) {
      console.log('üõ°Ô∏è  PROTECTION ACTIV√âE: La sous-cat√©gorie contient des variations');
      console.log(`   Erreur: SUBCATEGORY_HAS_VARIATIONS`);
      console.log(`   Message: La sous-cat√©gorie contient ${subCategory.variations.length} variation(s).`);
      return true; // Protection fonctionnelle
    }

    console.log('‚úÖ La sous-cat√©gorie pourrait √™tre supprim√©e (pas utilis√©e)');
    return false; // Pas de protection n√©cessaire

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    return false;
  }
}

// Simuler VariationService.remove()
async function testVariationProtection(id) {
  console.log(`\nüîç Test de protection pour la variation ID: ${id}`);

  try {
    // V√©rifier que la variation existe
    const variation = await prisma.variation.findUnique({
      where: { id },
      include: {
        subCategory: true,
        _count: {
          select: {
            products: {
              where: { isDelete: false }
            }
          }
        }
      }
    });

    if (!variation) {
      console.log('‚ùå Variation non trouv√©e');
      return false;
    }

    console.log(`üìã Variation: ${variation.name} (sous-cat√©gorie: ${variation.subCategory.name})`);
    console.log(`   - Produits directs: ${variation._count.products}`);

    // V√©rifier si des produits sont li√©s √† cette variation
    const productsCount = variation._count.products;

    // V√©rifier √©galement les produits li√©s via la sous-cat√©gorie parente
    const parentSubCategoryProducts = await prisma.product.count({
      where: {
        subCategoryId: variation.subCategoryId,
        variationId: null, // Produits qui n'ont pas de variation directe
        isDelete: false
      }
    });

    const totalAffectedProducts = productsCount + parentSubCategoryProducts;

    console.log(`   - Produits dans la sous-cat√©gorie parente: ${parentSubCategoryProducts}`);
    console.log(`   - Total affect√©: ${totalAffectedProducts}`);

    if (totalAffectedProducts > 0) {
      console.log('üõ°Ô∏è  PROTECTION ACTIV√âE: La variation est utilis√©e par des produits');
      console.log(`   Erreur: VARIATION_IN_USE`);
      console.log(`   Message: La variation est utilis√©e par ${totalAffectedProducts} produit(s) au total.`);
      return true; // Protection fonctionnelle
    }

    console.log('‚úÖ La variation pourrait √™tre d√©sactiv√©e (pas utilis√©e)');
    return false; // Pas de protection n√©cessaire

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    return false;
  }
}

async function runFinalTests() {
  console.log('üß™ TEST FINAL DES PROTECTIONS CONTRE LA SUPPRESSION\n');
  console.log('=' .repeat(60));

  try {
    // R√©cup√©rer toutes les sous-cat√©gories
    const subCategories = await prisma.subCategory.findMany({
      where: { isActive: true },
      include: {
        _count: {
          select: {
            products: { where: { isDelete: false } }
          }
        }
      }
    });

    console.log(`\nüìä Found ${subCategories.length} sous-cat√©gorie(s) active(s)`);

    // Tester chaque sous-cat√©gorie
    let subCategoryProtections = 0;
    for (const subCategory of subCategories) {
      const isProtected = await testSubCategoryProtection(subCategory.id);
      if (isProtected) subCategoryProtections++;
    }

    // R√©cup√©rer toutes les variations
    const variations = await prisma.variation.findMany({
      where: { isActive: true },
      include: {
        _count: {
          select: {
            products: { where: { isDelete: false } }
          }
        }
      }
    });

    console.log(`\nüìä Found ${variations.length} variation(s) active(s)`);

    // Tester chaque variation
    let variationProtections = 0;
    for (const variation of variations.slice(0, 3)) { // Limiter √† 3 pour le test
      const isProtected = await testVariationProtection(variation.id);
      if (isProtected) variationProtections++;
    }

    // R√©sum√©
    console.log('\n' + '=' .repeat(60));
    console.log('üìã R√âSUM√â DES TESTS');
    console.log(`   Sous-cat√©gories test√©es: ${subCategories.length}`);
    console.log(`   Sous-cat√©gories prot√©g√©es: ${subCategoryProtections}`);
    console.log(`   Variations test√©es: ${Math.min(3, variations.length)}`);
    console.log(`   Variations prot√©g√©es: ${variationProtections}`);

    if (subCategoryProtections > 0 || variationProtections > 0) {
      console.log('\n‚úÖ SUCC√àS: Les protections contre la suppression fonctionnent correctement !');
    } else {
      console.log('\n‚ö†Ô∏è  ATTENTION: Aucune protection activ√©e (donn√©es de test peut-√™tre)');
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  } finally {
    await prisma.$disconnect();
  }
}

runFinalTests();