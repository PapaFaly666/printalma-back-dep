const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function main() {
  console.log('üöÄ D√©but du test de cr√©ation et suppression de produit avec hi√©rarchie compl√®te\n');

  try {
    // G√©n√©rer un timestamp pour l'unicit√©
    const timestamp = Date.now();
    const randomSuffix = Math.random().toString(36).substring(2, 8);

    // 1. Cr√©er une cat√©gorie principale
    console.log('üìÇ √âtape 1: Cr√©ation d\'une cat√©gorie principale...');
    const category = await prisma.category.create({
      data: {
        name: `V√™tements Test ${timestamp}`,
        slug: `vetements-test-${timestamp}`,
        description: `Cat√©gorie de test pour les v√™tements - ${timestamp}`,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Cat√©gorie cr√©√©e: ID=${category.id}, Nom="${category.name}"`);

    // 2. Cr√©er une sous-cat√©gorie li√©e √† la cat√©gorie
    console.log('\nüìÇ √âtape 2: Cr√©ation d\'une sous-cat√©gorie...');
    const subCategory = await prisma.subCategory.create({
      data: {
        name: `T-Shirts Test ${randomSuffix}`,
        slug: `t-shirts-test-${randomSuffix}`,
        description: `Sous-cat√©gorie de test pour les t-shirts - ${randomSuffix}`,
        categoryId: category.id,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Sous-cat√©gorie cr√©√©e: ID=${subCategory.id}, Nom="${subCategory.name}", Cat√©gorieParente=${category.id}`);

    // 3. Cr√©er une variation li√©e √† la sous-cat√©gorie
    console.log('\nüìÇ √âtape 3: Cr√©ation d\'une variation...');
    const variation = await prisma.variation.create({
      data: {
        name: `Col V Test ${randomSuffix}`,
        slug: `col-v-test-${randomSuffix}`,
        description: `Variation col V pour test - ${randomSuffix}`,
        subCategoryId: subCategory.id,
        displayOrder: 1,
        isActive: true
      }
    });
    console.log(`‚úÖ Variation cr√©√©e: ID=${variation.id}, Nom="${variation.name}", SousCat√©gorieParente=${subCategory.id}`);

    // 4. Cr√©er un produit avec cette hi√©rarchie
    console.log('\nüõçÔ∏è √âtape 4: Cr√©ation d\'un produit avec la hi√©rarchie compl√®te...');
    const product = await prisma.product.create({
      data: {
        name: `T-Shirt Col V Test ${timestamp}`,
        description: `T-shirt avec col V pour tester la suppression - ${timestamp}`,
        price: 25.99,
        stock: 100,
        status: 'PUBLISHED',
        genre: 'UNISEXE',
        isReadyProduct: true,
        isValidated: true,
        suggestedPrice: 29.99,
        // Hi√©rarchie de cat√©gories √† 3 niveaux
        categoryId: category.id,
        subCategoryId: subCategory.id,
        variationId: variation.id,
        // Cr√©er une variation de couleur
        colorVariations: {
          create: {
            name: `Blanc Test ${randomSuffix}`,
            colorCode: '#FFFFFF',
            // Cr√©er une image pour cette variation
            images: {
              create: {
                view: 'FRONT',
                url: `https://example.com/image-${timestamp}.jpg`,
                publicId: `test_image_public_id_${timestamp}`,
                naturalWidth: 800,
                naturalHeight: 600
              }
            }
          }
        },
        // Cr√©er des tailles
        sizes: {
          create: [
            { sizeName: 'S' },
            { sizeName: 'M' },
            { sizeName: 'L' }
          ]
        }
      },
      include: {
        category: true,
        subCategory: true,
        variation: true,
        colorVariations: {
          include: {
            images: true
          }
        },
        sizes: true
      }
    });
    console.log(`‚úÖ Produit cr√©√©: ID=${product.id}, Nom="${product.name}"`);
    console.log(`   - Cat√©gorie: ${product.category?.name} (ID: ${product.categoryId})`);
    console.log(`   - Sous-cat√©gorie: ${product.subCategory?.name} (ID: ${product.subCategoryId})`);
    console.log(`   - Variation: ${product.variation?.name} (ID: ${product.variationId})`);
    console.log(`   - Variations de couleur: ${product.colorVariations.length}`);
    console.log(`   - Tailles: ${product.sizes.length}`);

    // 5. Cr√©er des stocks pour le produit
    console.log('\nüì¶ √âtape 5: Cr√©ation des stocks...');
    const stock = await prisma.productStock.create({
      data: {
        productId: product.id,
        colorId: product.colorVariations[0].id,
        sizeName: 'M',
        stock: 50
      }
    });
    console.log(`‚úÖ Stock cr√©√©: Produit=${product.id}, Couleur=${product.colorVariations[0].id}, Taille=M, Quantit√©=50`);

    // 6. Afficher l'√©tat complet avant suppression
    console.log('\nüìã √âtat complet avant suppression:');
    const fullProduct = await prisma.product.findUnique({
      where: { id: product.id },
      include: {
        category: true,
        subCategory: true,
        variation: true,
        colorVariations: {
          include: {
            images: true
          }
        },
        sizes: true,
        stocks: true
      }
    });

    console.log(`üìä Produit ${fullProduct.id}:`);
    console.log(`   - Nom: ${fullProduct.name}`);
    console.log(`   - Hi√©rarchie: ${fullProduct.category?.name} > ${fullProduct.subCategory?.name} > ${fullProduct.variation?.name}`);
    console.log(`   - Variations couleur: ${fullProduct.colorVariations.length}`);
    console.log(`   - Images: ${fullProduct.colorVariations.reduce((sum, cv) => sum + cv.images.length, 0)}`);
    console.log(`   - Tailles: ${fullProduct.sizes.length}`);
    console.log(`   - Stocks: ${fullProduct.stocks.length}`);

    // 7. Attendre un peu pour simuler un usage r√©el
    console.log('\n‚è≥ Attente de 2 secondes pour simuler un usage r√©el...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 8. Tester la suppression en cascade
    console.log('\nüóëÔ∏è √âtape 6: Test de suppression du produit...');

    // D'abord, supprimer les stocks (car ils ont une contrainte de cl√© √©trang√®re)
    await prisma.productStock.deleteMany({
      where: { productId: product.id }
    });
    console.log('‚úÖ Stocks supprim√©s');

    // Ensuite, supprimer les d√©limitations s'il y en a
    const imageIds = fullProduct.colorVariations.flatMap(cv => cv.images.map(img => img.id));
    if (imageIds.length > 0) {
      await prisma.delimitation.deleteMany({
        where: { productImageId: { in: imageIds } }
      });
      console.log('‚úÖ D√©limitations supprim√©es');
    }

    // Supprimer les images
    await prisma.productImage.deleteMany({
      where: { colorVariationId: { in: fullProduct.colorVariations.map(cv => cv.id) } }
    });
    console.log('‚úÖ Images supprim√©es');

    // Supprimer les variations de couleur
    await prisma.colorVariation.deleteMany({
      where: { productId: product.id }
    });
    console.log('‚úÖ Variations de couleur supprim√©es');

    // Supprimer les tailles
    await prisma.productSize.deleteMany({
      where: { productId: product.id }
    });
    console.log('‚úÖ Tailles supprim√©es');

    // Supprimer le produit
    await prisma.product.delete({
      where: { id: product.id }
    });
    console.log('‚úÖ Produit supprim√©');

    // 9. V√©rifier que la hi√©rarchie existe toujours
    console.log('\nüîç √âtape 7: V√©rification que la hi√©rarchie existe toujours...');
    const categoryExists = await prisma.category.findUnique({ where: { id: category.id } });
    const subCategoryExists = await prisma.subCategory.findUnique({ where: { id: subCategory.id } });
    const variationExists = await prisma.variation.findUnique({ where: { id: variation.id } });

    console.log(`   - Cat√©gorie ${category.name}: ${categoryExists ? '‚úÖ existe toujours' : '‚ùå supprim√©e'}`);
    console.log(`   - Sous-cat√©gorie ${subCategory.name}: ${subCategoryExists ? '‚úÖ existe toujours' : '‚ùå supprim√©e'}`);
    console.log(`   - Variation ${variation.name}: ${variationExists ? '‚úÖ existe toujours' : '‚ùå supprim√©e'}`);

    // 10. Nettoyage final - supprimer la hi√©rarchie
    console.log('\nüßπ √âtape 8: Nettoyage final - suppression de la hi√©rarchie...');

    await prisma.variation.delete({
      where: { id: variation.id }
    });
    console.log('‚úÖ Variation supprim√©e');

    await prisma.subCategory.delete({
      where: { id: subCategory.id }
    });
    console.log('‚úÖ Sous-cat√©gorie supprim√©e');

    await prisma.category.delete({
      where: { id: category.id }
    });
    console.log('‚úÖ Cat√©gorie supprim√©e');

    console.log('\nüéâ Test termin√© avec succ√®s!');
    console.log('‚úÖ Toutes les √©tapes ont √©t√© compl√©t√©es correctement');
    console.log('‚úÖ La suppression en cascade fonctionne comme attendu');
    console.log('‚úÖ La hi√©rarchie de cat√©gories est correctement g√©r√©e');

  } catch (error) {
    console.error('\n‚ùå Erreur durant le test:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå Connexion √† la base de donn√©es ferm√©e');
  }
}

main();