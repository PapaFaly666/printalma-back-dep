generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                     @id @default(autoincrement())
  firstName               String
  lastName                String
  email                   String                  @unique
  password                String
  role                    Role?
  roleId                  Int?                    @map("role_id")
  status                  Boolean                 @default(true)
  userStatus              UserStatus              @default(ACTIVE) @map("user_status")
  photo_profil            String?
  avatar                  String?
  login_attempts          Int                     @default(0)
  locked_until            DateTime?
  last_login_at           DateTime?
  email_verified          Boolean                 @default(false) @map("email_verified")
  created_at              DateTime                @default(now())
  updated_at              DateTime                @updatedAt
  created_by              Int?                    @map("created_by")
  must_change_password    Boolean                 @default(false)
  vendeur_type            VendeurType?
  vendorTypeId            Int?                    @map("vendor_type_id")
  address                 String?
  country                 String?
  phone                   String?
  profile_photo_url       String?
  shop_name               String?                 @unique
  activation_code         String?
  activation_code_expires DateTime?
  is_deleted              Boolean                 @default(false)
  deleted_at              DateTime?
  deleted_by              Int?
  validatedDesigns        Design[]                @relation("DesignValidator")
  designs                 Design[]
  createdDesignCategories DesignCategory[]        @relation("DesignCategoryCreator")
  emailChangeRequests     EmailChangeRequest[]
  notifications           Notification[]
  orders                  Order[]
  validatedOrders         Order[]                 @relation("OrderValidator")
  passwordResets          PasswordReset[]
  validatedProducts       Product[]               @relation("ProductValidator")
  stockMovements          StockMovement[]         @relation("StockMovementCreator")
  vendorDesignTransforms  VendorDesignTransform[]
  validatedVendorProducts VendorProduct[]         @relation("VendorProductValidator")
  vendorProducts          VendorProduct[]
  commissionChanges       CommissionAuditLog[]    @relation("CommissionAuditChanger")
  commissionAuditLogs     CommissionAuditLog[]    @relation("CommissionAuditVendorUser")
  createdCommissions      VendorCommission[]      @relation("CommissionCreatedByUser")
  vendorCommission        VendorCommission?       @relation("VendorCommissionToUser")
  vendorEarnings          VendorEarnings?         @relation("VendorEarnings")
  processedFundsRequests  VendorFundsRequest[]    @relation("ProcessedFundsRequests")
  vendorFundsRequests     VendorFundsRequest[]    @relation("VendorFundsRequests")
  customRole              CustomRole?             @relation("UserCustomRole", fields: [roleId], references: [id])
  vendorType              VendorType?             @relation("UserVendorType", fields: [vendorTypeId], references: [id])
  createdByUser           User?                   @relation("UserCreatedBy", fields: [created_by], references: [id], onDelete: SetNull)
  createdUsers            User[]                  @relation("UserCreatedBy")
  deletedByUser           User?                   @relation("DeletedByUser", fields: [deleted_by], references: [id], onDelete: SetNull)
  deletedUsers            User[]                  @relation("DeletedByUser")
  auditLogs               AuditLog[]              @relation("AuditLogUser")

  @@index([country])
  @@index([shop_name])
  @@index([vendorTypeId])
  @@index([is_deleted])
  @@index([deleted_at])
  @@index([email])
  @@index([roleId])
  @@index([userStatus])
}

model PasswordReset {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int
  expiresAt DateTime
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Product {
  id                       Int               @id @default(autoincrement())
  name                     String
  description              String
  price                    Float
  stock                    Int
  status                   PublicationStatus @default(DRAFT)
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  designsMetadata          Json?             @default("{\"lastUpdated\": null, \"totalDesigns\": 0}")
  genre                    ProductGenre      @default(UNISEXE)
  hasCustomDesigns         Boolean           @default(false)
  isDelete                 Boolean           @default(false)
  isReadyProduct           Boolean           @default(false)
  isValidated              Boolean           @default(true)
  rejectionReason          String?
  submittedForValidationAt DateTime?
  validatedAt              DateTime?
  validatedBy              Int?
  suggestedPrice           Float?            @map("suggested_price")

  // Hiérarchie de catégories à 3 niveaux
  categoryId               Int?              @map("category_id")
  subCategoryId            Int?              @map("sub_category_id")
  variationId              Int?              @map("variation_id")

  colorVariations          ColorVariation[]
  orderItems               OrderItem[]
  validator                User?             @relation("ProductValidator", fields: [validatedBy], references: [id])
  sizes                    ProductSize[]
  stocks                   ProductStock[]
  stockMovements           StockMovement[]
  themeProducts            ThemeProduct[]
  vendorProducts           VendorProduct[]
  categories               Category[]        @relation("CategoryToProduct")
  category                 Category?         @relation("ProductCategory", fields: [categoryId], references: [id], onDelete: Restrict)
  subCategory              SubCategory?      @relation("ProductSubCategory", fields: [subCategoryId], references: [id], onDelete: Restrict)
  variation                Variation?        @relation("ProductVariation", fields: [variationId], references: [id], onDelete: Restrict)

  @@index([isValidated])
  @@index([submittedForValidationAt])
  @@index([isReadyProduct])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([variationId])
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  productId Int
  sizeName  String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductStock {
  id        Int      @id @default(autoincrement())
  productId Int
  colorId   Int
  sizeName  String
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, colorId, sizeName])
  @@index([productId])
  @@index([colorId])
}

model StockMovement {
  id        Int                 @id @default(autoincrement())
  productId Int                 @map("product_id")
  colorId   Int                 @map("color_id")
  sizeName  String              @map("size_name")
  type      StockMovementType
  quantity  Int
  reason    String?
  createdAt DateTime            @default(now()) @map("created_at")
  createdBy Int?                @map("created_by")
  product   Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorVariation ColorVariation  @relation(fields: [colorId], references: [id], onDelete: Cascade)
  user      User?               @relation("StockMovementCreator", fields: [createdBy], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([createdAt(sort: Desc)])
  @@map("stock_movements")
}

// Niveau 0 - Catégorie principale (ex: Vêtements, Accessoires)
model Category {
  id                 Int            @id @default(autoincrement())
  name               String         @unique
  slug               String         @unique
  description        String?
  displayOrder       Int            @default(0) @map("display_order")
  coverImageUrl      String?        @map("cover_image_url")
  coverImagePublicId String?        @map("cover_image_public_id")
  isActive           Boolean        @default(true) @map("is_active")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  subCategories      SubCategory[]  @relation("CategorySubCategories")
  products           Product[]      @relation("CategoryToProduct")
  directProducts     Product[]      @relation("ProductCategory")

  @@index([isActive])
  @@index([displayOrder])
  @@map("categories")
}

// Niveau 1 - Sous-catégorie (ex: T-Shirts, Sweats, Hoodies)
model SubCategory {
  id           Int         @id @default(autoincrement())
  name         String
  slug         String
  description  String?
  categoryId   Int         @map("category_id")
  displayOrder Int         @default(0) @map("display_order")
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  category     Category    @relation("CategorySubCategories", fields: [categoryId], references: [id], onDelete: Cascade)
  variations   Variation[] @relation("SubCategoryVariations")
  products     Product[]   @relation("ProductSubCategory")

  @@unique([name, categoryId], name: "unique_subcategory_per_category")
  @@index([categoryId])
  @@index([isActive])
  @@index([displayOrder])
  @@map("sub_categories")
}

// Niveau 2 - Variation (ex: Col V, Col Rond, Manches Longues)
model Variation {
  id            Int         @id @default(autoincrement())
  name          String
  slug          String
  description   String?
  subCategoryId Int         @map("sub_category_id")
  displayOrder  Int         @default(0) @map("display_order")
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  subCategory   SubCategory @relation("SubCategoryVariations", fields: [subCategoryId], references: [id], onDelete: Restrict)
  products      Product[]   @relation("ProductVariation")

  @@unique([name, subCategoryId], name: "unique_variation_per_subcategory")
  @@index([subCategoryId])
  @@index([isActive])
  @@index([displayOrder])
  @@map("variations")
}

model ColorVariation {
  id                  Int                  @id @default(autoincrement())
  name                String
  colorCode           String
  productId           Int
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems          OrderItem[]
  images              ProductImage[]
  stockMovements      StockMovement[]
  vendorProductImages VendorProductImage[]
}

model ProductImage {
  id                 Int            @id @default(autoincrement())
  view               String
  url                String
  publicId           String
  naturalWidth       Int?
  naturalHeight      Int?
  designUrl          String?
  designPublicId     String?
  designFileName     String?
  designUploadDate   DateTime?
  designSize         Int?
  designOriginalName String?
  designDescription  String?
  isDesignActive     Boolean        @default(true)
  colorVariationId   Int
  delimitations      Delimitation[]
  colorVariation     ColorVariation @relation(fields: [colorVariationId], references: [id], onDelete: Cascade)

  @@index([colorVariationId])
  @@index([designUrl])
  @@index([isDesignActive])
}

model Delimitation {
  id                  Int            @id @default(autoincrement())
  x                   Float
  y                   Float
  width               Float
  height              Float
  rotation            Float          @default(0)
  name                String?
  coordinateType      CoordinateType @default(ABSOLUTE)
  absoluteX           Float?
  absoluteY           Float?
  absoluteWidth       Float?
  absoluteHeight      Float?
  originalImageWidth  Int?
  originalImageHeight Int?
  productImageId      Int
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @default(now()) @updatedAt
  referenceWidth      Int            @default(0)
  referenceHeight     Int            @default(0)
  productImage        ProductImage   @relation(fields: [productImageId], references: [id], onDelete: Cascade)

  @@index([productImageId])
}

model Order {
  id                  Int                       @id @default(autoincrement())
  orderNumber         String                    @unique
  userId              Int
  status              OrderStatus               @default(PENDING)
  totalAmount         Float
  phoneNumber         String
  notes               String?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  validatedAt         DateTime?
  validatedBy         Int?
  shippingName        String?
  shippingStreet      String?
  shippingCity        String?
  shippingRegion      String?
  shippingPostalCode  String?
  shippingCountry     String?
  shippingAddressFull String?
  confirmedAt         DateTime?
  deliveredAt         DateTime?
  paymentMethod       String?
  shippedAt           DateTime?
  shippingAmount      Float                     @default(0)
  subtotal            Float?
  taxAmount           Float                     @default(0)
  user                User                      @relation(fields: [userId], references: [id])
  validator           User?                     @relation("OrderValidator", fields: [validatedBy], references: [id])
  orderItems          OrderItem[]
  fundsRequestLinks   VendorFundsRequestOrder[]

  @@index([userId])
  @@index([status])
  @@index([orderNumber])
}

model OrderItem {
  id             Int             @id @default(autoincrement())
  orderId        Int
  productId      Int
  quantity       Int
  unitPrice      Float
  size           String?
  color          String?
  colorId        Int?
  colorVariation ColorVariation? @relation(fields: [colorId], references: [id])
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([colorId])
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  expiresAt DateTime?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([expiresAt])
}

/// Catégories de design dynamiques créées par l'admin
model DesignCategory {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  description        String?
  slug               String   @unique
  isActive           Boolean  @default(true)
  sortOrder          Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  createdBy          Int
  coverImagePublicId String?
  coverImageUrl      String?
  designs            Design[] @relation("DesignToCategory")
  creator            User     @relation("DesignCategoryCreator", fields: [createdBy], references: [id])

  @@index([isActive])
  @@index([sortOrder])
  @@index([slug])
}

model Design {
  id                       Int                     @id @default(autoincrement())
  vendorId                 Int
  name                     String
  description              String?
  price                    Float
  imageUrl                 String
  thumbnailUrl             String?
  cloudinaryPublicId       String
  thumbnailPublicId        String?
  fileSize                 Int
  originalFileName         String
  dimensions               Json
  format                   String
  tags                     String[]                @default([])
  contentHash              String?                 @unique
  isDraft                  Boolean                 @default(true)
  isPublished              Boolean                 @default(false)
  isPending                Boolean                 @default(false)
  isDelete                 Boolean                 @default(false)
  isValidated              Boolean                 @default(false)
  validatedAt              DateTime?
  validatedBy              Int?
  rejectionReason          String?
  submittedForValidationAt DateTime?
  views                    Int                     @default(0)
  likes                    Int                     @default(0)
  earnings                 Float                   @default(0)
  usageCount               Int                     @default(0)
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  publishedAt              DateTime?
  categoryId               Int?
  category                 DesignCategory?         @relation("DesignToCategory", fields: [categoryId], references: [id])
  validator                User?                   @relation("DesignValidator", fields: [validatedBy], references: [id])
  vendor                   User                    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  designProductLinks       DesignProductLink[]
  productPositions         ProductDesignPosition[] @relation("DesignToDesignPosition")
  vendorProducts           VendorProduct[]

  @@index([vendorId])
  @@index([categoryId])
  @@index([isPublished])
  @@index([isPending])
  @@index([isValidated])
  @@index([submittedForValidationAt])
  @@index([createdAt])
  @@index([contentHash])
}

/// VendorProduct représente un produit mis en vente par un vendeur à partir d'un produit de base (admin).
/// Il stocke les variantes sélectionnées (tailles, couleurs) sous forme de tableau JSON pour simplifier le schéma.
model VendorProduct {
  id                       Int                     @id @default(autoincrement())
  baseProductId            Int                     @map("base_product_id")
  vendorId                 Int                     @map("vendor_id")
  name                     String
  description              String?
  price                    Int
  stock                    Int                     @default(0)
  status                   VendorProductStatus     @default(PENDING)
  isDelete                 Boolean                 @default(false)
  postValidationAction     PostValidationAction    @default(AUTO_PUBLISH) @map("post_validation_action")
  adminProductName         String?                 @map("admin_product_name")
  adminProductDescription  String?                 @map("admin_product_description")
  adminProductPrice        Int?                    @map("admin_product_price")
  designBase64             String?                 @map("design_base64")
  designCloudinaryUrl      String?                 @map("design_cloudinary_url")
  designCloudinaryPublicId String?                 @map("design_cloudinary_public_id")
  designPositioning        String?                 @default("CENTER") @map("design_positioning")
  designScale              Float?                  @default(0.6) @map("design_scale")
  designApplicationMode    String?                 @default("PRESERVED") @map("design_application_mode")
  designId                 Int?                    @map("design_id")
  salesCount               Int                     @default(0) @map("sales_count")
  totalRevenue             Float                   @default(0) @map("total_revenue")
  averageRating            Float?                  @map("average_rating")
  lastSaleDate             DateTime?               @map("last_sale_date")
  isBestSeller             Boolean                 @default(false) @map("is_best_seller")
  bestSellerRank           Int?                    @map("best_seller_rank")
  bestSellerCategory       String?                 @map("best_seller_category")
  viewsCount               Int                     @default(0) @map("views_count")
  designWidth              Int?                    @map("design_width")
  designHeight             Int?                    @map("design_height")
  designFormat             String?                 @map("design_format")
  designFileSize           Int?                    @map("design_file_size")
  sizes                    Json
  colors                   Json
  vendorName               String?
  vendorDescription        String?
  vendorStock              Int                     @default(0)
  basePriceAdmin           Float                   @default(0)
  isValidated              Boolean                 @default(false)
  validatedAt              DateTime?
  validatedBy              Int?
  rejectionReason          String?
  submittedForValidationAt DateTime?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  adminValidated           Boolean?                @map("admin_validated")
  vendorSelectedThemeId    Int?                    @map("vendor_selected_theme_id")
  vendorSelectedThemeName  String?                 @map("vendor_selected_theme_name")
  designProductLinks       DesignProductLink[]
  designPositions          ProductDesignPosition[] @relation("VendorProductToDesignPosition")
  designTransforms         VendorDesignTransform[]
  baseProduct              Product                 @relation(fields: [baseProductId], references: [id])
  design                   Design?                 @relation(fields: [designId], references: [id])
  validator                User?                   @relation("VendorProductValidator", fields: [validatedBy], references: [id])
  vendor                   User                    @relation(fields: [vendorId], references: [id])
  images                   VendorProductImage[]

  @@index([vendorId])
  @@index([baseProductId])
  @@index([designId])
  @@index([isValidated])
  @@index([submittedForValidationAt])
  @@index([postValidationAction])
  @@index([isBestSeller])
  @@index([bestSellerRank])
  @@index([salesCount])
  @@index([totalRevenue])
  @@index([lastSaleDate])
}

/// VendorProductImage stocke les images générées pour chaque produit vendeur avec métadonnées Cloudinary
/// ⚠️ DEPRECATED: Cette table sera progressivement remplacée par VendorProductMockup
model VendorProductImage {
  id                 Int             @id @default(autoincrement())
  vendorProductId    Int
  colorId            Int?
  colorName          String?
  colorCode          String?
  imageType          String          @default("color")
  cloudinaryUrl      String
  cloudinaryPublicId String
  originalImageKey   String?
  width              Int?
  height             Int?
  fileSize           Int?
  format             String?
  createdAt          DateTime        @default(now())
  uploadedAt         DateTime        @default(now())
  colorVariation     ColorVariation? @relation(fields: [colorId], references: [id])
  vendorProduct      VendorProduct   @relation(fields: [vendorProductId], references: [id], onDelete: Cascade)

  @@index([vendorProductId])
  @@index([colorId])
  @@index([imageType])
}

model VendorDesignTransform {
  id              Int           @id @default(autoincrement())
  vendorId        Int
  vendorProductId Int
  designUrl       String        @db.VarChar(500)
  transforms      Json
  lastModified    DateTime      @default(now()) @updatedAt
  createdAt       DateTime      @default(now())
  vendor          User          @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorProduct   VendorProduct @relation(fields: [vendorProductId], references: [id], onDelete: Cascade)

  @@unique([vendorId, vendorProductId, designUrl], name: "unique_vendor_product_design")
  @@index([vendorId, vendorProductId], map: "idx_vendor_product")
  @@index([designUrl], map: "idx_design_url")
}

/// 🆕 Table de liaison robuste entre designs et produits vendeur
/// Cette table permet de créer une relation many-to-many entre designs et produits
/// et facilite les cascades de validation
model DesignProductLink {
  id              Int           @id @default(autoincrement())
  designId        Int           @map("design_id")
  vendorProductId Int           @map("vendor_product_id")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  design          Design        @relation(fields: [designId], references: [id], onDelete: Cascade)
  vendorProduct   VendorProduct @relation(fields: [vendorProductId], references: [id], onDelete: Cascade)

  @@unique([designId, vendorProductId], name: "unique_design_product")
  @@index([designId], map: "idx_design_links")
  @@index([vendorProductId], map: "idx_product_links")
}

/// 🆕 Position de design spécifique au couple (VendorProduct, Design)
model ProductDesignPosition {
  vendorProductId Int           @map("vendor_product_id")
  designId        Int           @map("design_id")
  position        Json          @default("{}")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  design          Design        @relation("DesignToDesignPosition", fields: [designId], references: [id], onDelete: Cascade)
  vendorProduct   VendorProduct @relation("VendorProductToDesignPosition", fields: [vendorProductId], references: [id], onDelete: Cascade)

  @@id([vendorProductId, designId])
  @@index([vendorProductId])
  @@index([designId])
}

model EmailChangeRequest {
  id        Int       @id @default(autoincrement())
  userId    Int
  newEmail  String
  token     String    @unique
  expiresAt DateTime
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Theme {
  id                 Int            @id @default(autoincrement())
  name               String
  description        String
  coverImageUrl      String?
  coverImagePublicId String?
  category           String
  status             ThemeStatus    @default(ACTIVE)
  featured           Boolean        @default(false)
  productCount       Int            @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  themeProducts      ThemeProduct[]

  @@index([status])
  @@index([category])
  @@index([featured])
}

model ThemeProduct {
  id        Int      @id @default(autoincrement())
  themeId   Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  theme     Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@unique([themeId, productId])
  @@index([themeId])
  @@index([productId])
}

/// Système de commission vendeur - Table principale
model VendorCommission {
  id                  Int                  @id @default(autoincrement()) @map("id")
  vendorId            Int                  @unique @map("vendor_id")
  commissionRate      Float                @default(40.00) @map("commission_rate")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  createdBy           Int?                 @map("created_by")
  commissionAuditLogs CommissionAuditLog[] @relation("CommissionAuditVendorUser")
  createdByUser       User?                @relation("CommissionCreatedByUser", fields: [createdBy], references: [id])
  vendor              User                 @relation("VendorCommissionToUser", fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([commissionRate])
  @@map("vendor_commissions")
}

/// Logs d'audit pour traçabilité des changements de commission
model CommissionAuditLog {
  id            Int              @id @default(autoincrement()) @map("id")
  vendorId      Int              @map("vendor_id")
  oldRate       Float?           @map("old_rate")
  newRate       Float            @map("new_rate")
  changedBy     Int              @map("changed_by")
  changedAt     DateTime         @default(now()) @map("changed_at")
  ipAddress     String?          @map("ip_address")
  userAgent     String?          @map("user_agent")
  changedByUser User             @relation("CommissionAuditChanger", fields: [changedBy], references: [id], onDelete: Cascade, map: "audit_log_changer_fkey")
  vendorCommission VendorCommission @relation("CommissionAuditVendorUser", fields: [vendorId], references: [vendorId], onDelete: Cascade, map: "audit_log_vendor_commission_fkey")
  vendorUser    User             @relation("CommissionAuditVendorUser", fields: [vendorId], references: [id], onDelete: Cascade, map: "audit_log_vendor_user_fkey")

  @@index([vendorId])
  @@index([changedBy])
  @@index([changedAt])
  @@map("commission_audit_log")
}

/// Table principale pour les demandes d'appel de fonds
model VendorFundsRequest {
  id               Int                       @id @default(autoincrement())
  vendorId         Int                       @map("vendor_id")
  amount           Float
  requestedAmount  Float                     @map("requested_amount")
  description      String
  paymentMethod    PaymentMethodType         @map("payment_method")
  phoneNumber      String?                   @map("phone_number") @db.VarChar(20)
  status           FundsRequestStatus        @default(PENDING)
  rejectReason     String?                   @map("reject_reason")
  adminNote        String?                   @map("admin_note")
  processedBy      Int?                      @map("processed_by")
  processedAt      DateTime?                 @map("processed_at")
  availableBalance Float                     @map("available_balance")
  commissionRate   Float                     @default(0.10) @map("commission_rate")
  createdAt        DateTime                  @default(now()) @map("created_at")
  updatedAt        DateTime                  @updatedAt @map("updated_at")
  bankIban         String?                   @map("bank_iban") @db.VarChar(64)
  requestedAt      DateTime                  @default(now()) @map("requested_at")
  validatedAt      DateTime?                 @map("validated_at")
  orderLinks       VendorFundsRequestOrder[]
  processedByUser  User?                     @relation("ProcessedFundsRequests", fields: [processedBy], references: [id])
  vendor           User                      @relation("VendorFundsRequests", fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId, status], map: "idx_vendor_status")
  @@index([status, createdAt], map: "idx_status_date")
  @@index([processedAt], map: "idx_processed_date")
  @@map("vendor_funds_requests")
}

/// Table de liaison entre demandes de fonds et commandes
model VendorFundsRequestOrder {
  id             Int                @id @default(autoincrement())
  fundsRequestId Int                @map("funds_request_id")
  orderId        Int                @map("order_id")
  createdAt      DateTime           @default(now()) @map("created_at")
  fundsRequest   VendorFundsRequest @relation(fields: [fundsRequestId], references: [id], onDelete: Cascade)
  order          Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([fundsRequestId, orderId], name: "unique_request_order")
  @@index([fundsRequestId], map: "idx_funds_request")
  @@index([orderId], map: "idx_order")
  @@map("vendor_funds_request_orders")
}

/// Cache des gains vendeur pour optimiser les performances
model VendorEarnings {
  id                    Int      @id @default(autoincrement())
  vendorId              Int      @unique @map("vendor_id")
  totalEarnings         Float    @default(0) @map("total_earnings")
  availableAmount       Float    @default(0) @map("available_amount")
  pendingAmount         Float    @default(0) @map("pending_amount")
  thisMonthEarnings     Float    @default(0) @map("this_month_earnings")
  lastMonthEarnings     Float    @default(0) @map("last_month_earnings")
  totalCommissionPaid   Float    @default(0) @map("total_commission_paid")
  averageCommissionRate Float    @default(0.10) @map("average_commission_rate")
  lastCalculatedAt      DateTime @default(now()) @map("last_calculated_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  vendor                User     @relation("VendorEarnings", fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId], map: "idx_vendor")
  @@map("vendor_earnings")
}

enum PublicationStatus {
  PUBLISHED
  DRAFT
  PENDING
}

enum VendorProductStatus {
  PUBLISHED
  DRAFT
  PENDING
  REJECTED
}

enum ProductGenre {
  HOMME
  FEMME
  BEBE
  UNISEXE
}

enum PostValidationAction {
  AUTO_PUBLISH
  TO_DRAFT
}

enum ViewType {
  FRONT
  BACK
  LEFT
  RIGHT
  TOP
  BOTTOM
  DETAIL
  OTHER
}

enum Role {
  SUPERADMIN
  ADMIN
  VENDEUR
}

enum VendeurType {
  DESIGNER
  INFLUENCEUR
  ARTISTE
}

enum SizeType {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REJECTED
}

enum NotificationType {
  ORDER_NEW
  ORDER_UPDATED
  SYSTEM
  SUCCESS
  WARNING
  ERROR
}

enum CoordinateType {
  PERCENTAGE
  ABSOLUTE
}

enum ThemeStatus {
  ACTIVE
  INACTIVE
}

/// Enums pour le système d'appel de fonds
enum PaymentMethodType {
  WAVE
  ORANGE_MONEY
  BANK_TRANSFER
}

enum FundsRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

/// Table des types de vendeurs personnalisables
model VendorType {
  id          Int      @id @default(autoincrement())
  label       String   @unique
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]   @relation("UserVendorType")

  @@map("vendor_types")
}

enum StockMovementType {
  IN
  OUT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

/// Système de rôles personnalisables (RBAC)
model CustomRole {
  id          Int                   @id @default(autoincrement())
  name        String
  slug        String                @unique
  description String?
  isSystem    Boolean               @default(false) @map("is_system")
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @updatedAt @map("updated_at")
  users       User[]                @relation("UserCustomRole")
  permissions RolePermission[]      @relation("RolePermissions")

  @@index([slug])
  @@index([isSystem])
  @@map("custom_roles")
}

/// Permissions granulaires
model Permission {
  id          Int              @id @default(autoincrement())
  key         String           @unique
  name        String
  description String?
  module      String
  createdAt   DateTime         @default(now()) @map("created_at")
  roles       RolePermission[] @relation("PermissionRoles")

  @@index([module])
  @@index([key])
  @@map("permissions")
}

/// Table pivot pour les permissions des rôles
model RolePermission {
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  role         CustomRole @relation("RolePermissions", fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation("PermissionRoles", fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

/// Logs d'audit pour traçabilité
model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  action     String
  entityType String   @map("entity_type")
  entityId   Int?     @map("entity_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User?    @relation("AuditLogUser", fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt(sort: Desc)])
  @@map("audit_logs")
}
