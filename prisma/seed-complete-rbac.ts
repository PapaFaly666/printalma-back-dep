import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * üéØ SYST√àME RBAC COMPLET - Bas√© sur les modules r√©els du backend
 *
 * Modules d√©tect√©s dans le backend:
 * - Gestion des utilisateurs (users)
 * - Gestion des r√¥les et permissions (roles)
 * - Gestion des produits/mockups (products)
 * - Gestion des cat√©gories (categories)
 * - Gestion des th√®mes (themes)
 * - Gestion des designs (designs)
 * - Gestion des vendeurs (vendors)
 * - Gestion des stocks (stocks)
 * - Validation des designs (design-validation)
 * - Gestion des demandes de fonds (funds)
 * - Gestion des commissions (commissions)
 * - Gestion des commandes (orders)
 * - Autres modules (notifications, colors, sizes, etc.)
 */

async function main() {
  console.log('üöÄ D√©marrage du seed RBAC complet...\n');

  // ========================================
  // 1Ô∏è‚É£ D√âFINITION DES MODULES ET PERMISSIONS
  // ========================================

  const MODULES_PERMISSIONS = [
    // üë• Gestion des utilisateurs
    {
      module: 'users',
      label: 'Utilisateurs',
      description: 'Gestion des utilisateurs du syst√®me',
      permissions: [
        { key: 'users.view', name: 'Voir les utilisateurs', description: 'Consulter la liste des utilisateurs' },
        { key: 'users.create', name: 'Cr√©er un utilisateur', description: 'Ajouter de nouveaux utilisateurs' },
        { key: 'users.update', name: 'Modifier un utilisateur', description: 'Modifier les informations des utilisateurs' },
        { key: 'users.delete', name: 'Supprimer un utilisateur', description: 'Supprimer des utilisateurs' },
        { key: 'users.manage-roles', name: 'G√©rer les r√¥les utilisateurs', description: 'Attribuer/retirer des r√¥les' },
        { key: 'users.manage-status', name: 'G√©rer le statut', description: 'Activer/d√©sactiver des comptes' },
      ]
    },

    // üîê Gestion des r√¥les et permissions
    {
      module: 'roles',
      label: 'R√¥les & Permissions',
      description: 'Gestion des r√¥les et permissions',
      permissions: [
        { key: 'roles.view', name: 'Voir les r√¥les', description: 'Consulter la liste des r√¥les' },
        { key: 'roles.create', name: 'Cr√©er un r√¥le', description: 'Cr√©er de nouveaux r√¥les' },
        { key: 'roles.update', name: 'Modifier un r√¥le', description: 'Modifier les r√¥les existants' },
        { key: 'roles.delete', name: 'Supprimer un r√¥le', description: 'Supprimer des r√¥les' },
        { key: 'roles.manage-permissions', name: 'G√©rer les permissions', description: 'Attribuer des permissions aux r√¥les' },
      ]
    },

    // üé® Gestion des produits/mockups
    {
      module: 'products',
      label: 'Produits & Mockups',
      description: 'Gestion des produits et mockups',
      permissions: [
        { key: 'products.view', name: 'Voir les produits', description: 'Consulter la liste des produits' },
        { key: 'products.create', name: 'Cr√©er un produit', description: 'Ajouter de nouveaux produits/mockups' },
        { key: 'products.update', name: 'Modifier un produit', description: 'Modifier les produits existants' },
        { key: 'products.delete', name: 'Supprimer un produit', description: 'Supprimer des produits' },
        { key: 'products.manage-images', name: 'G√©rer les images', description: 'Ajouter/supprimer des images de produits' },
        { key: 'products.manage-variants', name: 'G√©rer les variantes', description: 'G√©rer les couleurs, tailles, etc.' },
      ]
    },

    // üìÅ Gestion des cat√©gories
    {
      module: 'categories',
      label: 'Cat√©gories',
      description: 'Gestion des cat√©gories de produits',
      permissions: [
        { key: 'categories.view', name: 'Voir les cat√©gories', description: 'Consulter les cat√©gories' },
        { key: 'categories.create', name: 'Cr√©er une cat√©gorie', description: 'Ajouter de nouvelles cat√©gories' },
        { key: 'categories.update', name: 'Modifier une cat√©gorie', description: 'Modifier les cat√©gories existantes' },
        { key: 'categories.delete', name: 'Supprimer une cat√©gorie', description: 'Supprimer des cat√©gories' },
        { key: 'categories.manage-hierarchy', name: 'G√©rer la hi√©rarchie', description: 'Organiser les cat√©gories parent/enfant' },
      ]
    },

    // üé≠ Gestion des th√®mes
    {
      module: 'themes',
      label: 'Th√®mes',
      description: 'Gestion des th√®mes de designs',
      permissions: [
        { key: 'themes.view', name: 'Voir les th√®mes', description: 'Consulter les th√®mes' },
        { key: 'themes.create', name: 'Cr√©er un th√®me', description: 'Ajouter de nouveaux th√®mes' },
        { key: 'themes.update', name: 'Modifier un th√®me', description: 'Modifier les th√®mes existants' },
        { key: 'themes.delete', name: 'Supprimer un th√®me', description: 'Supprimer des th√®mes' },
      ]
    },

    // üñºÔ∏è Gestion des designs
    {
      module: 'designs',
      label: 'Designs',
      description: 'Gestion des designs cr√©√©s par les vendeurs',
      permissions: [
        { key: 'designs.view', name: 'Voir les designs', description: 'Consulter tous les designs' },
        { key: 'designs.view-own', name: 'Voir ses propres designs', description: 'Voir uniquement ses designs' },
        { key: 'designs.create', name: 'Cr√©er un design', description: 'Uploader de nouveaux designs' },
        { key: 'designs.update', name: 'Modifier un design', description: 'Modifier ses designs' },
        { key: 'designs.delete', name: 'Supprimer un design', description: 'Supprimer des designs' },
        { key: 'designs.validate', name: 'Valider les designs', description: 'Valider/rejeter les designs des vendeurs' },
        { key: 'designs.auto-validate', name: 'Auto-validation', description: 'Activer la validation automatique' },
      ]
    },

    // üõçÔ∏è Gestion des vendeurs
    {
      module: 'vendors',
      label: 'Vendeurs',
      description: 'Gestion des vendeurs et leurs produits',
      permissions: [
        { key: 'vendors.view', name: 'Voir les vendeurs', description: 'Consulter la liste des vendeurs' },
        { key: 'vendors.create', name: 'Cr√©er un vendeur', description: 'Ajouter de nouveaux vendeurs' },
        { key: 'vendors.update', name: 'Modifier un vendeur', description: 'Modifier les informations vendeurs' },
        { key: 'vendors.delete', name: 'Supprimer un vendeur', description: 'Supprimer des vendeurs' },
        { key: 'vendors.manage-products', name: 'G√©rer les produits vendeurs', description: 'Cr√©er/modifier produits vendeurs' },
        { key: 'vendors.validate-products', name: 'Valider les produits', description: 'Valider les produits des vendeurs' },
        { key: 'vendors.manage-types', name: 'G√©rer les types vendeurs', description: 'Cr√©er/modifier types de vendeurs' },
      ]
    },

    // üì¶ Gestion des stocks
    {
      module: 'stocks',
      label: 'Stocks',
      description: 'Gestion des stocks et inventaire',
      permissions: [
        { key: 'stocks.view', name: 'Voir les stocks', description: 'Consulter les niveaux de stock' },
        { key: 'stocks.update', name: 'Mettre √† jour les stocks', description: 'Modifier les quantit√©s en stock' },
        { key: 'stocks.view-history', name: 'Voir l\'historique', description: 'Consulter les mouvements de stock' },
        { key: 'stocks.manage-alerts', name: 'G√©rer les alertes', description: 'Configurer les alertes de stock bas' },
      ]
    },

    // üí∞ Gestion des demandes de fonds
    {
      module: 'funds',
      label: 'Demandes de Fonds',
      description: 'Gestion des demandes de retrait des vendeurs',
      permissions: [
        { key: 'funds.view', name: 'Voir les demandes', description: 'Consulter les demandes de fonds' },
        { key: 'funds.view-own', name: 'Voir ses demandes', description: 'Voir uniquement ses propres demandes' },
        { key: 'funds.create', name: 'Cr√©er une demande', description: 'Cr√©er une demande de retrait' },
        { key: 'funds.process', name: 'Traiter les demandes', description: 'Approuver/rejeter les demandes' },
        { key: 'funds.view-stats', name: 'Voir les statistiques', description: 'Consulter les stats de paiements' },
      ]
    },

    // üíµ Gestion des commissions
    {
      module: 'commissions',
      label: 'Commissions',
      description: 'Gestion des commissions vendeurs',
      permissions: [
        { key: 'commissions.view', name: 'Voir les commissions', description: 'Consulter les taux de commission' },
        { key: 'commissions.create', name: 'Cr√©er une commission', description: 'D√©finir des taux de commission' },
        { key: 'commissions.update', name: 'Modifier une commission', description: 'Changer les taux de commission' },
        { key: 'commissions.delete', name: 'Supprimer une commission', description: 'Supprimer des commissions' },
        { key: 'commissions.view-earnings', name: 'Voir les gains', description: 'Consulter les gains vendeurs' },
      ]
    },

    // üìã Gestion des commandes
    {
      module: 'orders',
      label: 'Commandes',
      description: 'Gestion des commandes clients',
      permissions: [
        { key: 'orders.view', name: 'Voir les commandes', description: 'Consulter toutes les commandes' },
        { key: 'orders.view-own', name: 'Voir ses commandes', description: 'Voir uniquement ses commandes vendeur' },
        { key: 'orders.update-status', name: 'Modifier le statut', description: 'Changer le statut des commandes' },
        { key: 'orders.validate', name: 'Valider les commandes', description: 'Valider les commandes' },
        { key: 'orders.cancel', name: 'Annuler une commande', description: 'Annuler des commandes' },
        { key: 'orders.view-stats', name: 'Voir les statistiques', description: 'Consulter les stats de ventes' },
      ]
    },

    // üîî Autres modules
    {
      module: 'notifications',
      label: 'Notifications',
      description: 'Gestion des notifications syst√®me',
      permissions: [
        { key: 'notifications.view', name: 'Voir les notifications', description: 'Consulter les notifications' },
        { key: 'notifications.create', name: 'Cr√©er une notification', description: 'Envoyer des notifications' },
        { key: 'notifications.delete', name: 'Supprimer une notification', description: 'Supprimer des notifications' },
      ]
    },

    // ‚öôÔ∏è Configuration syst√®me
    {
      module: 'system',
      label: 'Syst√®me',
      description: 'Configuration et param√®tres syst√®me',
      permissions: [
        { key: 'system.view-settings', name: 'Voir les param√®tres', description: 'Consulter les param√®tres syst√®me' },
        { key: 'system.update-settings', name: 'Modifier les param√®tres', description: 'Modifier la configuration' },
        { key: 'system.view-logs', name: 'Voir les logs', description: 'Consulter les logs syst√®me' },
        { key: 'system.manage-cloudinary', name: 'G√©rer Cloudinary', description: 'G√©rer le stockage des images' },
      ]
    },
  ];

  console.log('üì¶ Modules √† cr√©er:', MODULES_PERMISSIONS.length);

  // ========================================
  // 2Ô∏è‚É£ CR√âATION DES PERMISSIONS
  // ========================================

  console.log('\nüîë Cr√©ation des permissions...');
  const createdPermissions: { [key: string]: number } = {};

  for (const moduleData of MODULES_PERMISSIONS) {
    console.log(`\nüìÇ Module: ${moduleData.label}`);

    for (const perm of moduleData.permissions) {
      const permission = await prisma.permission.upsert({
        where: { key: perm.key },
        update: {
          name: perm.name,
          description: perm.description,
          module: moduleData.module,
        },
        create: {
          key: perm.key,
          name: perm.name,
          description: perm.description,
          module: moduleData.module,
        },
      });

      createdPermissions[perm.key] = permission.id;
      console.log(`   ‚úÖ ${perm.key}`);
    }
  }

  const totalPermissions = Object.keys(createdPermissions).length;
  console.log(`\n‚ú® Total: ${totalPermissions} permissions cr√©√©es`);

  // ========================================
  // 3Ô∏è‚É£ CR√âATION DES R√îLES PR√âD√âFINIS
  // ========================================

  console.log('\n\nüë• Cr√©ation des r√¥les pr√©d√©finis...\n');

  // üëë SUPERADMIN - Toutes les permissions
  const superadminRole = await prisma.customRole.upsert({
    where: { slug: 'superadmin' },
    update: {
      name: 'Super Administrateur',
      description: 'Acc√®s complet √† toutes les fonctionnalit√©s du syst√®me',
    },
    create: {
      name: 'Super Administrateur',
      slug: 'superadmin',
      description: 'Acc√®s complet √† toutes les fonctionnalit√©s du syst√®me',
    },
  });

  // Attribuer TOUTES les permissions au superadmin
  for (const permKey of Object.keys(createdPermissions)) {
    await prisma.rolePermission.upsert({
      where: {
        roleId_permissionId: {
          roleId: superadminRole.id,
          permissionId: createdPermissions[permKey],
        },
      },
      update: {},
      create: {
        roleId: superadminRole.id,
        permissionId: createdPermissions[permKey],
      },
    });
  }
  console.log(`üëë Super Administrateur: ${totalPermissions} permissions`);

  // üë§ ADMIN - Gestion compl√®te sauf syst√®me
  const adminPermissions = Object.keys(createdPermissions).filter(
    key => !key.startsWith('system.') && !key.startsWith('roles.')
  );

  const adminRole = await prisma.customRole.upsert({
    where: { slug: 'admin' },
    update: {
      name: 'Administrateur',
      description: 'Gestion des utilisateurs, produits, commandes',
    },
    create: {
      name: 'Administrateur',
      slug: 'admin',
      description: 'Gestion des utilisateurs, produits, commandes',
    },
  });

  for (const permKey of adminPermissions) {
    await prisma.rolePermission.upsert({
      where: {
        roleId_permissionId: {
          roleId: adminRole.id,
          permissionId: createdPermissions[permKey],
        },
      },
      update: {},
      create: {
        roleId: adminRole.id,
        permissionId: createdPermissions[permKey],
      },
    });
  }
  console.log(`‚ö° Administrateur: ${adminPermissions.length} permissions`);

  // üí∞ GESTIONNAIRE FINANCIER - Finances et commissions
  const financePermissions = Object.keys(createdPermissions).filter(
    key => key.startsWith('funds.') ||
           key.startsWith('commissions.') ||
           key.startsWith('orders.view') ||
           key.startsWith('vendors.view')
  );

  const financeRole = await prisma.customRole.upsert({
    where: { slug: 'finance' },
    update: {
      name: 'Gestionnaire Financier',
      description: 'Gestion des demandes de fonds et commissions',
    },
    create: {
      name: 'Gestionnaire Financier',
      slug: 'finance',
      description: 'Gestion des demandes de fonds et commissions',
    },
  });

  for (const permKey of financePermissions) {
    await prisma.rolePermission.upsert({
      where: {
        roleId_permissionId: {
          roleId: financeRole.id,
          permissionId: createdPermissions[permKey],
        },
      },
      update: {},
      create: {
        roleId: financeRole.id,
        permissionId: createdPermissions[permKey],
      },
    });
  }
  console.log(`üí∞ Gestionnaire Financier: ${financePermissions.length} permissions`);

  // üè≠ GESTIONNAIRE PRODUCTION - Produits, stocks, cat√©gories
  const productionPermissions = Object.keys(createdPermissions).filter(
    key => key.startsWith('products.') ||
           key.startsWith('stocks.') ||
           key.startsWith('categories.') ||
           key.startsWith('themes.')
  );

  const productionRole = await prisma.customRole.upsert({
    where: { slug: 'production' },
    update: {
      name: 'Gestionnaire Production',
      description: 'Gestion des produits, stocks et cat√©gories',
    },
    create: {
      name: 'Gestionnaire Production',
      slug: 'production',
      description: 'Gestion des produits, stocks et cat√©gories',
    },
  });

  for (const permKey of productionPermissions) {
    await prisma.rolePermission.upsert({
      where: {
        roleId_permissionId: {
          roleId: productionRole.id,
          permissionId: createdPermissions[permKey],
        },
      },
      update: {},
      create: {
        roleId: productionRole.id,
        permissionId: createdPermissions[permKey],
      },
    });
  }
  console.log(`üè≠ Gestionnaire Production: ${productionPermissions.length} permissions`);

  // üé® VALIDATEUR DESIGN - Validation des designs
  const designValidatorPermissions = Object.keys(createdPermissions).filter(
    key => key.startsWith('designs.') ||
           key.startsWith('vendors.view') ||
           key.startsWith('themes.view')
  );

  const designValidatorRole = await prisma.customRole.upsert({
    where: { slug: 'design-validator' },
    update: {
      name: 'Validateur de Designs',
      description: 'Validation et gestion des designs vendeurs',
    },
    create: {
      name: 'Validateur de Designs',
      slug: 'design-validator',
      description: 'Validation et gestion des designs vendeurs',
    },
  });

  for (const permKey of designValidatorPermissions) {
    await prisma.rolePermission.upsert({
      where: {
        roleId_permissionId: {
          roleId: designValidatorRole.id,
          permissionId: createdPermissions[permKey],
        },
      },
      update: {},
      create: {
        roleId: designValidatorRole.id,
        permissionId: createdPermissions[permKey],
      },
    });
  }
  console.log(`üé® Validateur de Designs: ${designValidatorPermissions.length} permissions`);

  // üõçÔ∏è VENDEUR - Permissions limit√©es
  const vendorPermissions = Object.keys(createdPermissions).filter(
    key => key.includes('.view-own') ||
           key.includes('designs.create') ||
           key.includes('designs.update') ||
           key.includes('designs.delete') ||
           key.includes('funds.create') ||
           key.includes('vendors.manage-products') ||
           key.includes('products.view') ||
           key.includes('categories.view') ||
           key.includes('themes.view')
  );

  const vendorRole = await prisma.customRole.upsert({
    where: { slug: 'vendor' },
    update: {
      name: 'Vendeur',
      description: 'Gestion de ses propres designs et produits',
    },
    create: {
      name: 'Vendeur',
      slug: 'vendor',
      description: 'Gestion de ses propres designs et produits',
    },
  });

  for (const permKey of vendorPermissions) {
    await prisma.rolePermission.upsert({
      where: {
        roleId_permissionId: {
          roleId: vendorRole.id,
          permissionId: createdPermissions[permKey],
        },
      },
      update: {},
      create: {
        roleId: vendorRole.id,
        permissionId: createdPermissions[permKey],
      },
    });
  }
  console.log(`üõçÔ∏è Vendeur: ${vendorPermissions.length} permissions`);

  // ========================================
  // 4Ô∏è‚É£ R√âSUM√â
  // ========================================

  console.log('\n\n' + '='.repeat(60));
  console.log('‚úÖ SEED RBAC COMPLET TERMIN√â');
  console.log('='.repeat(60));
  console.log(`\nüìä Statistiques:`);
  console.log(`   ‚Ä¢ ${MODULES_PERMISSIONS.length} modules`);
  console.log(`   ‚Ä¢ ${totalPermissions} permissions`);
  console.log(`   ‚Ä¢ 6 r√¥les pr√©d√©finis`);
  console.log('\nüéØ R√¥les cr√©√©s:');
  console.log('   1. Super Administrateur (toutes permissions)');
  console.log('   2. Administrateur (gestion compl√®te)');
  console.log('   3. Gestionnaire Financier (finances + commissions)');
  console.log('   4. Gestionnaire Production (produits + stocks)');
  console.log('   5. Validateur de Designs (validation designs)');
  console.log('   6. Vendeur (gestion limit√©e)');
  console.log('\nüí° Prochaines √©tapes:');
  console.log('   1. Le SUPERADMIN peut cr√©er des r√¥les personnalis√©s');
  console.log('   2. Le SUPERADMIN peut attribuer des permissions CRUD aux r√¥les');
  console.log('   3. Le SUPERADMIN peut cr√©er des utilisateurs avec des r√¥les sp√©cifiques');
  console.log('\n');
}

main()
  .catch((e) => {
    console.error('‚ùå Erreur lors du seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
