const axios = require('axios');

const API_BASE = 'http://localhost:3000';

async function getAuthToken() {
  try {
    const response = await axios.post(`${API_BASE}/auth/login`, {
      email: 'hamdouche.alami@gmail.com',
      password: 'Azerty@123'
    });
    return response.data.access_token;
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.response?.data || error.message);
    throw error;
  }
}

async function testAPIContraintes() {
  console.log('üåê TEST DES CONTRAINTES VIA API REST\n');

  let token;
  try {
    token = await getAuthToken();
    console.log('‚úÖ Authentification r√©ussie');
  } catch (error) {
    console.log('‚ùå Impossible de s\'authentifier. Test arr√™t√©.');
    return;
  }

  const headers = {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };

  try {
    // √âTAPE 1: Cr√©er la hi√©rarchie via l'API
    console.log('\nüìÅ √âTAPE 1: Cr√©ation de la hi√©rarchie via API');

    // Cr√©er la cat√©gorie
    const categoryResponse = await axios.post(`${API_BASE}/categories`, {
      name: 'V√™tements API Test',
      slug: 'vetements-api-test',
      description: 'Cat√©gorie pour test API des contraintes',
      displayOrder: 1,
      isActive: true
    }, { headers });

    const category = categoryResponse.data;
    console.log(`‚úÖ Cat√©gorie cr√©√©e via API: "${category.name}" (ID: ${category.id})`);

    // Cr√©er la sous-cat√©gorie
    const subCategoryResponse = await axios.post(`${API_BASE}/sub-categories`, {
      name: 'T-shirts API Test',
      slug: 't-shirts-api-test',
      description: 'Sous-cat√©gorie pour test API',
      categoryId: category.id,
      displayOrder: 1,
      isActive: true
    }, { headers });

    const subCategory = subCategoryResponse.data;
    console.log(`‚úÖ Sous-cat√©gorie cr√©√©e via API: "${subCategory.name}" (ID: ${subCategory.id})`);

    // Cr√©er la variation
    const variationResponse = await axios.post(`${API_BASE}/variations`, {
      name: 'Col Rond API Test',
      slug: 'col-rond-api-test',
      description: 'Variation pour test API',
      subCategoryId: subCategory.id,
      displayOrder: 1,
      isActive: true
    }, { headers });

    const variation = variationResponse.data;
    console.log(`‚úÖ Variation cr√©√©e via API: "${variation.name}" (ID: ${variation.id})`);

    console.log('\nüìä Hi√©rarchie API cr√©√©e:');
    console.log(`   ${category.name} ‚Üí ${subCategory.name} ‚Üí ${variation.name}`);

    // √âTAPE 2: Cr√©er un produit via l'API
    console.log('\nüì¶ √âTAPE 2: Cr√©ation d\'un produit via API');

    const productResponse = await axios.post(`${API_BASE}/products`, {
      name: 'T-shirt Test API Contraintes',
      description: 'T-shirt cr√©√© via API pour tester les contraintes de suppression',
      price: 29.99,
      stock: 100,
      status: 'PUBLISHED',
      categoryId: category.id,
      subCategoryId: subCategory.id,
      variationId: variation.id,
      colorVariations: [
        {
          name: 'Blanc',
          colorCode: '#FFFFFF'
        }
      ],
      sizes: ['M', 'L']
    }, { headers });

    const product = productResponse.data;
    console.log(`‚úÖ Produit cr√©√© via API: "${product.name}" (ID: ${product.id})`);
    console.log(`   üè∑Ô∏è  Cat√©gorie: ${product.categoryId} (${category.name})`);
    console.log(`   üìÇ Sous-cat√©gorie: ${product.subCategoryId} (${subCategory.name})`);
    console.log(`   üé® Variation: ${product.variationId} (${variation.name})`);

    // √âTAPE 3: V√©rifier que le produit est bien li√©
    console.log('\nüîç √âTAPE 3: V√©rification du produit cr√©√©');

    const productCheckResponse = await axios.get(`${API_BASE}/products/${product.id}`, { headers });
    const productCheck = productCheckResponse.data;

    console.log(`Produit v√©rifi√©: ${productCheck.name}`);
    console.log(`   - categoryId: ${productCheck.categoryId} (${productCheck.categoryId ? '‚úÖ LI√â' : '‚ùå NON LI√â'})`);
    console.log(`   - subCategoryId: ${productCheck.subCategoryId} (${productCheck.subCategoryId ? '‚úÖ LI√â' : '‚ùå NON LI√â'})`);
    console.log(`   - variationId: ${productCheck.variationId} (${productCheck.variationId ? '‚úÖ LI√â' : '‚ùå NON LI√â'})`);

    // √âTAPE 4: TESTS DE SUPPRESSION VIA API
    console.log('\nüóëÔ∏è  √âTAPE 4: TESTS DE SUPPRESSION VIA API');
    console.log('==========================================');

    // Test 1: Supprimer la variation utilis√©e par le produit
    console.log('\n‚û°Ô∏è  TEST 1: Suppression de la VARIATION via API');
    console.log(`   URL: DELETE ${API_BASE}/variations/${variation.id}`);
    console.log(`   Variation: "${variation.name}" utilis√©e par le produit "${product.name}"`);
    console.log(`   üö® ATTENDU: Devrait √©chouer car la variation est utilis√©e`);

    try {
      await axios.delete(`${API_BASE}/variations/${variation.id}`, { headers });
      console.log('   ‚ùå üö® PROBL√àME: La variation a √©t√© supprim√©e via API !');

      // V√©rifier l'impact sur le produit
      const productAfterVariationDeletion = await axios.get(`${API_BASE}/products/${product.id}`, { headers });
      const updatedProduct = productAfterVariationDeletion.data;

      console.log('   üìä √âtat du produit apr√®s suppression de la variation:');
      console.log(`      - variationId: ${updatedProduct.variationId} (devrait √™tre ${variation.id})`);
      console.log(`      - √âtat: ${updatedProduct.variationId === null ? '‚ùå PERDU' : '‚úÖ CONSERV√â'}`);

    } catch (error) {
      console.log('   ‚úÖ BON: La variation est prot√©g√©e par l\'API !');
      console.log(`   ‚úÖ Statut: ${error.response?.status}`);
      console.log(`   ‚úÖ Message: ${error.response?.data?.message || error.message}`);
    }

    // Test 2: Supprimer la sous-cat√©gorie utilis√©e par le produit
    console.log('\n‚û°Ô∏è  TEST 2: Suppression de la SOUS-CAT√âGORIE via API');
    console.log(`   URL: DELETE ${API_BASE}/sub-categories/${subCategory.id}`);
    console.log(`   Sous-cat√©gorie: "${subCategory.name}" utilis√©e par le produit "${product.name}"`);
    console.log(`   üö® ATTENDU: Devrait √©chouer car la sous-cat√©gorie est utilis√©e`);

    try {
      await axios.delete(`${API_BASE}/sub-categories/${subCategory.id}`, { headers });
      console.log('   ‚ùå üö® PROBL√àME: La sous-cat√©gorie a √©t√© supprim√©e via API !');

      // V√©rifier l'impact sur le produit
      const productAfterSubCategoryDeletion = await axios.get(`${API_BASE}/products/${product.id}`, { headers });
      const updatedProduct2 = productAfterSubCategoryDeletion.data;

      console.log('   üìä √âtat du produit apr√®s suppression de la sous-cat√©gorie:');
      console.log(`      - subCategoryId: ${updatedProduct2.subCategoryId} (devrait √™tre ${subCategory.id})`);
      console.log(`      - √âtat: ${updatedProduct2.subCategoryId === null ? '‚ùå PERDU' : '‚úÖ CONSERV√â'}`);

    } catch (error) {
      console.log('   ‚úÖ BON: La sous-cat√©gorie est prot√©g√©e par l\'API !');
      console.log(`   ‚úÖ Statut: ${error.response?.status}`);
      console.log(`   ‚úÖ Message: ${error.response?.data?.message || error.message}`);
    }

    // Test 3: Supprimer la cat√©gorie utilis√©e par le produit
    console.log('\n‚û°Ô∏è  TEST 3: Suppression de la CAT√âGORIE via API');
    console.log(`   URL: DELETE ${API_BASE}/categories/${category.id}`);
    console.log(`   Cat√©gorie: "${category.name}" utilis√©e par le produit "${product.name}"`);
    console.log(`   üö® ATTENDU: Devrait √©chouer car la cat√©gorie est utilis√©e`);

    try {
      await axios.delete(`${API_BASE}/categories/${category.id}`, { headers });
      console.log('   ‚ùå üö® PROBL√àME: La cat√©gorie a √©t√© supprim√©e via API !');

      // V√©rifier l'impact sur le produit
      const productAfterCategoryDeletion = await axios.get(`${API_BASE}/products/${product.id}`, { headers });
      const updatedProduct3 = productAfterCategoryDeletion.data;

      console.log('   üìä √âtat du produit apr√®s suppression de la cat√©gorie:');
      console.log(`      - categoryId: ${updatedProduct3.categoryId} (devrait √™tre ${category.id})`);
      console.log(`      - √âtat: ${updatedProduct3.categoryId === null ? '‚ùå PERDU' : '‚úÖ CONSERV√â'}`);

    } catch (error) {
      console.log('   ‚úÖ BON: La cat√©gorie est prot√©g√©e par l\'API !');
      console.log(`   ‚úÖ Statut: ${error.response?.status}`);
      console.log(`   ‚úÖ Message: ${error.response?.data?.message || error.message}`);
    }

    // √âTAPE 5: Nettoyage via API (processus correct)
    console.log('\nüßπ √âTAPE 5: Nettoyage via API (processus correct)');
    console.log('Suppression du produit en premier...');

    try {
      await axios.delete(`${API_BASE}/products/${product.id}`, { headers });
      console.log('‚úÖ Produit supprim√© via API (processus correct)');

      // Maintenant essayer de supprimer la hi√©rarchie
      try {
        await axios.delete(`${API_BASE}/variations/${variation.id}`, { headers });
        console.log('‚úÖ Variation supprim√©e apr√®s suppression du produit');
      } catch (error) {
        console.log(`‚ÑπÔ∏è  Variation: ${error.response?.data?.message || 'D√©j√† supprim√©e'}`);
      }

      try {
        await axios.delete(`${API_BASE}/sub-categories/${subCategory.id}`, { headers });
        console.log('‚úÖ Sous-cat√©gorie supprim√©e');
      } catch (error) {
        console.log(`‚ÑπÔ∏è  Sous-cat√©gorie: ${error.response?.data?.message || 'D√©j√† supprim√©e'}`);
      }

      try {
        await axios.delete(`${API_BASE}/categories/${category.id}`, { headers });
        console.log('‚úÖ Cat√©gorie supprim√©e');
      } catch (error) {
        console.log(`‚ÑπÔ∏è  Cat√©gorie: ${error.response?.data?.message || 'D√©j√† supprim√©e'}`);
      }

    } catch (error) {
      console.log(`‚ùå Erreur lors du nettoyage: ${error.response?.data?.message || error.message}`);
    }

    // CONCLUSION FINALE
    console.log('\nüéØ CONCLUSION DU TEST API');
    console.log('=========================');
    console.log('');
    console.log('Ce test simule un cas d\'usage r√©el via l\'API REST.');
    console.log('');
    console.log('üìã COMPORTEMENT ATTENDU:');
    console.log('   ‚Ä¢ Les entit√©s utilis√©es par des produits ne doivent PAS pouvoir √™tre supprim√©es');
    console.log('   ‚Ä¢ L\'API doit retourner une erreur 400/409/500');
    console.log('');
    console.log('üö® SI LES SUPPRESSIONS ONT R√âUSSI: PROBL√àME CRITIQUE DE S√âCURIT√â API');
    console.log('‚úÖ SI LES SUPPRESSIONS ONT √âCHOU√â: API S√âCURIS√âE CORRECTEMENT');
    console.log('');
    console.log('üîç TEST EFFECTU√â: Cr√©ation ‚Üí Liaison ‚Üí Tentatives de suppression ‚Üí V√©rification');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors du test API:', error.response?.data || error.message);
  }
}

// Ex√©cuter le test
testAPIContraintes().catch(console.error);