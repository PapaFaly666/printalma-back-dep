const axios = require('axios');

const API_BASE = 'http://localhost:3001';

async function login() {
  try {
    const response = await axios.post(`${API_BASE}/auth/login`, {
      email: 'hamdouche.alami@gmail.com',
      password: 'Azerty@123'
    });

    console.log('‚úÖ Connexion r√©ussie');
    return response.data.access_token;
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.response?.data || error.message);
    throw error;
  }
}

async function createCategory(token, name) {
  try {
    const response = await axios.post(`${API_BASE}/categories`, {
      name: name,
      slug: name.toLowerCase().replace(/\s+/g, '-'),
      description: `Description pour ${name}`,
      displayOrder: 1,
      isActive: true
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log(`‚úÖ Cat√©gorie "${name}" cr√©√©e avec ID: ${response.data.id}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur cr√©ation cat√©gorie "${name}":`, error.response?.data || error.message);
    throw error;
  }
}

async function createSubCategory(token, name, categoryId) {
  try {
    const response = await axios.post(`${API_BASE}/sub-categories`, {
      name: name,
      slug: name.toLowerCase().replace(/\s+/g, '-'),
      description: `Description pour ${name}`,
      categoryId: categoryId,
      displayOrder: 1,
      isActive: true
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log(`‚úÖ Sous-cat√©gorie "${name}" cr√©√©e avec ID: ${response.data.id}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur cr√©ation sous-cat√©gorie "${name}":`, error.response?.data || error.message);
    throw error;
  }
}

async function createVariation(token, name, subCategoryId) {
  try {
    const response = await axios.post(`${API_BASE}/variations`, {
      name: name,
      slug: name.toLowerCase().replace(/\s+/g, '-'),
      description: `Description pour ${name}`,
      subCategoryId: subCategoryId,
      displayOrder: 1,
      isActive: true
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log(`‚úÖ Variation "${name}" cr√©√©e avec ID: ${response.data.id}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur cr√©ation variation "${name}":`, error.response?.data || error.message);
    throw error;
  }
}

async function createProduct(token, productData) {
  try {
    const response = await axios.post(`${API_BASE}/products`, productData, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log(`‚úÖ Produit "${productData.name}" cr√©√© avec ID: ${response.data.id}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur cr√©ation produit "${productData.name}":`, error.response?.data || error.message);
    throw error;
  }
}

async function deleteEntity(token, entityType, entityId, entityName) {
  try {
    await axios.delete(`${API_BASE}/${entityType}/${entityId}`, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log(`‚ùå ERREUR: La ${entityType} "${entityName}" (ID: ${entityId}) a √©t√© supprim√©e - CE N'EST PAS NORMAL!`);
    return true;
  } catch (error) {
    if (error.response?.status === 400 || error.response?.status === 409 || error.response?.status === 500) {
      console.log(`‚úÖ BON: La ${entityType} "${entityName}" (ID: ${entityId}) ne peut pas √™tre supprim√©e car elle est utilis√©e par un produit`);
      return false;
    } else {
      console.error(`‚ùå Erreur inattendue lors de la suppression de la ${entityType}:`, error.response?.data || error.message);
      throw error;
    }
  }
}

async function testProductConstraints() {
  console.log('üöÄ D√âBUT DU TEST DE CONTRAINTES DE PRODUIT\n');

  let token;
  try {
    token = await login();
  } catch (error) {
    console.log('‚ùå Impossible de se connecter. Arr√™t du test.');
    return;
  }

  // √âtape 1: Cr√©er la hi√©rarchie compl√®te
  console.log('\nüìÅ √âTAPE 1: CR√âATION DE LA HI√âRARCHIE DE CAT√âGORIES');

  let category, subCategory, variation, product;

  try {
    // Cr√©er une cat√©gorie
    category = await createCategory(token, 'V√™tements de Test');

    // Cr√©er une sous-cat√©gorie
    subCategory = await createSubCategory(token, 'T-shirts de Test', category.id);

    // Cr√©er une variation
    variation = await createVariation(token, 'Col rond de Test', subCategory.id);

  } catch (error) {
    console.log('‚ùå Erreur lors de la cr√©ation de la hi√©rarchie. Arr√™t du test.');
    return;
  }

  // √âtape 2: Cr√©er un produit avec cette hi√©rarchie
  console.log('\nüì¶ √âTAPE 2: CR√âATION D\'UN PRODUIT AVEC LA HI√âRARCHIE');

  try {
    product = await createProduct(token, {
      name: 'T-shirt Test Contrainte',
      description: 'T-shirt pour tester les contraintes de suppression',
      price: 25.99,
      stock: 100,
      status: 'PUBLISHED',
      categoryId: category.id,
      subCategoryId: subCategory.id,
      variationId: variation.id,
      colorVariations: [
        {
          name: 'Blanc',
          colorCode: '#FFFFFF'
        }
      ],
      sizes: ['M', 'L']
    });

  } catch (error) {
    console.log('‚ùå Erreur lors de la cr√©ation du produit. Arr√™t du test.');
    return;
  }

  // √âtape 3: Tester les suppressions
  console.log('\nüóëÔ∏è  √âTAPE 3: TEST DES SUPPRESSIONS (DEVRAIENT √âCHOUER)');

  // Test 1: Essayer de supprimer la sous-cat√©gorie
  console.log('\n‚û°Ô∏è  Test 1: Tentative de suppression de la sous-cat√©gorie...');
  await deleteEntity(token, 'sub-categories', subCategory.id, subCategory.name);

  // Test 2: Essayer de supprimer la variation
  console.log('\n‚û°Ô∏è  Test 2: Tentative de suppression de la variation...');
  await deleteEntity(token, 'variations', variation.id, variation.name);

  // Test 3: Essayer de supprimer la cat√©gorie
  console.log('\n‚û°Ô∏è  Test 3: Tentative de suppression de la cat√©gorie...');
  await deleteEntity(token, 'categories', category.id, category.name);

  // √âtape 4: Nettoyage propre (supprimer le produit d'abord)
  console.log('\nüßπ √âTAPE 4: NETTOYAGE PROPRE (SUPPRESSION S√âQUENTIELLE)');

  try {
    // Supprimer le produit en premier
    await axios.delete(`${API_BASE}/products/${product.id}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log(`‚úÖ Produit "${product.name}" supprim√© avec succ√®s`);

    // Maintenant on devrait pouvoir supprimer la variation
    await deleteEntity(token, 'variations', variation.id, variation.name);

    // Puis la sous-cat√©gorie
    await deleteEntity(token, 'sub-categories', subCategory.id, subCategory.name);

    // Et enfin la cat√©gorie
    await deleteEntity(token, 'categories', category.id, category.name);

  } catch (error) {
    console.log('‚ùå Erreur lors du nettoyage:', error.response?.data || error.message);
  }

  console.log('\nüèÅ FIN DU TEST');
  console.log('\nüìã R√âSUM√â:');
  console.log('- Si les suppressions des √âTAPES 3 ont √©chou√©: ‚úÖ Les contraintes fonctionnent CORRECTEMENT');
  console.log('- Si les suppressions des √âTAPES 3 ont r√©ussi: ‚ùå Les contraintes NE fonctionnent PAS');
  console.log('- Le nettoyage de l\'√âTAPE 4 devrait fonctionner s√©quentiellement');
}

// Ex√©cuter le test
testProductConstraints().catch(console.error);